//-------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by EntitiesToDTOs.v3.2 (entitiestodtos.codeplex.com).
//     Timestamp: 2017/07/13 - 15:12:25
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//-------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;
using System.Linq;
using SAMBHS.Common.DataModel;

namespace SAMBHS.Common.BE
{

    /// <summary>
    /// Assembler for <see cref="flujoefectivoconceptosdetalles"/> and <see cref="flujoefectivoconceptosdetallesDto"/>.
    /// </summary>
    public static partial class flujoefectivoconceptosdetallesAssembler
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="flujoefectivoconceptosdetallesDto"/> converted from <see cref="flujoefectivoconceptosdetalles"/>.</param>
        static partial void OnDTO(this flujoefectivoconceptosdetalles entity, flujoefectivoconceptosdetallesDto dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="flujoefectivoconceptosdetalles"/> converted from <see cref="flujoefectivoconceptosdetallesDto"/>.</param>
        static partial void OnEntity(this flujoefectivoconceptosdetallesDto dto, flujoefectivoconceptosdetalles entity);

        /// <summary>
        /// Converts this instance of <see cref="flujoefectivoconceptosdetallesDto"/> to an instance of <see cref="flujoefectivoconceptosdetalles"/>.
        /// </summary>
        /// <param name="dto"><see cref="flujoefectivoconceptosdetallesDto"/> to convert.</param>
        public static flujoefectivoconceptosdetalles ToEntity(this flujoefectivoconceptosdetallesDto dto)
        {
            if (dto == null) return null;

            var entity = new flujoefectivoconceptosdetalles();

            entity.i_Id = dto.i_Id;
            entity.i_IdConceptoFlujo = dto.i_IdConceptoFlujo;
            entity.v_NroCuenta = dto.v_NroCuenta;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="flujoefectivoconceptosdetalles"/> to an instance of <see cref="flujoefectivoconceptosdetallesDto"/>.
        /// </summary>
        /// <param name="entity"><see cref="flujoefectivoconceptosdetalles"/> to convert.</param>
        public static flujoefectivoconceptosdetallesDto ToDTO(this flujoefectivoconceptosdetalles entity)
        {
            if (entity == null) return null;

            var dto = new flujoefectivoconceptosdetallesDto();

            dto.i_Id = entity.i_Id;
            dto.i_IdConceptoFlujo = entity.i_IdConceptoFlujo;
            dto.v_NroCuenta = entity.v_NroCuenta;

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="flujoefectivoconceptosdetallesDto"/> to an instance of <see cref="flujoefectivoconceptosdetalles"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<flujoefectivoconceptosdetalles> ToEntities(this IEnumerable<flujoefectivoconceptosdetallesDto> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="flujoefectivoconceptosdetalles"/> to an instance of <see cref="flujoefectivoconceptosdetallesDto"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<flujoefectivoconceptosdetallesDto> ToDTOs(this IEnumerable<flujoefectivoconceptosdetalles> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }
}
