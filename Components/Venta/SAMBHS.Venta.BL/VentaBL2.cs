using SAMBHS.Common.BE;
using SAMBHS.Common.DataModel;
using SAMBHS.Common.Resource;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Linq.Dynamic;
using System.Threading.Tasks;
using SAMBHS.CommonWIN.BL;
using SAMBHS.Common.BL;
using System.Data;
using System.Data.Sql;
using System.Data.SqlClient;
using System.Configuration;
using System.ComponentModel;
using System.Data.Common;
using SAMBHS.Almacen.BL;
using System.Data.Objects;
using SAMBHS.Tesoreria.BL;
using System.Transactions;
using System.Runtime.InteropServices;
using Microsoft.Win32.SafeHandles;
using System.Globalization;
using System.IO;
using System.Threading;
using SAMBHS.Common.Resource;
using System.Diagnostics;
using IsolationLevel = System.Transactions.IsolationLevel;
using SAMBHS.Common.BE.Custom;
using SAMBHS.Windows.SigesoftIntegration.UI;
using Dapper;
using SAMBHS.Windows.SigesoftIntegration.UI.Reports;
namespace SAMBHS.Venta.BL
{
    public partial class VentaBL
    {

        #region Pedidos

        public pedidoDto ObtenerPedido(ref OperationResult pobjOperationResult, string pstrIdPedido)
        {
            pedidoDto _pedidoDto = new pedidoDto();
            SAMBHSEntitiesModelWin dbcontext = new SAMBHSEntitiesModelWin();

            pedido _Pedido = (from n in dbcontext.pedido
                              where n.i_Eliminado == 0 && n.v_IdPedido == pstrIdPedido
                              select n).FirstOrDefault();

            _pedidoDto = pedidoAssembler.ToDTO(_Pedido);

            return _pedidoDto;
        }

        public List<pedidodetalleDto> ObtenerPedidoDetalle(ref OperationResult pobjOperationResult, string pstrIdPedido)
        {
            List<pedidodetalleDto> _pedidodetalleDto = new List<pedidodetalleDto>();
            SAMBHSEntitiesModelWin dbcontext = new SAMBHSEntitiesModelWin();

            var _PedidoDetalle = (from n in dbcontext.pedidodetalle
                                  where n.i_Eliminado == 0 && n.v_IdPedido == pstrIdPedido
                                  select n).ToList();

            _pedidodetalleDto = pedidodetalleAssembler.ToDTOs(_PedidoDetalle);

            return _pedidodetalleDto;
        }

        public void DespacharPedido(ref OperationResult pobjOperationResult, string IdPedido, List<string> ClientSession)
        {
            try
            {
                using (TransactionScope ts = TransactionUtils.CreateTransactionScope())
                {
                    SAMBHSEntitiesModelWin dbContext = new SAMBHSEntitiesModelWin();
                    var periodo = Globals.ClientSession.i_Periodo.ToString();
                    pedido _PedidoEntity = (from n in dbContext.pedido
                                            where n.v_IdPedido == IdPedido
                                            select n).FirstOrDefault();

                    if (_PedidoEntity != null)
                    {
                        #region Actualiza Pedido a Despachado

                        _PedidoEntity.i_IdEstado = 1; //DESPACHADO
                        _PedidoEntity.t_ActualizaFecha = DateTime.Now;
                        _PedidoEntity.i_ActualizaIdUsuario = Int32.Parse(ClientSession[2]);
                        dbContext.pedido.ApplyCurrentValues(_PedidoEntity);

                        #endregion

                        #region Elimina las separacione del Pedido en separacionproducto

                        var _separacionproductoEntity = (from n in dbContext.separacionproducto
                                                         where n.v_IdPedido == IdPedido && n.i_Eliminado == 0
                                                         select n).ToList();

                        foreach (separacionproducto Entidad in _separacionproductoEntity)
                        {
                            Entidad.i_Eliminado = 1;
                            Entidad.t_ActualizaFecha = DateTime.Now;
                            Entidad.i_ActualizaIdUsuario = Int32.Parse(ClientSession[2]);
                            dbContext.separacionproducto.ApplyCurrentValues(Entidad);

                            #region Regulariza Separación en productoalmacen

                            productoalmacen _productoalmacenEntity = (from n in dbContext.productoalmacen
                                                                      where
                                                                          n.v_IdProductoAlmacen == Entidad.v_IdProductoAlmacen && n.i_Eliminado == 0 &&
                                                                          n.v_Periodo == periodo
                                                                      select n).FirstOrDefault();
                            if (_productoalmacenEntity != null)
                            {
                                //********************El stock se resto al momento de generarle la nota de salida.********************
                                //  _productoalmacenEntity.d_SeparacionTotal = (_productoalmacenEntity.d_SeparacionTotal != null ? _productoalmacenEntity.d_SeparacionTotal.Value : Entidad.d_Separacion_Cantidad.Value) - Entidad.d_Separacion_Cantidad.Value;
                                _productoalmacenEntity.d_SeparacionTotal = (_productoalmacenEntity.d_SeparacionTotal !=
                                                                            null
                                    ? _productoalmacenEntity.d_SeparacionTotal.Value
                                    : Entidad.d_Separacion_CantidadEmpaque.Value) -
                                                                           Entidad.d_Separacion_CantidadEmpaque.Value;
                                dbContext.productoalmacen.ApplyCurrentValues(_productoalmacenEntity);
                            }

                            #endregion
                        }

                        #endregion

                        dbContext.SaveChanges();
                        pobjOperationResult.Success = 1;
                        ts.Complete();
                    }
                    else
                    {
                        pobjOperationResult.Success = 0;
                    }
                    return;
                }

            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.AdditionalInformation = "VentaBL.DespacharPedido()\nLinea:" +
                                                            ex.StackTrace.Substring(ex.StackTrace.LastIndexOf(' '));
                pobjOperationResult.ErrorMessage = ex.Message;
                pobjOperationResult.ExceptionMessage = ex.InnerException != null
                    ? ex.InnerException.Message
                    : string.Empty;
                Utils.ExceptionToLog(Globals.ClientSession.i_SystemUserId, pobjOperationResult);
                return;
            }
        }




        public void DespacharPedidoExtraccion(ref OperationResult pobjOperationResult, string IdPedido, List<string> ClientSession, string IdVenta)
        {
            try
            {
                using (TransactionScope ts = TransactionUtils.CreateTransactionScope())
                {
                    pobjOperationResult.Success = 1;
                    using (SAMBHSEntitiesModelWin dbContext = new SAMBHSEntitiesModelWin())
                    {
                        var periodo = Globals.ClientSession.i_Periodo.ToString();
                        pedido _PedidoEntity = (from n in dbContext.pedido
                                                where n.v_IdPedido == IdPedido && n.i_Eliminado == 0
                                                select n).FirstOrDefault();

                        if (_PedidoEntity != null)
                        {
                            #region Elimina las separacione del Pedido en separacionproducto

                            var _separacionproductoEntity = (from n in dbContext.separacionproducto
                                                             where n.v_IdPedido == IdPedido && n.i_Eliminado == 0
                                                             select n).ToList();
                            var detalles = dbContext.ventadetalle.Where(o => o.v_IdVenta == IdVenta).ToList();
                            bool TodoSeDespacho = true;
                            foreach (separacionproducto Entidad in _separacionproductoEntity)
                            {

                                var prodseparado = detalles.Where(o => o.v_IdProductoDetalle == Entidad.productoalmacen.v_ProductoDetalleId).FirstOrDefault();
                                if (prodseparado != null)
                                {

                                    Entidad.i_Eliminado = prodseparado.d_Cantidad == Entidad.d_Separacion_Cantidad ? 1 : 0;
                                    TodoSeDespacho = prodseparado.d_Cantidad == Entidad.d_Separacion_Cantidad ? true : false;
                                    Entidad.t_ActualizaFecha = DateTime.Now;
                                    Entidad.i_ActualizaIdUsuario = Int32.Parse(ClientSession[2]);
                                    dbContext.separacionproducto.ApplyCurrentValues(Entidad);
                                    #region Regulariza Separación en productoalmacen

                                    productoalmacen _productoalmacenEntity = (from n in dbContext.productoalmacen
                                                                              where
                                                                                  n.v_IdProductoAlmacen == Entidad.v_IdProductoAlmacen && n.i_Eliminado == 0 &&
                                                                                  n.v_Periodo == periodo
                                                                              select n).FirstOrDefault();
                                    if (_productoalmacenEntity != null)
                                    {

                                        _productoalmacenEntity.d_SeparacionTotal = (_productoalmacenEntity.d_SeparacionTotal !=
                                                                                    null
                                            ? _productoalmacenEntity.d_SeparacionTotal.Value
                                            : prodseparado.d_CantidadEmpaque ?? 0) -
                                                                                   prodseparado.d_CantidadEmpaque ?? 0;
                                        dbContext.productoalmacen.ApplyCurrentValues(_productoalmacenEntity);
                                    }

                                    #endregion
                                }
                                else TodoSeDespacho = false;

                            }


                            _PedidoEntity.i_IdEstado = TodoSeDespacho ? 1 : 0;
                            _PedidoEntity.t_ActualizaFecha = DateTime.Now;
                            _PedidoEntity.i_ActualizaIdUsuario = Int32.Parse(ClientSession[2]);
                            dbContext.pedido.ApplyCurrentValues(_PedidoEntity);

                            #endregion

                            dbContext.SaveChanges();
                        }
                        ts.Complete();
                    }

                }

            }
            catch (Exception ex)
            {

                pobjOperationResult.Success = 0;
                pobjOperationResult.AdditionalInformation = "VentaBL.DespacharPedidoExtraccion()\nLinea:" +
                                                            ex.StackTrace.Substring(ex.StackTrace.LastIndexOf(' '));
                pobjOperationResult.ErrorMessage = ex.Message;
                pobjOperationResult.ExceptionMessage = ex.InnerException != null
                    ? ex.InnerException.Message
                    : string.Empty;
                Utils.ExceptionToLog(Globals.ClientSession.i_SystemUserId, pobjOperationResult);
                return;
            }
        }
        public void RestauraPedido(ref OperationResult pobjOperationResult, string pstrIdPedido,
            List<string> ClientSession, string IdVenta)
        {
            try
            {
                if (!string.IsNullOrEmpty(pstrIdPedido))
                {
                    using (TransactionScope ts = TransactionUtils.CreateTransactionScope())
                    {
                        var periodo = Globals.ClientSession.i_Periodo.ToString();
                        SAMBHSEntitiesModelWin dbContext = new SAMBHSEntitiesModelWin();
                        string[] Pedido = new string[2];
                        try
                        {
                            Pedido = pstrIdPedido.Split(new Char[] { '-' });
                        }
                        finally
                        {
                            if (Pedido.Count() == 2)
                            {
                                var Serie = Pedido[0].Trim();
                                var Correlativo = Pedido[1].Trim();

                                pedido _pedidoEntity = (from p in dbContext.pedido
                                                        where p.v_SerieDocumento == Serie && p.v_CorrelativoDocumento == Correlativo && p.i_IdTipoDocumento == (int)TiposDocumentos.Pedido
                                                        select p).FirstOrDefault();

                                var ventadetalles = dbContext.ventadetalle.Where(o => o.v_IdVenta == IdVenta && o.i_Eliminado == 0).ToList();
                                var ProductoAlmacenes = dbContext.productoalmacen.ToList();
                                if (_pedidoEntity != null)
                                {
                                    //if (_pedidoEntity.i_IdEstado == 1)
                                    //Realiza la restauración de [separacionproducto] y [productoalmacen] sólo si el pedido había estado despachado.
                                    // {
                                    _pedidoEntity.t_ActualizaFecha = DateTime.Now;
                                    _pedidoEntity.i_ActualizaIdUsuario = Int32.Parse(ClientSession[2]);
                                    _pedidoEntity.i_IdEstado = 0;
                                    dbContext.pedido.ApplyCurrentValues(_pedidoEntity);

                                    var _separacionproductoEntity = (from pd in dbContext.separacionproducto
                                                                     where pd.v_IdPedido == _pedidoEntity.v_IdPedido
                                                                     select pd).ToList();

                                    foreach (separacionproducto sp in _separacionproductoEntity)
                                    {
                                        var pa1 = ProductoAlmacenes.Where(o => o.v_IdProductoAlmacen == sp.v_IdProductoAlmacen).FirstOrDefault();
                                        ventadetalle ProductoVenta = new ventadetalle();
                                        if (pa1 != null)
                                        {
                                            ProductoVenta = ventadetalles.Where(o => o.v_IdProductoDetalle == pa1.v_ProductoDetalleId).FirstOrDefault();
                                        }

                                        sp.d_Separacion_Cantidad = ProductoVenta != null ? sp.d_Separacion_Cantidad - ProductoVenta.d_Cantidad : 0;
                                        sp.d_Separacion_CantidadEmpaque = ProductoVenta != null ? sp.d_Separacion_CantidadEmpaque - ProductoVenta.d_CantidadEmpaque : 0;

                                        sp.i_Eliminado = 0;
                                        sp.t_ActualizaFecha = DateTime.Now;
                                        sp.i_ActualizaIdUsuario = Int32.Parse(ClientSession[2]);
                                        dbContext.separacionproducto.ApplyCurrentValues(sp);

                                        productoalmacen _productoalmacenEntity =
                                            (from pa in dbContext.productoalmacen
                                             where
                                                 pa.v_IdProductoAlmacen == sp.v_IdProductoAlmacen &&
                                                 pa.i_Eliminado == 0 && pa.v_Periodo == periodo
                                             select pa).FirstOrDefault();

                                        if (_productoalmacenEntity != null &&
                                            _productoalmacenEntity.d_SeparacionTotal != null)
                                            if (ProductoVenta != null && sp.d_Separacion_Cantidad != null)


                                                //_productoalmacenEntity.d_SeparacionTotal =
                                                //    _productoalmacenEntity.d_SeparacionTotal.Value +
                                                //    sp.d_Separacion_Cantidad.Value;
                                                _productoalmacenEntity.d_SeparacionTotal =
                                                    _productoalmacenEntity.d_SeparacionTotal.Value +
                                                    ProductoVenta.d_CantidadEmpaque;

                                        if (_productoalmacenEntity == null) continue;
                                        _productoalmacenEntity.t_ActualizaFecha = DateTime.Now;
                                        _productoalmacenEntity.i_ActualizaIdUsuario = Int32.Parse(ClientSession[2]);
                                        dbContext.productoalmacen.ApplyCurrentValues(_productoalmacenEntity);
                                    }
                                    dbContext.SaveChanges();
                                    pobjOperationResult.Success = 1;

                                    //}
                                }
                            }
                            ts.Complete();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ErrorMessage = ex.Message;
                return;
            }
        }

        #endregion

        #region Bandeja

        public List<ventaDto> ListarBusquedaVentas(ref OperationResult pobjOperationResult,
            string pstrSortExpression, string pstrIdCliente, DateTime F_Ini, DateTime F_Fin, int idDocumento = -1, string serie = null,
            string correlativo = null, int IdTipoOperacion = -1, int idEstablecimiento = -1, bool soloElectronicos = false, int? rolId = -1, int systemUserId = -1)
        {
            try
            {
                using (var dbContext = new SAMBHSEntitiesModelWin())
                {
                    if (systemUserId == 1 || systemUserId == 2037 || systemUserId == 4049)
                    {
                        var query = (from n in dbContext.venta
                                     join A in dbContext.cliente on n.v_IdCliente equals A.v_IdCliente into A_join
                                     from A in A_join.DefaultIfEmpty()
                                     join J2 in dbContext.systemuser on new { i_UpdateUserId = n.i_ActualizaIdUsuario.Value }
                                         equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
                                     from J2 in J2_join.DefaultIfEmpty()
                                     join J3 in dbContext.systemuser on new { i_InsertUserId = n.i_InsertaIdUsuario.Value }
                                         equals new { i_InsertUserId = J3.i_SystemUserId } into J3_join
                                     from J3 in J3_join.DefaultIfEmpty()
                                     join J4 in dbContext.documento on new { i_IdTipoDocumento = n.i_IdTipoDocumento ?? 1 }
                                         equals new { i_IdTipoDocumento = J4.i_CodigoDocumento } into J4_join
                                     from J4 in J4_join.DefaultIfEmpty()
                                     join J5 in dbContext.cobranzapendiente on new { idventa = n.v_IdVenta, eliminado = 0 }
                                         equals new { idventa = J5.v_IdVenta, eliminado = J5.i_Eliminado ?? 0 } into J5_join
                                     from J5 in J5_join.DefaultIfEmpty()

                                     where
                                         n.i_Eliminado == 0 && n.t_FechaRegistro >= F_Ini && n.t_FechaRegistro <= F_Fin &&
                                         (idEstablecimiento == -1 || n.i_IdEstablecimiento == idEstablecimiento) &&
                                         (!soloElectronicos || (n.v_SerieDocumento.StartsWith("B") || n.v_SerieDocumento.StartsWith("F")))
                                     orderby n.t_InsertaFecha descending
                                     select new ventaDto
                                     {
                                         v_IdVenta = n.v_IdVenta,
                                         v_Mes = n.v_Mes,
                                         v_Correlativo = n.v_Correlativo,
                                         v_SerieDocumento = n.v_SerieDocumento,
                                         v_CorrelativoDocumento = n.v_CorrelativoDocumento,
                                         NroRegistro = n.v_Mes.Trim() + "-" + n.v_Correlativo,
                                         Documento = n.v_SerieDocumento + " - " + n.v_CorrelativoDocumento,
                                         i_IdTipoDocumento = n.i_IdTipoDocumento,
                                         TipoDocumento = J4 != null ? J4.v_Siglas : "",
                                         t_FechaRegistro = n.t_FechaRegistro ?? null,
                                         v_IdCliente = n.v_IdCliente,
                                         CodigoCliente = A != null ? A.v_CodCliente : "",
                                         NombreCliente = A != null ?
                                             n.v_IdCliente != "N002-CL000000000"
                                                 ? (A.v_ApePaterno + " " + A.v_ApeMaterno + " " + A.v_PrimerNombre + " " +
                                                    A.v_RazonSocial).Trim()
                                                 : (n.v_NombreClienteTemporal != null && n.v_NombreClienteTemporal.Trim() != "") ? n.v_NombreClienteTemporal : "PÚBLICO GENERAL" : "",
                                         d_Total = n.i_IdTipoDocumento == 500 || n.i_IdTipoDocumento == 502 || n.i_IdTipoDocumento == 504 || n.i_IdTipoDocumento == 509 || n.i_IdTipoDocumento == 510 || n.i_IdTipoDocumento == 511 ? -1 * (n.d_Total) : n.i_IdTipoDocumento == 507 || n.i_IdTipoDocumento == 508 ? (n.d_Total - n.d_Total) : n.d_Total,
                                         i_IdEstado = n.i_IdEstado,
                                         t_InsertaFecha = n.t_InsertaFecha,
                                         t_ActualizaFecha = n.t_ActualizaFecha,
                                         v_UsuarioModificacion = J2 != null ? J2.v_UserName : "",
                                         v_UsuarioCreacion = J3 != null ? J3.v_UserName : "",
                                         Moneda = n.i_IdMoneda == 1 ? "S" : "D",
                                         Saldo = J5 != null ? J5.d_Saldo ?? 0 : 0,
                                         TieneGRM = !string.IsNullOrEmpty(n.v_NroGuiaRemisionSerie) && !string.IsNullOrEmpty(n.v_NroGuiaRemisionCorrelativo) ? n.v_NroGuiaRemisionSerie.Trim() + "-" + n.v_NroGuiaRemisionCorrelativo.Trim() : "", // n.v_NroGuiaRemisionSerie.Trim() != "",
                                         Origen = "V",
                                         NroDocCliente = A != null ? A.v_NroDocIdentificacion : "",
                                         d_TipoCambio = n.d_TipoCambio ?? 0,
                                         i_EstadoSunat = n.i_EstadoSunat,
                                         i_IdTipoOperacion = n.i_IdTipoOperacion,
                                         v_Concepto = n.v_Concepto,
                                         v_IdVendedor = n.v_IdVendedor,
                                         i_ClienteEsAgente = n.i_ClienteEsAgente
                                     }
                                );

                        if (!string.IsNullOrWhiteSpace(pstrIdCliente))
                            query = query.Where(n => n.v_IdCliente.Equals(pstrIdCliente));

                        if (idDocumento != -1)
                            query = query.Where(n => n.i_IdTipoDocumento == idDocumento);

                        if (!string.IsNullOrWhiteSpace(serie))
                            query = query.Where(n => n.v_SerieDocumento.Equals(serie));

                        if (!string.IsNullOrWhiteSpace(correlativo))
                            query = query.Where(n => n.v_CorrelativoDocumento.Equals(correlativo));

                        if (IdTipoOperacion != -1)
                        {
                            query = query.Where(n => (n.i_IdTipoOperacion) == IdTipoOperacion);
                        }

                        var result = query.ToList();
                        pobjOperationResult.Success = 1;
                        return result;
                    }
                    else if (systemUserId == 2036)
                    {
                        var query = (from n in dbContext.venta

                                     join A1 in dbContext.vendedor on n.v_IdVendedor equals A1.v_IdVendedor into A1_join
                                     from A1 in A1_join.DefaultIfEmpty()

                                     join J6 in dbContext.systemuser on A1.i_SystemUser equals J6.i_SystemUserId

                                     join A in dbContext.cliente on n.v_IdCliente equals A.v_IdCliente into A_join
                                     from A in A_join.DefaultIfEmpty()
                                     join J2 in dbContext.systemuser on new { i_UpdateUserId = n.i_ActualizaIdUsuario.Value }
                                         equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
                                     from J2 in J2_join.DefaultIfEmpty()
                                     join J3 in dbContext.systemuser on new { i_InsertUserId = n.i_InsertaIdUsuario.Value }
                                         equals new { i_InsertUserId = J3.i_SystemUserId } into J3_join
                                     from J3 in J3_join.DefaultIfEmpty()
                                     join J4 in dbContext.documento on new { i_IdTipoDocumento = n.i_IdTipoDocumento ?? 1 }
                                         equals new { i_IdTipoDocumento = J4.i_CodigoDocumento } into J4_join
                                     from J4 in J4_join.DefaultIfEmpty()
                                     join J5 in dbContext.cobranzapendiente on new { idventa = n.v_IdVenta, eliminado = 0 }
                                         equals new { idventa = J5.v_IdVenta, eliminado = J5.i_Eliminado ?? 0 } into J5_join
                                     from J5 in J5_join.DefaultIfEmpty()

                                     where
                                         n.i_Eliminado == 0 && n.t_FechaRegistro >= F_Ini && n.t_FechaRegistro <= F_Fin &&
                                         (idEstablecimiento == -1 || n.i_IdEstablecimiento == idEstablecimiento) &&
                                         //(n.i_InsertaIdUsuario == systemUserId) &&
                                         (n.i_ClienteEsAgente == 3 || n.i_ClienteEsAgente == 4) &&
                                         (!soloElectronicos || (n.v_SerieDocumento.StartsWith("B") || n.v_SerieDocumento.StartsWith("F")))
                                     orderby n.t_InsertaFecha descending
                                     select new ventaDto
                                     {
                                         v_IdVenta = n.v_IdVenta,
                                         v_Mes = n.v_Mes,
                                         v_Correlativo = n.v_Correlativo,
                                         v_SerieDocumento = n.v_SerieDocumento,
                                         v_CorrelativoDocumento = n.v_CorrelativoDocumento,
                                         NroRegistro = n.v_Mes.Trim() + "-" + n.v_Correlativo,
                                         Documento = n.v_SerieDocumento + " - " + n.v_CorrelativoDocumento,
                                         i_IdTipoDocumento = n.i_IdTipoDocumento,
                                         TipoDocumento = J4 != null ? J4.v_Siglas : "",
                                         t_FechaRegistro = n.t_FechaRegistro ?? null,
                                         v_IdCliente = n.v_IdCliente,
                                         CodigoCliente = A != null ? A.v_CodCliente : "",
                                         NombreCliente = A != null ?
                                             n.v_IdCliente != "N002-CL000000000"
                                                 ? (A.v_ApePaterno + " " + A.v_ApeMaterno + " " + A.v_PrimerNombre + " " +
                                                    A.v_RazonSocial).Trim()
                                                 : (n.v_NombreClienteTemporal != null && n.v_NombreClienteTemporal.Trim() != "") ? n.v_NombreClienteTemporal : "PÚBLICO GENERAL" : "",
                                         d_Total = n.i_IdTipoDocumento == 500 || n.i_IdTipoDocumento == 501 || n.i_IdTipoDocumento == 502 || n.i_IdTipoDocumento == 504 || n.i_IdTipoDocumento == 509 || n.i_IdTipoDocumento == 510 || n.i_IdTipoDocumento == 511 ? -1 * (n.d_Total) : n.i_IdTipoDocumento == 507 || n.i_IdTipoDocumento == 508 ? (n.d_Total - n.d_Total) : n.d_Total,
                                         i_IdEstado = n.i_IdEstado,
                                         t_InsertaFecha = n.t_InsertaFecha,
                                         t_ActualizaFecha = n.t_ActualizaFecha,
                                         v_UsuarioModificacion = J2 != null ? J2.v_UserName : "",
                                         v_UsuarioCreacion = J3 != null ? J3.v_UserName : "",
                                         Moneda = n.i_IdMoneda == 1 ? "S" : "D",
                                         Saldo = J5 != null ? J5.d_Saldo ?? 0 : 0,
                                         TieneGRM = !string.IsNullOrEmpty(n.v_NroGuiaRemisionSerie) && !string.IsNullOrEmpty(n.v_NroGuiaRemisionCorrelativo) ? n.v_NroGuiaRemisionSerie.Trim() + "-" + n.v_NroGuiaRemisionCorrelativo.Trim() : "", // n.v_NroGuiaRemisionSerie.Trim() != "",
                                         Origen = "V",
                                         NroDocCliente = A != null ? A.v_NroDocIdentificacion : "",
                                         d_TipoCambio = n.d_TipoCambio ?? 0,
                                         i_EstadoSunat = n.i_EstadoSunat,
                                         i_IdTipoOperacion = n.i_IdTipoOperacion,
                                         v_Concepto = n.v_Concepto,
                                         v_IdVendedor = n.v_IdVendedor,
                                         i_ClienteEsAgente = n.i_ClienteEsAgente
                                     }
                                );

                        if (!string.IsNullOrWhiteSpace(pstrIdCliente))
                            query = query.Where(n => n.v_IdCliente.Equals(pstrIdCliente));

                        if (idDocumento != -1)
                            query = query.Where(n => n.i_IdTipoDocumento == idDocumento);

                        if (!string.IsNullOrWhiteSpace(serie))
                            query = query.Where(n => n.v_SerieDocumento.Equals(serie));

                        if (!string.IsNullOrWhiteSpace(correlativo))
                            query = query.Where(n => n.v_CorrelativoDocumento.Equals(correlativo));

                        if (IdTipoOperacion != -1)
                        {
                            query = query.Where(n => (n.i_IdTipoOperacion) == IdTipoOperacion);
                        }

                        var result = query.ToList();
                        pobjOperationResult.Success = 1;
                        return result;
                    }
                    else
                    {
                        var query = (from n in dbContext.venta

                                     join A1 in dbContext.vendedor on n.v_IdVendedor equals A1.v_IdVendedor into A1_join
                                     from A1 in A1_join.DefaultIfEmpty()

                                     join J6 in dbContext.systemuser on A1.i_SystemUser equals J6.i_SystemUserId

                                     join A in dbContext.cliente on n.v_IdCliente equals A.v_IdCliente into A_join
                                     from A in A_join.DefaultIfEmpty()
                                     join J2 in dbContext.systemuser on new { i_UpdateUserId = n.i_ActualizaIdUsuario.Value }
                                         equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
                                     from J2 in J2_join.DefaultIfEmpty()
                                     join J3 in dbContext.systemuser on new { i_InsertUserId = n.i_InsertaIdUsuario.Value }
                                         equals new { i_InsertUserId = J3.i_SystemUserId } into J3_join
                                     from J3 in J3_join.DefaultIfEmpty()
                                     join J4 in dbContext.documento on new { i_IdTipoDocumento = n.i_IdTipoDocumento ?? 1 }
                                         equals new { i_IdTipoDocumento = J4.i_CodigoDocumento } into J4_join
                                     from J4 in J4_join.DefaultIfEmpty()
                                     join J5 in dbContext.cobranzapendiente on new { idventa = n.v_IdVenta, eliminado = 0 }
                                         equals new { idventa = J5.v_IdVenta, eliminado = J5.i_Eliminado ?? 0 } into J5_join
                                     from J5 in J5_join.DefaultIfEmpty()

                                     where
                                         n.i_Eliminado == 0 && n.t_FechaRegistro >= F_Ini && n.t_FechaRegistro <= F_Fin &&
                                         (idEstablecimiento == -1 || n.i_IdEstablecimiento == idEstablecimiento) &&
                                         (n.i_InsertaIdUsuario == systemUserId) &&
                                         (!soloElectronicos || (n.v_SerieDocumento.StartsWith("B") || n.v_SerieDocumento.StartsWith("F")))
                                     orderby n.t_InsertaFecha descending
                                     select new ventaDto
                                     {
                                         v_IdVenta = n.v_IdVenta,
                                         v_Mes = n.v_Mes,
                                         v_Correlativo = n.v_Correlativo,
                                         v_SerieDocumento = n.v_SerieDocumento,
                                         v_CorrelativoDocumento = n.v_CorrelativoDocumento,
                                         NroRegistro = n.v_Mes.Trim() + "-" + n.v_Correlativo,
                                         Documento = n.v_SerieDocumento + " - " + n.v_CorrelativoDocumento,
                                         i_IdTipoDocumento = n.i_IdTipoDocumento,
                                         TipoDocumento = J4 != null ? J4.v_Siglas : "",
                                         t_FechaRegistro = n.t_FechaRegistro ?? null,
                                         v_IdCliente = n.v_IdCliente,
                                         CodigoCliente = A != null ? A.v_CodCliente : "",
                                         NombreCliente = A != null ?
                                             n.v_IdCliente != "N002-CL000000000"
                                                 ? (A.v_ApePaterno + " " + A.v_ApeMaterno + " " + A.v_PrimerNombre + " " +
                                                    A.v_RazonSocial).Trim()
                                                 : (n.v_NombreClienteTemporal != null && n.v_NombreClienteTemporal.Trim() != "") ? n.v_NombreClienteTemporal : "PÚBLICO GENERAL" : "",
                                         d_Total = n.i_IdTipoDocumento == 500 || n.i_IdTipoDocumento == 502 || n.i_IdTipoDocumento == 504 || n.i_IdTipoDocumento == 509 || n.i_IdTipoDocumento == 510 || n.i_IdTipoDocumento == 511 ? -1 * (n.d_Total) : n.i_IdTipoDocumento == 507 || n.i_IdTipoDocumento == 508 ? (n.d_Total - n.d_Total) : n.d_Total,
                                         i_IdEstado = n.i_IdEstado,
                                         t_InsertaFecha = n.t_InsertaFecha,
                                         t_ActualizaFecha = n.t_ActualizaFecha,
                                         v_UsuarioModificacion = J2 != null ? J2.v_UserName : "",
                                         v_UsuarioCreacion = J3 != null ? J3.v_UserName : "",
                                         Moneda = n.i_IdMoneda == 1 ? "S" : "D",
                                         Saldo = J5 != null ? J5.d_Saldo ?? 0 : 0,
                                         TieneGRM = !string.IsNullOrEmpty(n.v_NroGuiaRemisionSerie) && !string.IsNullOrEmpty(n.v_NroGuiaRemisionCorrelativo) ? n.v_NroGuiaRemisionSerie.Trim() + "-" + n.v_NroGuiaRemisionCorrelativo.Trim() : "", // n.v_NroGuiaRemisionSerie.Trim() != "",
                                         Origen = "V",
                                         NroDocCliente = A != null ? A.v_NroDocIdentificacion : "",
                                         d_TipoCambio = n.d_TipoCambio ?? 0,
                                         i_EstadoSunat = n.i_EstadoSunat,
                                         i_IdTipoOperacion = n.i_IdTipoOperacion,
                                         v_Concepto = n.v_Concepto,
                                         v_IdVendedor = n.v_IdVendedor,
                                         i_ClienteEsAgente = n.i_ClienteEsAgente
                                     }
                                );

                        if (!string.IsNullOrWhiteSpace(pstrIdCliente))
                            query = query.Where(n => n.v_IdCliente.Equals(pstrIdCliente));

                        if (idDocumento != -1)
                            query = query.Where(n => n.i_IdTipoDocumento == idDocumento);

                        if (!string.IsNullOrWhiteSpace(serie))
                            query = query.Where(n => n.v_SerieDocumento.Equals(serie));

                        if (!string.IsNullOrWhiteSpace(correlativo))
                            query = query.Where(n => n.v_CorrelativoDocumento.Equals(correlativo));

                        if (IdTipoOperacion != -1)
                        {
                            query = query.Where(n => (n.i_IdTipoOperacion) == IdTipoOperacion);
                        }

                        var result = query.ToList();
                        pobjOperationResult.Success = 1;
                        return result;
                    }
                    
                }
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        public List<ventaDto> ListarBusquedaVentas()
        {
            try
            {
                using (var dbContext = new SAMBHSEntitiesModelWin())
                {
                    var result = dbContext.venta.Where(p => p.i_Eliminado == 0);
                    var r =
                        result.GroupBy(p => new { p.v_SerieDocumento, p.v_CorrelativoDocumento, p.i_IdTipoDocumento })
                            .Select(o => o.FirstOrDefault()).ToList();

                    return r.ToDTOs();
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        public List<ventaDto> ListarBusquedaVentasXPedido(ref OperationResult pobjOperationResult,
            string pstrSortExpression, string pstrFilterExpression, string pstrIdPedido)
        {
            try
            {
                using (var dbContext = new SAMBHSEntitiesModelWin())
                {
                    var query = (from n in dbContext.venta

                                 join A in dbContext.cliente on n.v_IdCliente equals A.v_IdCliente into A_join
                                 from A in A_join.DefaultIfEmpty()

                                 join J2 in dbContext.systemuser on new { i_UpdateUserId = n.i_ActualizaIdUsuario.Value }
                                     equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
                                 from J2 in J2_join.DefaultIfEmpty()

                                 join J3 in dbContext.systemuser on new { i_InsertUserId = n.i_InsertaIdUsuario.Value }
                                     equals new { i_InsertUserId = J3.i_SystemUserId } into J3_join
                                 from J3 in J3_join.DefaultIfEmpty()

                                 join J4 in dbContext.documento on new { i_IdTipoDocumento = n.i_IdTipoDocumento.Value }
                                     equals new { i_IdTipoDocumento = J4.i_CodigoDocumento } into J4_join
                                 from J4 in J4_join.DefaultIfEmpty()

                                 where n.i_Eliminado == 0 && n.v_NroPedido == pstrIdPedido
                                 orderby n.t_InsertaFecha descending

                                 select new ventaDto
                                 {
                                     v_IdVenta = n.v_IdVenta,
                                     v_Mes = n.v_Mes,
                                     v_Correlativo = n.v_Correlativo,
                                     v_SerieDocumento = n.v_SerieDocumento,
                                     v_CorrelativoDocumento = n.v_CorrelativoDocumento,
                                     NroRegistro = n.v_Mes.Trim() + "-" + n.v_Correlativo,
                                     Documento = n.v_SerieDocumento + " - " + n.v_CorrelativoDocumento,
                                     i_IdTipoDocumento = n.i_IdTipoDocumento,
                                     TipoDocumento = J4.v_Siglas,
                                     t_FechaRegistro = n.t_FechaRegistro,
                                     v_IdCliente = n.v_IdCliente,
                                     CodigoCliente = A.v_CodCliente,
                                     NombreCliente =
                                         n.v_IdCliente != "N002-CL000000000"
                                             ? (A.v_ApePaterno + " " + A.v_ApeMaterno + " " + A.v_PrimerNombre + " " +
                                                A.v_RazonSocial).Trim()
                                             : n.v_NombreClienteTemporal,
                                     d_Total = n.d_Total,
                                     i_IdEstado = n.i_IdEstado,
                                     t_InsertaFecha = n.t_InsertaFecha,
                                     t_ActualizaFecha = n.t_ActualizaFecha,
                                     v_UsuarioModificacion = J2.v_UserName,
                                     v_UsuarioCreacion = J3.v_UserName,
                                     Moneda = n.i_IdMoneda == 1 ? "S" : "D"
                                 }
                                );

                    if (!string.IsNullOrEmpty(pstrFilterExpression))
                    {
                        query = query.Where(pstrFilterExpression);
                    }
                    if (!string.IsNullOrEmpty(pstrSortExpression))
                    {
                        query = query.OrderBy(pstrSortExpression);
                    }

                    List<ventaDto> objData = query.ToList();
                    pobjOperationResult.Success = 1;
                    return objData;
                }
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        public List<ventaDto> ListarBusquedaVentasJerarquica(ref OperationResult pobjOperationResult,
            string pstrSortExpression, string pstrIdPedido)
        {
            try
            {
                using (var dbContext = new SAMBHSEntitiesModelWin())
                {
                    #region Query Base

                    var query = (from venta n in dbContext.venta
                                 where n.v_NroPedido == pstrIdPedido
                                 select new
                                 {
                                     v_IdVenta = n.v_IdVenta,
                                     v_Mes = n.v_Mes,
                                     v_Correlativo = n.v_Correlativo,
                                     v_SerieDocumento = n.v_SerieDocumento,
                                     v_CorrelativoDocumento = n.v_CorrelativoDocumento,
                                     i_IdTipoDocumento = n.i_IdTipoDocumento,
                                     t_FechaRegistro = n.t_FechaRegistro,
                                     v_IdCliente = n.v_IdCliente,
                                     d_Total = n.d_Total,
                                     i_IdEstado = n.i_IdEstado,
                                     t_InsertaFecha = n.t_InsertaFecha,
                                     t_ActualizaFecha = n.t_ActualizaFecha,
                                     i_ActualizaIdUsuario = n.i_ActualizaIdUsuario,
                                     i_InsertaIdUsuario = n.i_InsertaIdUsuario,
                                     i_Eliminado = n.i_Eliminado,
                                     v_NroPedido = n.v_NroPedido,
                                     v_NombreClienteTemporal = n.v_NombreClienteTemporal,
                                     _ventadetalleDto = (from ventadetalle AA in dbContext.ventadetalle

                                                         join pd in dbContext.productodetalle on AA.v_IdProductoDetalle equals pd.v_IdProductoDetalle
                                                             into pd_join
                                                         from pd in pd_join.DefaultIfEmpty()

                                                         join p in dbContext.producto on pd.v_IdProducto equals p.v_IdProducto into p_join
                                                         from p in p_join.DefaultIfEmpty()

                                                         join J1 in dbContext.datahierarchy on new { a = p.i_IdUnidadMedida.Value, b = 17 }
                                                             equals new { a = J1.i_ItemId, b = J1.i_GroupId } into J1_join
                                                         from J1 in J1_join.DefaultIfEmpty()

                                                         join J2 in dbContext.datahierarchy on new { a = AA.i_IdUnidadMedida.Value, b = 17 }
                                                             equals new { a = J2.i_ItemId, b = J2.i_GroupId } into J2_join
                                                         from J2 in J2_join.DefaultIfEmpty()

                                                         where AA.v_IdVenta == n.v_IdVenta
                                                         select new ventadetalleDto
                                                         {
                                                             d_Cantidad = AA.d_Cantidad,
                                                             d_Descuento = AA.d_Descuento,
                                                             d_Igv = AA.d_Igv,
                                                             d_Precio = AA.d_Precio,
                                                             d_PrecioVenta = AA.d_PrecioVenta,
                                                             d_Valor = AA.d_Valor,
                                                             d_ValorVenta = AA.d_ValorVenta,
                                                             i_IdAlmacen = AA.i_IdAlmacen,
                                                             i_IdTipoOperacion = AA.i_IdTipoOperacion,
                                                             i_NroUnidades = AA.i_NroUnidades,
                                                             v_NroCuenta = AA.v_NroCuenta,
                                                             ProductoNombre = p.v_Descripcion,
                                                             EmpaqueUM = J1.v_Value1,
                                                             UnidadMedida = J2.v_Value1
                                                         }).AsEnumerable()
                                 }
                        ).AsEnumerable();

                    #endregion

                    #region Query Resultante

                    var v = (from n in query

                             join A in dbContext.cliente on n.v_IdCliente equals A.v_IdCliente into A_join
                             from A in A_join.DefaultIfEmpty()

                             join J4 in dbContext.documento on new { i_IdTipoDocumento = n.i_IdTipoDocumento.Value }
                                 equals new { i_IdTipoDocumento = J4.i_CodigoDocumento } into J4_join
                             from J4 in J4_join.DefaultIfEmpty()

                             where n.i_Eliminado == 0 && n.v_NroPedido == pstrIdPedido && n.i_IdEstado == 1

                             select new ventaDto
                             {
                                 v_IdVenta = n.v_IdVenta,
                                 v_Mes = n.v_Mes,
                                 v_Correlativo = n.v_Correlativo,
                                 v_SerieDocumento = n.v_SerieDocumento,
                                 v_CorrelativoDocumento = n.v_CorrelativoDocumento,
                                 NroRegistro = n.v_Mes.Trim() + "-" + n.v_Correlativo,
                                 Documento = n.v_SerieDocumento + " - " + n.v_CorrelativoDocumento,
                                 TipoDocumento = J4.v_Siglas,
                                 t_FechaRegistro = n.t_FechaRegistro,
                                 v_IdCliente = n.v_IdCliente,
                                 CodigoCliente = A.v_CodCliente,
                                 NombreCliente =
                                     n.v_IdCliente != "N002-CL000000000"
                                         ? (A.v_ApePaterno + " " + A.v_ApeMaterno + " " + A.v_PrimerNombre + " " +
                                            A.v_RazonSocial).Trim()
                                         : n.v_NombreClienteTemporal,
                                 d_Total = n.d_Total,
                                 i_IdEstado = n.i_IdEstado,
                                 t_InsertaFecha = n.t_InsertaFecha,
                                 t_ActualizaFecha = n.t_ActualizaFecha,
                                 _ventadetalleDto = n._ventadetalleDto.ToList(),
                                 i_IdTipoDocumento = n.i_IdTipoDocumento
                             }).AsQueryable();

                    #endregion

                    List<ventaDto> objData = v.ToList();

                    pobjOperationResult.Success = 1;
                    return objData;
                }
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        public List<historialpagosventaDto> BuscarHistorialPagos(ref OperationResult pobjOperationResult,
            string pstrIdVenta)
        {
            try
            {
                using (var dbContext = new SAMBHSEntitiesModelWin())
                {
                    #region Query Buscar Cobranzas
                    var queryCobranzas = (from n in dbContext.cobranzadetalle
                                          join J1 in dbContext.cobranza on n.v_IdCobranza equals J1.v_IdCobranza into J1_join
                                          from J1 in J1_join.DefaultIfEmpty()
                                          join J4 in dbContext.documento on new { i_IdTipoDocumento = J1.i_IdTipoDocumento.Value }
                                              equals new { i_IdTipoDocumento = J4.i_CodigoDocumento } into J4_join
                                          from J4 in J4_join.DefaultIfEmpty()
                                          where n.v_IdVenta == pstrIdVenta && J1.i_Eliminado == 0 && n.i_Eliminado == 0
                                          select new historialpagosventaDto
                                          {
                                              TipoDocumento = J4.v_Siglas,
                                              NroDocumento = J1.v_Mes.Trim() + "-" + J1.v_Correlativo,
                                              IdDocumento = J1.v_IdCobranza,
                                              Glosa = J1.v_Glosa,
                                              TipoCambio = J1.d_TipoCambio.Value,
                                              Fecha = J1.t_FechaRegistro.Value,
                                              Moneda = J1.i_IdMoneda == 1 ? "Soles" : "Dólares",
                                              EsLetra = false,
                                              Pago = n.d_ImporteSoles.Value,
                                              SaldoLetra = 0,
                                              Estado = J1.i_IdEstado ?? 0,
                                          }).ToList();
                    #endregion

                    #region Query Buscar Canjes a Letras
                    var queryLetras = (from n in dbContext.letrasdetalle
                                       join J1 in dbContext.letrascanje on n.v_IdLetras equals J1.v_IdLetras into J1_join
                                       from J1 in J1_join.DefaultIfEmpty()
                                       join J2 in dbContext.letras on J1.v_IdLetras equals J2.v_IdLetras into J2_join
                                       from J2 in J2_join.DefaultIfEmpty()
                                       join J3 in dbContext.cobranzaletraspendiente on n.v_IdLetrasDetalle equals J3.v_IdLetrasDetalle into J3_join
                                       from J3 in J3_join.DefaultIfEmpty()
                                       join J4 in dbContext.documento on new { i_IdTipoDocumento = n.i_IdTipoDocumento.Value }
                                           equals new { i_IdTipoDocumento = J4.i_CodigoDocumento } into J4_join
                                       from J4 in J4_join.DefaultIfEmpty()
                                       where J1.v_IdVenta == pstrIdVenta && J1.i_Eliminado == 0 && n.i_Eliminado == 0
                                       select new historialpagosventaDto
                                       {
                                           TipoDocumento = J4.v_Siglas,
                                           NroDocumento = J2.v_Mes.Trim() + "-" + J2.v_Correlativo,
                                           IdDocumento = n.v_IdLetrasDetalle,
                                           TipoCambio = J2.d_TipoCambio.Value,
                                           Glosa = "*C A N J E  A  L E T R A S*",
                                           Fecha = J2.t_FechaRegistro.Value,
                                           Moneda = J2.i_IdMoneda == 1 ? "Soles" : "Dólares",
                                           EsLetra = true,
                                           Pago = n.d_Importe.Value,
                                           SaldoLetra = J3.d_Saldo.Value,
                                           Estado = 1,
                                       }).ToList();
                    #endregion

                    pobjOperationResult.Success = 1;
                    return queryCobranzas.Concat(queryLetras).ToList();
                }
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.AdditionalInformation = "VentaBL.BuscarHistorialPagos()\nLinea:" +
                                                            ex.StackTrace.Substring(ex.StackTrace.LastIndexOf(' '));
                pobjOperationResult.ErrorMessage = ex.Message;
                pobjOperationResult.ExceptionMessage = ex.InnerException != null
                    ? ex.InnerException.Message
                    : string.Empty;
                return null;
            }
        }

        public string ObtieneNotaCreditoActivas(string serie, string correlativo, int idTipoDocumento)
        {
            try
            {
                using (var dbContext = new SAMBHSEntitiesModelWin())
                {
                    var ncrs =
                        dbContext.venta.Where(
                            p =>
                                p.i_IdTipoDocumento == 7 && p.v_SerieDocumentoRef.Equals(serie) &&
                                p.v_CorrelativoDocumentoRef.Equals(correlativo)
                                && p.i_IdTipoDocumentoRef == idTipoDocumento && p.i_Eliminado == 0 && p.i_IdEstado == 1).ToList()
                                .Select(p => p.v_SerieDocumento + "-" + p.v_CorrelativoDocumento + " F.: " + p.t_FechaRegistro.Value.ToShortDateString());
                    if (!ncrs.Any()) return "--";
                    return string.Join(" | ", ncrs);
                }
            }
            catch (Exception ex)
            {
                return ex.Message;
            }
        }

        #endregion

        #region Reporte


        /// <summary>
        /// ESTE METODO NOS VA A SERVIR PARA CONCATENAR, RETORNA UNA CADENA 
        /// EN ESTE STORE VAS A PASAR COMO PARAMETRO EL ID DEL VOUCHER Y TE VA A DEVOLVER LA 
        /// CONCATENACIÒN DE SUS FORMAS DE PAGO
        /// </summary>
        /// <param name="pstrVoucher"> Este es el nro voucher</param>
        /// <returns></returns>
        public string ListMethod(string pstrVoucher)// BUENO ESTE ES EL MONBRE DEL METODO CON SU PARAMETRO
        {
            using (SAMBHSEntitiesModelWin dbContext = new SAMBHSEntitiesModelWin())
            {

                //ACA HACES TU QUERY, SEGURO QUE ES UN SELECT SIMPLE CON UN PAR DE JOIN

                var qry = from a in dbContext.cobranza
                          // RESTRICCIONES POR Diagnosticos
                          join eee in dbContext.cobranzadetalle on a.v_IdCobranza equals eee.v_IdCobranza
                          join hh in dbContext.datahierarchy on eee.i_IdFormaPago equals hh.i_ItemId
                          where hh.i_GroupId == 46 && eee.v_IdVenta == pstrVoucher
                          select new ventaDto
                          {
                              v_Concepto = hh.v_Value1 // ACA PONES POR EJEMPLO V_fORMASDEPAGO =  EE.FORMASDE PAGO
                          };

                var query = (from a in qry
                             select new
                             {
                                 v_MethodPayment = a.v_Concepto
                             }
                ).ToList();

                return string.Join(", ", query.Select(p => p.v_MethodPayment));
            }
            //List<voucherDto> objData = qry.ToList();
            //return objData;

        }


        public List<ReporteDocumentoTicket> ReporteDocumentoTicket(string pstrv_IdVenta)
        {
            try
            {
                using (var dbContext = new SAMBHSEntitiesModelWin())
                {
                    #region Query
                    var query =
                            (from A in dbContext.venta
                             join B in dbContext.cliente on new { IdCliente = A.v_IdCliente, eliminado = 0 } equals new { IdCliente = B.v_IdCliente, eliminado = B.i_Eliminado.Value } into B_join
                             from B in B_join.DefaultIfEmpty()

                             join C in dbContext.documento on new { TipoDoc = A.i_IdTipoDocumento.Value, eliminado = 0 } equals new { TipoDoc = C.i_CodigoDocumento, eliminado = C.i_Eliminado.Value } into C_join
                             from C in C_join.DefaultIfEmpty()

                             join D in dbContext.vendedor on new { IdVendedor = A.v_IdVendedor, eliminado = 0 } equals new { IdVendedor = D.v_IdVendedor, eliminado = D.i_Eliminado.Value } into D_join
                             from D in D_join.DefaultIfEmpty()

                             join E in dbContext.datahierarchy on new { CondicioPago = A.i_IdCondicionPago.Value, eliminado = 0, Grupo = 41 } equals new { CondicioPago = E.i_ItemId, eliminado = E.i_IsDeleted.Value, Grupo = E.i_GroupId } into E_join
                             from E in E_join.DefaultIfEmpty()


                             join F in dbContext.ventadetalle on new { IdVenta = A.v_IdVenta, eliminado = 0 } equals new { IdVenta = F.v_IdVenta, eliminado = F.i_Eliminado.Value } into F_join
                             from F in F_join.DefaultIfEmpty()
                             join G in dbContext.productodetalle on new { IdProductoDetalle = F.v_IdProductoDetalle, eliminado = 0 } equals new { IdProductoDetalle = G.v_IdProductoDetalle, eliminado = G.i_Eliminado.Value } into G_join

                             from G in G_join.DefaultIfEmpty()
                             join H in dbContext.producto on new { IdProd = G.v_IdProducto, eliminado = 0 } equals new { IdProd = H.v_IdProducto, eliminado = H.i_Eliminado.Value } into H_join
                             from H in H_join.DefaultIfEmpty()


                             join I in dbContext.datahierarchy on new { Unidad = F.i_IdUnidadMedida.Value, eliminado = 0, Grupo = 17 } equals new { Unidad = I.i_ItemId, eliminado = I.i_IsDeleted.Value, Grupo = I.i_GroupId } into I_join
                             from I in I_join.DefaultIfEmpty()


                             join J in dbContext.datahierarchy on new { Moneda = A.i_IdMoneda.Value, eliminado = 0, Grupo = 18 } equals new { Moneda = J.i_ItemId, eliminado = J.i_IsDeleted.Value, Grupo = J.i_GroupId } into J_join
                             from J in J_join.DefaultIfEmpty()


                             join K in dbContext.datahierarchy on new { Igv = A.i_IdIgv.Value, eliminado = 0, Grupo = 27 } equals new { Igv = K.i_ItemId, eliminado = K.i_IsDeleted.Value, Grupo = K.i_GroupId } into K_join
                             from K in K_join.DefaultIfEmpty()

                             join L in dbContext.datahierarchy on new { Igv = A.i_IdIgv.Value, eliminado = 0, Grupo = 27 }
                                                                equals new { Igv = L.i_ItemId, eliminado = L.i_IsDeleted.Value, Grupo = L.i_GroupId } into L_join

                             from L in L_join.DefaultIfEmpty()
                             where A.v_IdVenta == pstrv_IdVenta
                              && A.i_Eliminado == 0
                             select new ReporteDocumentoTicket
                             {

                                 FechaRegistro = A.t_FechaRegistro.Value,
                                 NroDocCliente = B == null ? "" : B.v_IdCliente == "N002-CL000000000" ? string.Empty : B.v_NroDocIdentificacion,
                                 NombreCliente = B == null ? "" : A.v_NombreClienteTemporal == "" || A.v_NombreClienteTemporal == null ? (B.v_ApePaterno + " " + B.v_ApeMaterno + " " + B.v_PrimerNombre + " " + B.v_SegundoNombre + " " + B.v_RazonSocial).Trim() : (B.v_ApePaterno + " " + B.v_ApeMaterno + " " + B.v_PrimerNombre + " " + B.v_SegundoNombre + " " + A.v_NombreClienteTemporal).Trim(),
                                 Vendedor = D == null ? "" : D.v_NombreCompleto,
                                 Direccion = B == null ? "" : B.v_IdCliente == "N002-CL000000000" ? A.v_DireccionClienteTemporal : B.v_DirecPrincipal,
                                 CondicionPago = E == null ? "" : E.v_Value1,
                                 Documento = (A.v_SerieDocumento.Trim() + "-" + A.v_CorrelativoDocumento.Trim()),
                                 TipoDocumento = C == null ? "" : C.v_Siglas,
                                 TipoDoc = A.i_IdTipoDocumento ?? 12,
                                 ValorVenta = A.d_ValorVenta.Value,
                                 Igv = A.d_IGV.Value,
                                 Total = A.d_Total.Value,
                                 Descuento = A.d_Descuento.Value,
                                 CodigoArticulo = H == null ? "" : H.v_CodInterno,
                                 Cantidad = F == null ? 0 : F.d_Cantidad.Value,
                                 Descripcion = F == null ? "" : F.v_DescripcionProducto,
                                 Precio = F == null ? 0 : F.d_Precio.Value,
                                 d_Valor = F == null ? 0 : F.d_Valor == null ? 0 : F.d_Valor.Value,
                                 d_ValorVenta = F == null ? 0 : F.d_ValorVenta == null ? 0 : F.d_ValorVenta.Value,
                                 d_Descuento = F == null ? 0 : F.d_Descuento == null ? 0 : F.d_Descuento.Value,
                                 Unidad = I == null ? "" : I.v_Value1,
                                 d_Igvdetalle = F == null ? 0 : F.d_Igv.Value,
                                 PrecioVenta = F == null ? 0 : F.d_PrecioVenta.Value,
                                 d_PrecioImpresion = F == null ? 0 : F.d_PrecioImpresion.Value == null ? 0 : F.d_PrecioImpresion.Value,
                                 valorigv = 0,
                                 valorigvAux = K == null ? "" : K.v_Value1,
                                 TipoCambio = A.d_TipoCambio.Value,
                                 Moneda = A.i_IdMoneda == 1 ? "S/." : "US$.",
                                 d_Igv = L == null ? "" : L.v_Value1,
                                 v_IdVenta = A.v_IdVenta,
                                 //Pedido = A.v_NroPedido == null ? "" : A.v_NroPedido,
                                 //GuiaRemision = A.v_NroGuiaRemisionSerie == null || A.v_NroGuiaRemisionCorrelativo == null ? "" : A.v_NroGuiaRemisionSerie + A.v_NroGuiaRemisionCorrelativo,

                             }).ToList();


                    var fPago = ListMethod(pstrv_IdVenta);
                    var query1 = (from A in query.ToList()

                                  select new ReporteDocumentoTicket
                                  {
                                      FechaRegistro = A.FechaRegistro,
                                      NroDocCliente = A.NroDocCliente,
                                      NombreCliente = A.NombreCliente,
                                      Vendedor = A.Vendedor,
                                      Direccion = A.Direccion,
                                      CondicionPago = A.CondicionPago,
                                      Documento = A.Documento,
                                      TipoDocumento = A.TipoDocumento,
                                      TipoDoc = A.TipoDoc,
                                      ValorVenta = A.ValorVenta,
                                      Igv = A.Igv,
                                      Total = A.Total,
                                      Descuento = A.Descuento,
                                      CodigoArticulo = A.CodigoArticulo,
                                      Cantidad = A.Cantidad,
                                      Descripcion = A.Descripcion,
                                      Precio = A.Precio,
                                      d_Valor = A.d_Valor,
                                      d_ValorVenta = A.d_ValorVenta,
                                      d_Descuento = A.d_Descuento,
                                      Unidad = A.Unidad,
                                      d_Igvdetalle = A.d_Igvdetalle,
                                      PrecioVenta = A.PrecioVenta,
                                      d_PrecioImpresion = A.d_PrecioImpresion,
                                      valorigv = decimal.Parse(A.valorigvAux),
                                      //valorigvAux = A.valorigvAux,
                                      TipoCambio = A.TipoCambio,
                                      Moneda = A.Moneda,
                                      d_Igv = decimal.Parse(A.d_Igv).ToString(),
                                      FormaPago = fPago
                                      //Pedido = A.Pedido,
                                      //GuiaRemision = A.GuiaRemision,
                                  }).ToList();
                    #endregion

                    return query1;
                }
            }
            catch (Exception ex)
            {
                //pobjOperationResult.Success = 0;
                //pobjOperationResult.ExceptionMessage = ex.Message;
                return null;
            }
        }

        public List<ReporteDocumentoFactura> ReporteDocumentoVenta(ref OperationResult objOperationResult, string pstrv_IdVenta, int Idioma = 2, bool ImprimirObservacionDetalle = true)
        {
            try
            {

                using (var dbContext = new SAMBHSEntitiesModelWin())
                {
                    SystemParameterBL _objSystemParameterBL = new SystemParameterBL();
                    objOperationResult.Success = 1;
                    string pstrUbigeo = string.Empty;
                    string NroKardex = string.Empty;
                    string FormaPagoCobranza = string.Empty;
                    string NombreProducto = "";
                    Stopwatch _timer = new Stopwatch();
                    _timer.Start();
                    var Ubigeo = new SystemParameterBL().GetSystemParameterForCombo(ref objOperationResult, 112, "");
                    try
                    {
                        var Kardex = (from a in dbContext.nbs_ventakardex

                                      join b in dbContext.datahierarchy on new { Grupo = 153, eliminado = 0, tipokardex = a.v_TipoKardex } equals new { Grupo = b.i_GroupId, eliminado = b.i_IsDeleted.Value, tipokardex = b.v_Value2 } into b_join
                                      from b in b_join.DefaultIfEmpty()
                                      where a.i_Eliminado == 0 && a.v_IdVenta == pstrv_IdVenta
                                      select new
                                      {
                                          NroKardex = a != null ? a.v_TipoKardex == "V" ? "VARIOS" : b.v_Value1 + "  " + a.v_NroKardex : "",
                                      }).FirstOrDefault();
                        if (Kardex != null && !string.IsNullOrEmpty(Kardex.NroKardex))
                            NroKardex = Kardex.NroKardex;

                        var FormaPago = (from a in dbContext.cobranzadetalle
                                         join b in dbContext.cobranza on new { cob = a.v_IdCobranza, eliminado = 0 } equals new { cob = b.v_IdCobranza, eliminado = b.i_Eliminado.Value } into b_join
                                         from b in b_join.DefaultIfEmpty()
                                         join c in dbContext.datahierarchy on new { Grupo = 46, eliminado = 0, fp = a.i_IdFormaPago.Value } equals new { Grupo = c.i_GroupId, eliminado = c.i_IsDeleted.Value, fp = c.i_ItemId } into c_join
                                         from c in c_join.DefaultIfEmpty()
                                         where a.i_Eliminado == 0 && a.v_IdVenta == pstrv_IdVenta
                                         select new
                                         {
                                             Fp = c != null ? c.v_Value1 : "",
                                         }).FirstOrDefault();
                        if (FormaPago != null && !string.IsNullOrEmpty(FormaPago.Fp))
                            FormaPagoCobranza = FormaPago.Fp;

                    }
                    catch
                    {
                    }


                    #region Query
                    var query =
                            (from A in dbContext.venta
                             join B in dbContext.cliente on new { IdCliente = A.v_IdCliente, eliminado = 0 } equals new { IdCliente = B.v_IdCliente, eliminado = B.i_Eliminado.Value } into B_join
                             from B in B_join.DefaultIfEmpty()

                             join C in dbContext.documento on new { TipoDoc = A.i_IdTipoDocumento.Value, eliminado = 0 } equals new { TipoDoc = C.i_CodigoDocumento, eliminado = C.i_Eliminado.Value } into C_join
                             from C in C_join.DefaultIfEmpty()

                             join D in dbContext.vendedor on new { IdVendedor = A.v_IdVendedor, eliminado = 0 } equals new { IdVendedor = D.v_IdVendedor, eliminado = D.i_Eliminado.Value } into D_join
                             from D in D_join.DefaultIfEmpty()

                             join E in dbContext.datahierarchy on new { CondicioPago = A.i_IdCondicionPago.Value, eliminado = 0, Grupo = 23 } equals new { CondicioPago = E.i_ItemId, eliminado = E.i_IsDeleted.Value, Grupo = E.i_GroupId } into E_join
                             from E in E_join.DefaultIfEmpty()


                             join F in dbContext.ventadetalle on new { IdVenta = A.v_IdVenta, eliminado = 0 } equals new { IdVenta = F.v_IdVenta, eliminado = F.i_Eliminado.Value } into F_join
                             from F in F_join.DefaultIfEmpty()
                             join G in dbContext.productodetalle on new { IdProductoDetalle = F.v_IdProductoDetalle, eliminado = 0 } equals new { IdProductoDetalle = G.v_IdProductoDetalle, eliminado = G.i_Eliminado.Value } into G_join

                             from G in G_join.DefaultIfEmpty()
                             join H in dbContext.producto on new { IdProd = G.v_IdProducto, eliminado = 0 } equals new { IdProd = H.v_IdProducto, eliminado = H.i_Eliminado.Value } into H_join
                             from H in H_join.DefaultIfEmpty()


                             join I in dbContext.datahierarchy on new { Unidad = F.i_IdUnidadMedida.Value, eliminado = 0, Grupo = 17 } equals new { Unidad = I.i_ItemId, eliminado = I.i_IsDeleted.Value, Grupo = I.i_GroupId } into I_join
                             from I in I_join.DefaultIfEmpty()


                             join J in dbContext.datahierarchy on new { Moneda = A.i_IdMoneda.Value, eliminado = 0, Grupo = 18 } equals new { Moneda = J.i_ItemId, eliminado = J.i_IsDeleted.Value, Grupo = J.i_GroupId } into J_join
                             from J in J_join.DefaultIfEmpty()


                             join K in dbContext.datahierarchy on new { Igv = A.i_IdIgv.Value, eliminado = 0, Grupo = 27 } equals new { Igv = K.i_ItemId, eliminado = K.i_IsDeleted.Value, Grupo = K.i_GroupId } into K_join
                             from K in K_join.DefaultIfEmpty()

                             join L in dbContext.datahierarchy on new { Igv = A.i_IdIgv.Value, eliminado = 0, Grupo = 27 }
                                                                equals new { Igv = L.i_ItemId, eliminado = L.i_IsDeleted.Value, Grupo = L.i_GroupId } into L_join

                             from L in L_join.DefaultIfEmpty()

                             join M in dbContext.datahierarchy on new { PuertoEmbarque = A.i_IdPuntoEmbarque.Value, eliminado = 0, Grupo = 36 } equals new { PuertoEmbarque = M.i_ItemId, eliminado = M.i_IsDeleted.Value, Grupo = M.i_GroupId } into M_join
                             from M in M_join.DefaultIfEmpty()

                             join N in dbContext.datahierarchy on new { PuertoDestino = A.i_IdPuntoDestino.Value, eliminado = 0, Grupo = 38 } equals new { PuertoDestino = N.i_ItemId, eliminado = N.i_IsDeleted.Value, Grupo = N.i_GroupId } into N_join
                             from N in N_join.DefaultIfEmpty()

                             join O in dbContext.datahierarchy on new { TipoEmbarque = A.i_IdTipoEmbarque.Value, eliminado = 0, Grupo = 37 } equals new { TipoEmbarque = O.i_ItemId, eliminado = O.i_IsDeleted.Value, Grupo = O.i_GroupId } into O_join
                             from O in O_join.DefaultIfEmpty()

                             join P in dbContext.datahierarchy on new { cfr = A.i_IdMedioPagoVenta.Value, eliminado = 0, Grupo = 39 } equals new { cfr = P.i_ItemId, eliminado = P.i_IsDeleted.Value, Grupo = P.i_GroupId } into p_join
                             from P in p_join.DefaultIfEmpty()


                             join Q in dbContext.ventadetalleanexo on new { vda = F.i_IdVentaDetalleAnexo ?? -1, eliminado = 0 } equals new { vda = Q.i_IdVentaDetalleAnexo, eliminado = Q.i_Eliminado.Value } into Q_join

                             from Q in Q_join.DefaultIfEmpty()

                             join R in dbContext.datahierarchy on new { tipobulto = A.i_IdTipoBulto ?? -1, eliminado = 0, Grupo = 160 } equals new { tipobulto = R.i_ItemId, eliminado = R.i_IsDeleted.Value, Grupo = R.i_GroupId } into R_join
                             from R in R_join.DefaultIfEmpty()

                             where A.v_IdVenta == pstrv_IdVenta
                             && F_join.Any(o => o.v_IdVenta == A.v_IdVenta)


                              && A.i_Eliminado == 0
                             select new ReporteDocumentoFactura
                             {
                                 FechaRegistro = A.t_FechaRegistro.Value,
                                 NroDocCliente = B == null ? "" : B.v_IdCliente == "N002-CL000000000" ? string.Empty : B.v_NroDocIdentificacion,
                                 NombreCliente = B == null ? "" : A.v_NombreClienteTemporal == "" || A.v_NombreClienteTemporal == null ? (B.v_ApePaterno + " " + B.v_ApeMaterno + " " + B.v_PrimerNombre + " " + B.v_SegundoNombre + " " + B.v_RazonSocial).Trim() : (B.v_ApePaterno + " " + B.v_ApeMaterno + " " + B.v_PrimerNombre + " " + B.v_SegundoNombre + " " + A.v_NombreClienteTemporal).Trim(),
                                 Vendedor = D == null ? "" : D.v_NombreCompleto,
                                 Direccion = B == null ? "" : B.v_IdCliente == "N002-CL000000000" ? A.v_DireccionClienteTemporal : string.IsNullOrEmpty(A.v_DireccionClienteTemporal) ? B.v_DirecPrincipal : A.v_DireccionClienteTemporal,
                                 CondicionPago = E == null ? "" : E.v_Value1,
                                 Documento = (A.v_SerieDocumento.Trim() + "-" + A.v_CorrelativoDocumento.Trim()),
                                 TipoDocumento = C == null ? "" : C.v_Siglas,
                                 ValorVenta = A.d_ValorVenta.Value,
                                 Igv = A.d_IGV.Value,
                                 Total = A.d_Total.Value,
                                 Descuento = A.d_Descuento.Value,
                                 CodigoArticulo = H == null ? "" : H.v_CodInterno,
                                 Cantidad = F == null ? 0 : F.d_Cantidad.Value,
                                 Descripcion = H == null ? F.v_DescripcionProducto == null || F.v_DescripcionProducto == "" ? "" : F.v_DescripcionProducto : F.v_DescripcionProducto == null ? H.v_Descripcion : F.v_DescripcionProducto,
                                 Precio = F == null ? 0 : F.d_Precio.Value,
                                 d_Valor = F == null ? 0 : F.d_Valor == null ? 0 : F.d_Valor.Value,
                                 d_ValorVenta = F == null ? 0 : F.d_ValorVenta == null ? 0 : F.d_ValorVenta.Value,
                                 d_Descuento = F == null ? 0 : F.d_Descuento == null ? 0 : F.d_Descuento.Value,
                                 Unidad = I == null ? "" : I.v_Value1,
                                 d_Igvdetalle = F == null ? 0 : F.d_Igv.Value,
                                 PrecioVenta = F == null ? 0 : F.d_PrecioVenta.Value,
                                 NombreEmpresaPropietaria = A.i_IdMoneda == 1 ? "S/" : "USD",
                                 d_PrecioImpresion = F == null ? 0 : F.d_PrecioImpresion.Value == null ? 0 : F.d_PrecioImpresion.Value,
                                 valorigv = 0,
                                 valorigvAux = K == null ? "" : K.v_Value1,
                                 TipoCambio = A.d_TipoCambio.Value,
                                 Moneda = A.i_IdMoneda == 1 ? "S/" : "USD",
                                 d_Igv = L == null ? "" : L.v_Value1,
                                 Observacion = F.v_Observaciones == null ? "" : F.v_Observaciones,
                                 Descuentos = F.v_FacturaRef,
                                 Valor = A.d_Valor ?? 0,
                                 i_PreciosIncluyenIgv = A.i_PreciosIncluyenIgv ?? 0,
                                 ObservacionDetalle = F != null ? ImprimirObservacionDetalle ? F.v_Observaciones : "" : "",
                                 PrecioDscto = F == null ? 0 : F.d_Cantidad == 0 ? 0 : F.d_PrecioVenta.Value / F.d_Cantidad.Value,
                                 Pedido = A.v_NroPedido == null ? "" : A.v_NroPedido,
                                 GuiaRemision = A.v_NroGuiaRemisionSerie == null || A.v_NroGuiaRemisionCorrelativo == null ? "" : A.v_NroGuiaRemisionSerie + "-" + A.v_NroGuiaRemisionCorrelativo,
                                 NroPlaca = A.v_PlacaVehiculo,
                                 SerieDocumento = A.v_SerieDocumento,
                                 DFechaOC = A.t_FechaOrdenCompra.Value,
                                 DFechaVencimiento = A.t_FechaVencimiento.Value,
                                 NroOrdenCompra = A.v_OrdenCompra == null ? "" : A.v_OrdenCompra,
                                 IdDistrito = B.i_IdDistrito == null ? -1 : B.i_IdDistrito.Value,
                                 IdDepartamento = B.i_IdDepartamento == null ? -1 : B.i_IdDepartamento.Value,
                                 IdProvincia = B.i_IdProvincia == null ? -1 : B.i_IdProvincia.Value,
                                 TelefonoCliente = B.v_TelefonoFijo + "-" + B.v_TelefonoMovil,
                                 IdVentaDetalle = F.v_IdVentaDetalle,
                                 UnidadSiglas = I == null ? "" : I.v_Field ?? "",

                                 Kardex = A.v_IdTipoKardex,

                                 AmbasDescripcionesProducto = H == null ? "" : string.IsNullOrEmpty(H.v_Descripcion2) ? "" : H.v_Descripcion2,
                                 NroPartidaArancelaria = H.v_NroPartidaArancelaria,
                                 PuntoEmbarque = M == null ? "" : M.v_Value1,
                                 PuntoDestinoEmbarque = N == null ? "" : N.v_Value1,
                                 TipoEmbarque = O == null ? "" : O.v_Value1,
                                 MarcaEmbarque = A.v_Marca,
                                 PesoBruto = A.d_PesoBrutoKG ?? 0,
                                 PesoNeto = A.d_PesoNetoKG ?? 0,
                                 iTipoCfr = A.i_IdMedioPagoVenta ?? -1,
                                 TipoCfr = A.i_IdMedioPagoVenta == -1 || A.i_IdMedioPagoVenta == null ? "" : P.v_Value1,
                                 EsServicio = H.i_EsServicio ?? 0,
                                 NroBultos = Idioma == 1 ? A.v_NroBultoIngles : A.v_NroBulto,
                                 Alias = B.v_Alias,
                                 TipoBulto = R.v_Value1,
                                 FormaParteOtrosTributos = H.i_IndicaFormaParteOtrosTributos ?? 0,

                                 //DocumentoElectronico = C == null ? "" : C.v_Nombre + " ELECTRÓNICA",
                                 IdCliente = A.v_IdCliente,
                                 i_IdTipoDocumento = A.i_IdTipoDocumento ?? -1,
                                 CorrelativoDocumento = A.v_CorrelativoDocumento,
                                 i_IdTipoIdentificacionCliente = B.i_IdTipoIdentificacion ?? -1,
                                 DireccionSecundaria = B.v_DirecSecundaria,
                                 Anexo = Q != null ? Q.v_Anexo : "",
                             }).ToList().Select(A =>
                             {

                                 try
                                 {
                                     var distrito = A.IdDistrito == -1 || A.IdDistrito == null ? "" : Ubigeo.Where(l => l.Id == A.IdDistrito.ToString()) != null ? Ubigeo.Where(l => l.Id == A.IdDistrito.ToString()).FirstOrDefault().Value1 : "";
                                     var departamento = A.IdDepartamento == -1 || A.IdDepartamento == null ? "" : Ubigeo.Where(l => l.Id == A.IdDepartamento.ToString()) != null ? Ubigeo.Where(l => l.Id == A.IdDepartamento.ToString()).FirstOrDefault().Value1 : "";
                                     pstrUbigeo = departamento + " " + distrito;
                                     NombreProducto = "";
                                     if (Globals.ClientSession.v_RucEmpresa == Constants.RucAgrofergic || Globals.ClientSession.v_RucEmpresa == Constants.RucDemo || Globals.ClientSession.v_RucEmpresa == Constants.RucAgrofergic2)
                                     {
                                         //if (A.Descripcion.Contains("-") && A.FormaParteOtrosTributos == 0)
                                         //{
                                         //    var Todo = A.Descripcion.Split('-');
                                         //    NombreProducto = Todo[0];
                                         //}

                                         if (A.Descripcion.Contains("-") && A.FormaParteOtrosTributos == 0)
                                         {
                                             var Todo = A.Descripcion.Split('-');
                                             if (Todo.Count() == 2)
                                             {
                                                 var SinExp = Todo[1].Split('(');
                                                 if (SinExp.Count() == 2)
                                                 {
                                                     NombreProducto = Todo[0] + "(" + SinExp[1];
                                                 }
                                                 else if (SinExp.Count() == 1)
                                                 {
                                                     NombreProducto = Todo[0];
                                                 }

                                             }
                                             else
                                             {
                                                 NombreProducto = A.Descripcion;
                                             }

                                         }
                                         else
                                         {
                                             NombreProducto = A.Descripcion;
                                         }
                                     }
                                     else
                                     {
                                         NombreProducto = A.Descripcion;
                                     }

                                 }
                                 catch (Exception ex)
                                 {
                                     pstrUbigeo = "";
                                 }

                                 return new ReporteDocumentoFactura
                                 {


                                     FechaRegistro = A.FechaRegistro,
                                     NroDocCliente = A.NroDocCliente,
                                     NombreCliente = A.NombreCliente,
                                     Vendedor = A.Vendedor,
                                     Direccion = A.Direccion,
                                     CondicionPago = A.CondicionPago,
                                     Documento = A.Documento,
                                     TipoDocumento = A.TipoDocumento,
                                     ValorVenta = A.ValorVenta,
                                     Igv = A.Igv,
                                     Total = A.Total,
                                     Descuento = A.Descuento,
                                     CodigoArticulo = A.CodigoArticulo,
                                     Cantidad = A.Cantidad,
                                     //Descripcion = A.Descripcion,
                                     Descripcion = NombreProducto,
                                     Precio = A.Precio,
                                     d_Valor = A.d_Valor,
                                     d_ValorVenta = A.d_ValorVenta,
                                     d_Descuento = A.d_Descuento,
                                     Unidad = A.Unidad,
                                     d_Igvdetalle = A.d_Igvdetalle,
                                     PrecioVenta = A.PrecioVenta,
                                     NombreEmpresaPropietaria = A.NombreEmpresaPropietaria.Trim(),
                                     d_PrecioImpresion = A.d_PrecioImpresion,
                                     valorigv = decimal.Parse(A.valorigvAux),
                                     TipoCambio = A.TipoCambio,
                                     Moneda = A.Moneda,
                                     d_Igv = decimal.Parse(A.d_Igv).ToString().Substring(0, 2) + "%",
                                     Pedido = A.Pedido,
                                     GuiaRemision = A.GuiaRemision,
                                     NroPlaca = A.NroPlaca,
                                     Dia = A.FechaRegistro.Date.Day.ToString("00"),
                                     Mess = A.FechaRegistro.Date.Month.ToString("00"),
                                     Anio = A.FechaRegistro.Date.Year.ToString(),
                                     SerieDocumento = A.SerieDocumento.Trim(),
                                     Observacion = A.Observacion,
                                     FechaLetras = A.FechaRegistro.Day.ToString("00") + " DE " + new CultureInfo("es-ES", false).DateTimeFormat.GetMonthName(int.Parse(A.FechaRegistro.Month.ToString())).ToUpper() + " DEL " + A.FechaRegistro.Year.ToString(),
                                     CantidadLetras = SAMBHS.Common.Resource.Utils.ConvertirenLetras(A.Cantidad.ToString()) + "(" + A.Cantidad + ")",
                                     SFechaOC = A.DFechaOC.Date.Day.ToString("00") + "/" + A.DFechaOC.Date.Month.ToString("00") + "/" + A.DFechaOC.Date.Year.ToString(),
                                     SFechaVencimiento = A.DFechaVencimiento.Date.Day.ToString("00") + "/" + A.DFechaVencimiento.Date.Month.ToString("00") + "/" + A.DFechaVencimiento.Date.Year.ToString(),
                                     NroOrdenCompra = A.NroOrdenCompra,
                                     Ubigeo = pstrUbigeo,// SE AGREGO
                                     IdDepartamento = A.IdDepartamento,
                                     IdProvincia = A.IdProvincia,
                                     IdDistrito = A.IdDistrito,
                                     MesLetras = new CultureInfo("es-ES", false).DateTimeFormat.GetMonthName(int.Parse(A.FechaRegistro.Month.ToString())).ToUpper(),
                                     TelefonoCliente = A.TelefonoCliente,
                                     Descuentos = A.Descuentos,
                                     Valor = A.Valor,
                                     UnidadSiglas = A.UnidadSiglas,
                                     i_PreciosIncluyenIgv = A.i_PreciosIncluyenIgv,
                                     ObservacionDetalle = A.ObservacionDetalle,
                                     // Kardex = A.Kardex,
                                     Kardex = A.Kardex == "V" ? "VARIOS" : NroKardex,
                                     PrecioDscto = Utils.Windows.DevuelveValorRedondeado(A.PrecioDscto, 6),
                                     AmbasDescripcionesProducto = A.AmbasDescripcionesProducto,
                                     NroPartidaArancelaria = A.NroPartidaArancelaria,
                                     PuntoEmbarque = A.PuntoEmbarque,
                                     PuntoDestinoEmbarque = A.PuntoDestinoEmbarque,
                                     TipoEmbarque = A.TipoEmbarque,
                                     MarcaEmbarque = A.MarcaEmbarque,
                                     PesoBruto = A.PesoBruto,
                                     PesoNeto = A.PesoNeto,
                                     TipoCfr = A.TipoCfr == "" ? "" : A.iTipoCfr == 1 ? "TOTAL " + A.TipoCfr + " " + A.PuntoEmbarque + " : " : "TOTAL  " + A.TipoCfr + " " + A.PuntoDestinoEmbarque + " : ",
                                     EsServicio = A.EsServicio,
                                     NroBultos = A.NroBultos,
                                     Alias = A.Alias,
                                     TipoBulto = A.TipoBulto,
                                     FormaParteOtrosTributos = A.FormaParteOtrosTributos,
                                     iTipoCfr = A.iTipoCfr,
                                     FormaPagoCobranza = FormaPagoCobranza,
                                     IdVentaDetalle = A.IdVentaDetalle,
                                     DocumentoElectronico = A.DocumentoElectronico,
                                     IdCliente = A.IdCliente,
                                     i_IdTipoDocumento = A.i_IdTipoDocumento,
                                     CorrelativoDocumento = A.CorrelativoDocumento,
                                     i_IdTipoIdentificacionCliente = A.i_IdTipoIdentificacionCliente,
                                     DireccionSecundaria = A.DireccionSecundaria,
                                     Anexo = A.Anexo,
                                 };
                             }).ToList();
                    #endregion
                    _timer.Stop();
                    var gg = _timer.Elapsed;

                    return query.OrderBy(o => o.IdVentaDetalle).ToList();
                }
            }
            catch (Exception ex)
            {
                objOperationResult.Success = 0;
                objOperationResult.AdditionalInformation = "VentaBL.ReporteDocumentoVenta()\nLinea:" +
                                                            ex.StackTrace.Substring(ex.StackTrace.LastIndexOf(' '));
                objOperationResult.ErrorMessage = ex.Message;
                objOperationResult.ExceptionMessage = ex.InnerException != null
                    ? ex.InnerException.Message
                    : string.Empty;
                Utils.ExceptionToLog(Globals.ClientSession.i_SystemUserId, objOperationResult);
                return null;
            }
        }

        public List<ReporteDocumentoFactura> ReporteDocumentoVenta_(ref OperationResult objOperationResult, string pstrv_IdVenta, int Idioma = 2, bool ImprimirObservacionDetalle = true)
        {
            try
            {

                using (var dbContext = new SAMBHSEntitiesModelWin())
                {
                    SystemParameterBL _objSystemParameterBL = new SystemParameterBL();
                    objOperationResult.Success = 1;
                    string pstrUbigeo = string.Empty;
                    string NroKardex = string.Empty;
                    string FormaPagoCobranza = string.Empty;
                    string NombreProducto = "", unidadMedida = "", condicionpago = "", valorigvAux = "", unidadMedidaSiglas = "", PuntoEmbarque = "", PuntoDestinoEmbarque = "", TipoEmbarque = "", TipoBulto = "", TipoCfr = "";
                    //Stopwatch _timer = new Stopwatch();
                    //_timer.Start();
                    var Ubigeo = new SystemParameterBL().GetSystemParameterForCombo(ref objOperationResult, 112, "");
                    try
                    {
                        var Kardex = (from a in dbContext.nbs_ventakardex

                                      join b in dbContext.datahierarchy on new { Grupo = 153, eliminado = 0, tipokardex = a.v_TipoKardex } equals new { Grupo = b.i_GroupId, eliminado = b.i_IsDeleted.Value, tipokardex = b.v_Value2 } into b_join
                                      from b in b_join.DefaultIfEmpty()
                                      where a.i_Eliminado == 0 && a.v_IdVenta == pstrv_IdVenta
                                      select new
                                      {
                                          NroKardex = a != null ? a.v_TipoKardex == "V" ? "VARIOS" : b.v_Value1 + "  " + a.v_NroKardex : "",
                                      }).FirstOrDefault();
                        if (Kardex != null && !string.IsNullOrEmpty(Kardex.NroKardex))
                            NroKardex = Kardex.NroKardex;

                        var FormaPago = (from a in dbContext.cobranzadetalle
                                         join b in dbContext.cobranza on new { cob = a.v_IdCobranza, eliminado = 0 } equals new { cob = b.v_IdCobranza, eliminado = b.i_Eliminado.Value } into b_join
                                         from b in b_join.DefaultIfEmpty()
                                         join c in dbContext.datahierarchy on new { Grupo = 46, eliminado = 0, fp = a.i_IdFormaPago.Value } equals new { Grupo = c.i_GroupId, eliminado = c.i_IsDeleted.Value, fp = c.i_ItemId } into c_join
                                         from c in c_join.DefaultIfEmpty()
                                         where a.i_Eliminado == 0 && a.v_IdVenta == pstrv_IdVenta
                                         select new
                                         {
                                             Fp = c != null ? c.v_Value1 : "",
                                         }).FirstOrDefault();
                        if (FormaPago != null && !string.IsNullOrEmpty(FormaPago.Fp))
                            FormaPagoCobranza = FormaPago.Fp;

                    }
                    catch
                    {
                    }
                    //IDictionary<new{int grupo, int id}, IGrouping<datahierarchy>>
                    var datahierarchyStore = dbContext.datahierarchy.Where(p => p.i_IsDeleted == 0)
                        .GroupBy(g => new { grupo = g.i_GroupId, id = g.i_ItemId })
                        .ToDictionary(k => k.Key, o => o.FirstOrDefault());

                    #region Query
                    var query =
                           (from A in dbContext.ventadetalle

                            join B in dbContext.venta on new { vd = A.v_IdVenta, eliminado = 0 } equals new { vd = B.v_IdVenta, eliminado = B.i_Eliminado.Value } into B_join
                            from B in B_join.DefaultIfEmpty()

                            join B1 in dbContext.cliente on new { c = B.v_IdCliente, eliminado = 0 } equals new { c = B1.v_IdCliente, eliminado = B1.i_Eliminado.Value } into B1_join
                            from B1 in B1_join.DefaultIfEmpty()

                            join C in dbContext.documento on new { TipoDoc = B.i_IdTipoDocumento.Value, eliminado = 0 } equals new { TipoDoc = C.i_CodigoDocumento, eliminado = C.i_Eliminado.Value } into C_join
                            from C in C_join.DefaultIfEmpty()

                            join D in dbContext.vendedor on new { IdVendedor = B.v_IdVendedor, eliminado = 0 } equals new { IdVendedor = D.v_IdVendedor, eliminado = D.i_Eliminado.Value } into D_join
                            from D in D_join.DefaultIfEmpty()



                            join G in dbContext.productodetalle on new { IdProductoDetalle = A.v_IdProductoDetalle, eliminado = 0 } equals new { IdProductoDetalle = G.v_IdProductoDetalle, eliminado = G.i_Eliminado.Value } into G_join
                            from G in G_join.DefaultIfEmpty()

                            join H in dbContext.producto on new { IdProd = G.v_IdProducto, eliminado = 0 } equals new { IdProd = H.v_IdProducto, eliminado = H.i_Eliminado.Value } into H_join
                            from H in H_join.DefaultIfEmpty()

                            join Q in dbContext.ventadetalleanexo on new { vda = A.i_IdVentaDetalleAnexo ?? -1, eliminado = 0 } equals new { vda = Q.i_IdVentaDetalleAnexo, eliminado = Q.i_Eliminado.Value } into Q_join
                            from Q in Q_join.DefaultIfEmpty()


                            where A.v_IdVenta == pstrv_IdVenta && A.i_Eliminado == 0
                            select new
                            {
                                IdUnidadMedida = A.i_IdUnidadMedida ?? -1,
                                IdPuntoEmbarque = B.i_IdPuntoEmbarque ?? -1,
                                IdPuntoDestino = B.i_IdPuntoDestino ?? -1,
                                IdTipoEmbarque = B.i_IdTipoEmbarque ?? -1,
                                IdCondicionPago = B.i_IdCondicionPago ?? -1,
                                IdIgv = B.i_IdIgv ?? -1,
                                IdTipoBulto = B.i_IdTipoBulto ?? -1,
                                FechaRegistro = B.t_FechaRegistro.Value,
                                NroDocCliente = B1 == null ? "" : B1.v_IdCliente == "N002-CL000000000" ? string.Empty : B1.v_NroDocIdentificacion,
                                NombreCliente = B1 == null ? "" : string.IsNullOrEmpty(B.v_NombreClienteTemporal) ? (B1.v_ApePaterno + " " + B1.v_ApeMaterno + " " + B1.v_PrimerNombre + " " + B1.v_SegundoNombre + " " + B1.v_RazonSocial).Trim() : (B1.v_ApePaterno + " " + B1.v_ApeMaterno + " " + B1.v_PrimerNombre + " " + B1.v_SegundoNombre + " " + B.v_NombreClienteTemporal).Trim(),
                                Vendedor = D == null ? "" : D.v_NombreCompleto,
                                Direccion = B == null ? "" : B.v_IdCliente == "N002-CL000000000" ? B.v_DireccionClienteTemporal : string.IsNullOrEmpty(B.v_DireccionClienteTemporal) ? B1.v_DirecPrincipal : B.v_DireccionClienteTemporal,
                                Documento = (B.v_SerieDocumento.Trim() + "-" + B.v_CorrelativoDocumento.Trim()),
                                TipoDocumento = C == null ? "" : C.v_Siglas,
                                ValorVenta = B.d_ValorVenta.Value,
                                Igv = B.d_IGV.Value,
                                Total = B.d_Total.Value,
                                Descuento = B.d_Descuento.Value,
                                CodigoArticulo = H == null ? "" : H.v_CodInterno,
                                Cantidad = A == null ? 0 : A.d_Cantidad.Value,
                                Descripcion = H == null ? string.IsNullOrEmpty(A.v_DescripcionProducto) ? "" : A.v_DescripcionProducto : A.v_DescripcionProducto == null ? H.v_Descripcion : A.v_DescripcionProducto,
                                Precio = A == null ? 0 : A.d_Precio.Value,
                                d_Valor = A == null ? 0 : A.d_Valor == null ? 0 : A.d_Valor.Value,
                                d_ValorVenta = A == null ? 0 : A.d_ValorVenta == null ? 0 : A.d_ValorVenta.Value,
                                d_Descuento = A == null ? 0 : A.d_Descuento == null ? 0 : A.d_Descuento.Value,
                                d_Igvdetalle = A == null ? 0 : A.d_Igv.Value,
                                PrecioVenta = A == null ? 0 : A.d_PrecioVenta.Value,
                                NombreEmpresaPropietaria = B.i_IdMoneda == 1 ? "S/" : "USD",
                                d_PrecioImpresion = A == null ? 0 : A.d_PrecioImpresion.Value == null ? 0 : A.d_PrecioImpresion.Value,
                                valorigv = 0,
                                TipoCambio = B.d_TipoCambio.Value,
                                Moneda = B.i_IdMoneda == 1 ? "S/" : "USD",
                                Pedido = B.v_NroPedido == null ? "" : B.v_NroPedido,
                                GuiaRemision = B.v_NroGuiaRemisionSerie == null || B.v_NroGuiaRemisionCorrelativo == null ? "" : B.v_NroGuiaRemisionSerie + "-" + B.v_NroGuiaRemisionCorrelativo,
                                NroPlaca = B.v_PlacaVehiculo,
                                SerieDocumento = B.v_SerieDocumento,
                                Observacion = A.v_Observaciones == null ? "" : A.v_Observaciones,
                                DFechaOC = B.t_FechaOrdenCompra.Value,
                                DFechaVencimiento = B.t_FechaVencimiento.Value,
                                NroOrdenCompra = B.v_OrdenCompra == null ? "" : B.v_OrdenCompra,
                                IdDistrito = B1.i_IdDistrito == null ? -1 : B1.i_IdDistrito.Value,
                                IdDepartamento = B1.i_IdDepartamento == null ? -1 : B1.i_IdDepartamento.Value,
                                IdProvincia = B1.i_IdProvincia == null ? -1 : B1.i_IdProvincia.Value,
                                TelefonoCliente = B1.v_TelefonoFijo + "-" + B1.v_TelefonoMovil,
                                Descuentos = A.v_FacturaRef,
                                Valor = B.d_Valor ?? 0,
                                i_PreciosIncluyenIgv = B.i_PreciosIncluyenIgv ?? 0,
                                ObservacionDetalle = A != null ? ImprimirObservacionDetalle ? A.v_Observaciones : "" : "",
                                Kardex = B.v_IdTipoKardex,
                                PrecioDscto = A == null ? 0 : A.d_Cantidad == 0 ? 0 : A.d_PrecioVenta.Value / A.d_Cantidad.Value,
                                AmbasDescripcionesProducto = H == null ? "" : string.IsNullOrEmpty(H.v_Descripcion2) ? "" : H.v_Descripcion2,
                                NroPartidaArancelaria = H.v_NroPartidaArancelaria,
                                MarcaEmbarque = B.v_Marca,
                                PesoBruto = B.d_PesoBrutoKG ?? 0,
                                PesoNeto = B.d_PesoNetoKG ?? 0,
                                iTipoCfr = B.i_IdMedioPagoVenta ?? -1,
                                EsServicio = H.i_EsServicio ?? 0,
                                NroBultos = Idioma == 1 ? B.v_NroBultoIngles : B.v_NroBulto,
                                Alias = B1.v_Alias,
                                FormaParteOtrosTributos = H.i_IndicaFormaParteOtrosTributos ?? 0,
                                IdVentaDetalle = A.v_IdVentaDetalle,
                                DocumentoElectronico = C == null ? "" : C.v_Nombre + " ELECTRÓNICA",
                                IdCliente = B.v_IdCliente,
                                i_IdTipoDocumento = B.i_IdTipoDocumento ?? -1,
                                CorrelativoDocumento = B.v_CorrelativoDocumento,
                                i_IdTipoIdentificacionCliente = B1.i_IdTipoIdentificacion ?? -1,
                                DireccionSecundaria = B1.v_DirecSecundaria,
                                Anexo = Q != null ? Q.v_Anexo : "",
                            }).ToList().Select(A =>
                            {

                                try
                                {
                                    datahierarchy d;
                                    unidadMedida = datahierarchyStore.TryGetValue(new { grupo = 17, id = A.IdUnidadMedida }, out d) ? d.v_Value1 : string.Empty;
                                    unidadMedidaSiglas = datahierarchyStore.TryGetValue(new { grupo = 17, id = A.IdUnidadMedida }, out d) ? d.v_Field : string.Empty;
                                    condicionpago = datahierarchyStore.TryGetValue(new { grupo = 23, id = A.IdCondicionPago }, out d) ? d.v_Value1 : string.Empty;
                                    valorigvAux = datahierarchyStore.TryGetValue(new { grupo = 27, id = A.IdIgv }, out d) ? d.v_Value1 : string.Empty;
                                    PuntoEmbarque = datahierarchyStore.TryGetValue(new { grupo = 36, id = A.IdPuntoEmbarque }, out d) ? d.v_Value1 : string.Empty;
                                    PuntoDestinoEmbarque = datahierarchyStore.TryGetValue(new { grupo = 38, id = A.IdPuntoDestino }, out d) ? d.v_Value1 : string.Empty;
                                    TipoEmbarque = datahierarchyStore.TryGetValue(new { grupo = 37, id = A.IdTipoEmbarque }, out d) ? d.v_Value1 : string.Empty;
                                    TipoBulto = datahierarchyStore.TryGetValue(new { grupo = 160, id = A.IdTipoBulto }, out d) ? d.v_Value1 : string.Empty;
                                    TipoCfr = datahierarchyStore.TryGetValue(new { grupo = 39, id = A.iTipoCfr }, out d) ? d.v_Value1 : string.Empty;
                                    var distrito = A.IdDistrito == -1 || A.IdDistrito == null ? "" : Ubigeo.Where(l => l.Id == A.IdDistrito.ToString()) != null ? Ubigeo.Where(l => l.Id == A.IdDistrito.ToString()).FirstOrDefault().Value1 : "";
                                    var departamento = A.IdDepartamento == -1 || A.IdDepartamento == null ? "" : Ubigeo.Where(l => l.Id == A.IdDepartamento.ToString()) != null ? Ubigeo.Where(l => l.Id == A.IdDepartamento.ToString()).FirstOrDefault().Value1 : "";
                                    pstrUbigeo = departamento + " " + distrito;
                                    NombreProducto = "";
                                    if (Globals.ClientSession.v_RucEmpresa == Constants.RucAgrofergic || Globals.ClientSession.v_RucEmpresa == Constants.RucDemo || Globals.ClientSession.v_RucEmpresa == Constants.RucAgrofergic2)
                                    {
                                        //if (A.Descripcion.Contains("-") && A.FormaParteOtrosTributos == 0)
                                        //{
                                        //    var Todo = A.Descripcion.Split('-');
                                        //    NombreProducto = Todo[0];
                                        //}

                                        if (A.Descripcion.Contains("-") && A.FormaParteOtrosTributos == 0)
                                        {
                                            var Todo = A.Descripcion.Split('-');
                                            if (Todo.Count() == 2)
                                            {
                                                var SinExp = Todo[1].Split('(');
                                                if (SinExp.Count() == 2)
                                                {
                                                    NombreProducto = Todo[0] + "(" + SinExp[1];
                                                }
                                                else if (SinExp.Count() == 1)
                                                {
                                                    NombreProducto = Todo[0];
                                                }

                                            }
                                            else
                                            {
                                                NombreProducto = A.Descripcion;
                                            }

                                        }
                                        else
                                        {
                                            NombreProducto = A.Descripcion;
                                        }
                                    }
                                    else
                                    {
                                        NombreProducto = A.Descripcion;
                                    }

                                }
                                catch (Exception ex)
                                {
                                    pstrUbigeo = "";
                                }

                                return new ReporteDocumentoFactura
                                {


                                    FechaRegistro = A.FechaRegistro,
                                    NroDocCliente = A.NroDocCliente,
                                    NombreCliente = A.NombreCliente,
                                    Vendedor = A.Vendedor,
                                    Direccion = A.Direccion,
                                    CondicionPago = condicionpago,
                                    Documento = A.Documento,
                                    TipoDocumento = A.TipoDocumento,
                                    ValorVenta = A.ValorVenta,
                                    Igv = A.Igv,
                                    Total = A.Total,
                                    Descuento = A.Descuento,
                                    CodigoArticulo = A.CodigoArticulo,
                                    Cantidad = A.Cantidad,
                                    Descripcion = NombreProducto,
                                    Precio = A.Precio,
                                    d_Valor = A.d_Valor,
                                    d_ValorVenta = A.d_ValorVenta,
                                    d_Descuento = A.d_Descuento,
                                    Unidad = unidadMedida,
                                    d_Igvdetalle = A.d_Igvdetalle,
                                    PrecioVenta = A.PrecioVenta,
                                    NombreEmpresaPropietaria = A.NombreEmpresaPropietaria.Trim(),
                                    d_PrecioImpresion = A.d_PrecioImpresion,
                                    valorigv = decimal.Parse(valorigvAux),
                                    TipoCambio = A.TipoCambio,
                                    Moneda = A.Moneda,
                                    d_Igv = decimal.Parse(valorigvAux).ToString().Substring(0, 2) + "%",
                                    Pedido = A.Pedido,
                                    GuiaRemision = A.GuiaRemision,
                                    NroPlaca = A.NroPlaca,
                                    Dia = A.FechaRegistro.Date.Day.ToString("00"),
                                    Mess = A.FechaRegistro.Date.Month.ToString("00"),
                                    Anio = A.FechaRegistro.Date.Year.ToString(),
                                    SerieDocumento = A.SerieDocumento.Trim(),
                                    Observacion = A.Observacion,
                                    FechaLetras = A.FechaRegistro.Day.ToString("00") + " DE " + new CultureInfo("es-ES", false).DateTimeFormat.GetMonthName(int.Parse(A.FechaRegistro.Month.ToString())).ToUpper() + " DEL " + A.FechaRegistro.Year.ToString(),
                                    CantidadLetras = SAMBHS.Common.Resource.Utils.ConvertirenLetras(A.Cantidad.ToString()) + "(" + A.Cantidad + ")",
                                    SFechaOC = A.DFechaOC.Date.Day.ToString("00") + "/" + A.DFechaOC.Date.Month.ToString("00") + "/" + A.DFechaOC.Date.Year.ToString(),
                                    SFechaVencimiento = A.DFechaVencimiento.Date.Day.ToString("00") + "/" + A.DFechaVencimiento.Date.Month.ToString("00") + "/" + A.DFechaVencimiento.Date.Year.ToString(),
                                    NroOrdenCompra = A.NroOrdenCompra,
                                    Ubigeo = pstrUbigeo,// SE AGREGO
                                    IdDepartamento = A.IdDepartamento,
                                    IdProvincia = A.IdProvincia,
                                    IdDistrito = A.IdDistrito,
                                    MesLetras = new CultureInfo("es-ES", false).DateTimeFormat.GetMonthName(int.Parse(A.FechaRegistro.Month.ToString())).ToUpper(),
                                    TelefonoCliente = A.TelefonoCliente,
                                    Descuentos = A.Descuentos,
                                    Valor = A.Valor,
                                    UnidadSiglas = unidadMedidaSiglas,
                                    i_PreciosIncluyenIgv = A.i_PreciosIncluyenIgv,
                                    ObservacionDetalle = A.ObservacionDetalle,
                                    Kardex = A.Kardex == "V" ? "VARIOS" : NroKardex,
                                    PrecioDscto = Utils.Windows.DevuelveValorRedondeado(A.PrecioDscto, 6),
                                    AmbasDescripcionesProducto = A.AmbasDescripcionesProducto,
                                    NroPartidaArancelaria = A.NroPartidaArancelaria,
                                    PuntoEmbarque = PuntoEmbarque,
                                    PuntoDestinoEmbarque = PuntoDestinoEmbarque,
                                    TipoEmbarque = TipoEmbarque,
                                    MarcaEmbarque = A.MarcaEmbarque,
                                    PesoBruto = A.PesoBruto,
                                    PesoNeto = A.PesoNeto,
                                    TipoCfr = TipoCfr == "" ? "" : A.iTipoCfr == 1 ? "TOTAL " + TipoCfr + " " + PuntoEmbarque + " : " : "TOTAL  " + TipoCfr + " " + PuntoEmbarque + " : ",
                                    EsServicio = A.EsServicio,
                                    NroBultos = A.NroBultos,
                                    Alias = A.Alias,
                                    FormaParteOtrosTributos = A.FormaParteOtrosTributos,
                                    iTipoCfr = A.iTipoCfr,
                                    FormaPagoCobranza = FormaPagoCobranza,
                                    IdVentaDetalle = A.IdVentaDetalle,
                                    DocumentoElectronico = A.DocumentoElectronico,
                                    IdCliente = A.IdCliente,
                                    i_IdTipoDocumento = A.i_IdTipoDocumento,
                                    CorrelativoDocumento = A.CorrelativoDocumento,
                                    i_IdTipoIdentificacionCliente = A.i_IdTipoIdentificacionCliente,
                                    DireccionSecundaria = A.DireccionSecundaria,
                                    Anexo = A.Anexo,
                                    TipoBulto = TipoBulto,
                                };
                            }).ToList();


                    #endregion
                    //_timer.Stop();
                    //var gg = _timer.Elapsed;

                    return query.OrderBy(o => o.IdVentaDetalle).ToList();
                }
            }
            catch (Exception ex)
            {
                objOperationResult.Success = 0;
                objOperationResult.AdditionalInformation = "VentaBL.ReporteDocumentoVenta()\nLinea:" +
                                                            ex.StackTrace.Substring(ex.StackTrace.LastIndexOf(' '));
                objOperationResult.ErrorMessage = ex.Message;
                objOperationResult.ExceptionMessage = ex.InnerException != null
                    ? ex.InnerException.Message
                    : string.Empty;
                Utils.ExceptionToLog(Globals.ClientSession.i_SystemUserId, objOperationResult);
                return null;
            }
        }

        public List<ReporteDocumentoGuiaRemisionOtroFormato> ReporteGuiaRemisionOtroFormato(string IdVenta, bool ProcedeVenta)
        {


            using (SAMBHSEntitiesModelWin dbContext = new SAMBHSEntitiesModelWin())
            {
                List<ReporteDocumentoGuiaRemisionOtroFormato> ReporteFinal = new List<ReporteDocumentoGuiaRemisionOtroFormato>();

                List<ReporteDocumentoGuiaRemisionOtroFormato> ReporteInicial = new List<ReporteDocumentoGuiaRemisionOtroFormato>();

                if (ProcedeVenta)
                {

                    ReporteInicial =
                               (from A in dbContext.venta
                                join B in dbContext.cliente on new { IdCliente = A.v_IdCliente, eliminado = 0 } equals new { IdCliente = B.v_IdCliente, eliminado = B.i_Eliminado.Value } into B_join
                                from B in B_join.DefaultIfEmpty()

                                join C in dbContext.documento on new { TipoDoc = A.i_IdTipoDocumento.Value, eliminado = 0 } equals new { TipoDoc = C.i_CodigoDocumento, eliminado = C.i_Eliminado.Value } into C_join
                                from C in C_join.DefaultIfEmpty()



                                join E in dbContext.datahierarchy on new { CondicioPago = A.i_IdCondicionPago.Value, eliminado = 0, Grupo = 23 } equals new { CondicioPago = E.i_ItemId, eliminado = E.i_IsDeleted.Value, Grupo = E.i_GroupId } into E_join
                                from E in E_join.DefaultIfEmpty()


                                join F in dbContext.ventadetalle on new { IdVenta = A.v_IdVenta, eliminado = 0 } equals new { IdVenta = F.v_IdVenta, eliminado = F.i_Eliminado.Value } into F_join
                                from F in F_join.DefaultIfEmpty()

                                join G in dbContext.productodetalle on new { IdProductoDetalle = F.v_IdProductoDetalle, eliminado = 0 } equals new { IdProductoDetalle = G.v_IdProductoDetalle, eliminado = G.i_Eliminado.Value } into G_join

                                from G in G_join.DefaultIfEmpty()
                                join H in dbContext.producto on new { IdProd = G.v_IdProducto, eliminado = 0 } equals new { IdProd = H.v_IdProducto, eliminado = H.i_Eliminado.Value } into H_join
                                from H in H_join.DefaultIfEmpty()


                                join I in dbContext.datahierarchy on new { Unidad = F.i_IdUnidadMedida.Value, eliminado = 0, Grupo = 17 } equals new { Unidad = I.i_ItemId, eliminado = I.i_IsDeleted.Value, Grupo = I.i_GroupId } into I_join
                                from I in I_join.DefaultIfEmpty()


                                join J in dbContext.datahierarchy on new { Moneda = A.i_IdMoneda.Value, eliminado = 0, Grupo = 18 } equals new { Moneda = J.i_ItemId, eliminado = J.i_IsDeleted.Value, Grupo = J.i_GroupId } into J_join
                                from J in J_join.DefaultIfEmpty()

                                where A.v_IdVenta == IdVenta && A.i_Eliminado == 0
                                select new
                                {
                                    Fecha = A.t_FechaRegistro.Value,
                                    NroDocCliente = B == null ? "" : B.v_IdCliente == "N002-CL000000000" ? string.Empty : B.v_NroDocIdentificacion,
                                    NombreCliente = B == null ? "" : A.v_NombreClienteTemporal == "" ? (B.v_ApePaterno + " " + B.v_ApeMaterno + " " + B.v_PrimerNombre + " " + B.v_SegundoNombre + " " + B.v_RazonSocial).Trim() : (B.v_ApePaterno + " " + B.v_ApeMaterno + " " + B.v_PrimerNombre + " " + B.v_SegundoNombre + " " + A.v_NombreClienteTemporal).Trim(),
                                    Direccion = B == null ? "" : B.v_IdCliente == "N002-CL000000000" ? A.v_DireccionClienteTemporal : B.v_DirecPrincipal,
                                    CondicionPago = E == null ? "" : E.v_Value1,
                                    CodigoArticulo = H == null ? "" : H.v_CodInterno,
                                    Cantidad = F == null ? 0 : F.d_Cantidad.Value,
                                    UnidadSiglas = I == null ? "" : I.v_Field ?? "",
                                    Descripcion = H == null ? "" : F.v_DescripcionProducto == null ? H.v_Descripcion : F.v_DescripcionProducto,
                                    Precio = F == null ? 0 : F.d_Precio.Value,
                                    Descuentos = F.v_FacturaRef,
                                    PrecioVenta = F == null ? 0 : F.d_PrecioVenta.Value,

                                    Total = A.d_Total.Value,
                                    SerieDocumento = A.v_SerieDocumento.Trim(),
                                    Moneda = A.i_IdMoneda == 1 ? "S" : "US$.",
                                    TipoDocumento = C.v_Siglas + " " + A.v_SerieDocumento.Trim() + "-" + A.v_CorrelativoDocumento.Trim(),

                                }).ToList().Select(x => new ReporteDocumentoGuiaRemisionOtroFormato
                                {


                                    Fecha = x.Fecha.Date.Day.ToString("00") + "/" + x.Fecha.Date.Month.ToString("00") + "/" + x.Fecha.Date.Year.ToString(),
                                    RazonSocialCliente = x.NombreCliente,
                                    RucCliente = x.NroDocCliente,
                                    PuntoLLegada = x.Direccion,
                                    CondicionPago = x.CondicionPago,
                                    CodigoProducto = x.CodigoArticulo,
                                    Cantidad = x.Cantidad,
                                    UnidadMedidaSiglas = x.UnidadSiglas,
                                    Descripcion = x.Descripcion,
                                    Precio = x.Precio,
                                    Dscto = x.Descuentos,
                                    SubTotal = x.PrecioVenta,
                                    Total = x.Total,
                                    DFecha = x.Fecha,
                                    SerieDocumento = x.SerieDocumento,
                                    Moneda = x.Moneda,
                                    TipoDocumento = x.TipoDocumento,


                                }).ToList();
                }
                else
                {


                    ReporteInicial =
                                    (from A in dbContext.guiaremision
                                     join B in dbContext.cliente on new { IdCliente = A.v_IdCliente, eliminado = 0 } equals new { IdCliente = B.v_IdCliente, eliminado = B.i_Eliminado.Value } into B_join
                                     from B in B_join.DefaultIfEmpty()

                                     join C in dbContext.documento on new { TipoDoc = A.i_IdTipoGuia.Value, eliminado = 0 } equals new { TipoDoc = C.i_CodigoDocumento, eliminado = C.i_Eliminado.Value } into C_join
                                     from C in C_join.DefaultIfEmpty()


                                     join F in dbContext.guiaremisiondetalle on new { IdGuia = A.v_IdGuiaRemision, eliminado = 0 } equals new { IdGuia = F.v_IdGuiaRemision, eliminado = F.i_Eliminado.Value } into F_join
                                     from F in F_join.DefaultIfEmpty()

                                     join G in dbContext.productodetalle on new { IdProductoDetalle = F.v_IdProductoDetalle, eliminado = 0 } equals new { IdProductoDetalle = G.v_IdProductoDetalle, eliminado = G.i_Eliminado.Value } into G_join
                                     from G in G_join.DefaultIfEmpty()

                                     join H in dbContext.producto on new { IdProd = G.v_IdProducto, eliminado = 0 } equals new { IdProd = H.v_IdProducto, eliminado = H.i_Eliminado.Value } into H_join
                                     from H in H_join.DefaultIfEmpty()


                                     join I in dbContext.datahierarchy on new { Unidad = F.i_IdUnidadMedida.Value, eliminado = 0, Grupo = 17 } equals new { Unidad = I.i_ItemId, eliminado = I.i_IsDeleted.Value, Grupo = I.i_GroupId } into I_join
                                     from I in I_join.DefaultIfEmpty()


                                     join J in dbContext.datahierarchy on new { Moneda = A.i_IdMoneda.Value, eliminado = 0, Grupo = 18 } equals new { Moneda = J.i_ItemId, eliminado = J.i_IsDeleted.Value, Grupo = J.i_GroupId } into J_join
                                     from J in J_join.DefaultIfEmpty()



                                     join K in dbContext.venta on new { TipoDoc = A.i_IdTipoDocumento.Value, eliminado = 0, serie = A.v_SerieDocumentoRef.Trim(), correlativo = A.v_NumeroDocumentoRef.Trim() } equals new { TipoDoc = K.i_IdTipoDocumento.Value, eliminado = K.i_Eliminado.Value, serie = K.v_SerieDocumento.Trim(), correlativo = K.v_CorrelativoDocumento.Trim() } into K_join

                                     from K in K_join.DefaultIfEmpty()

                                     join L in dbContext.datahierarchy on new { Grupo = 23, eliminado = 0, condicVenta = K.i_IdCondicionPago.Value } equals new { Grupo = L.i_GroupId, eliminado = L.i_IsDeleted.Value, condicVenta = L.i_ItemId } into L_join

                                     from L in L_join.DefaultIfEmpty()
                                     //join K in dbContext.datahierarchy on new { Igv = A.i_IdIgv.Value, eliminado = 0, Grupo = 27 } equals new { Igv = K.i_ItemId, eliminado = K.i_IsDeleted.Value, Grupo = K.i_GroupId } into K_join
                                     //from K in K_join.DefaultIfEmpty()

                                     //join L in dbContext.datahierarchy on new { Igv = A.i_IdIgv.Value, eliminado = 0, Grupo = 27 }
                                     //                                   equals new { Igv = L.i_ItemId, eliminado = L.i_IsDeleted.Value, Grupo = L.i_GroupId } into L_join

                                     //from L in L_join.DefaultIfEmpty()

                                     where A.v_IdGuiaRemision == IdVenta && A.i_Eliminado == 0
                                     select new
                                     {
                                         Fecha = A.t_FechaEmision.Value,
                                         NroDocCliente = B == null ? "" : B.v_IdCliente == "N002-CL000000000" ? string.Empty : B.v_NroDocIdentificacion,
                                         NombreCliente = B == null ? "" : (B.v_ApePaterno + " " + B.v_ApeMaterno + " " + B.v_PrimerNombre + " " + B.v_SegundoNombre + " " + B.v_RazonSocial).Trim(),
                                         Direccion = B == null ? "" : B.v_DirecPrincipal.Trim(),
                                         CondicionPago = K == null ? "" : L.v_Value1.Trim(),
                                         CodigoArticulo = H == null ? "" : H.v_CodInterno,
                                         Cantidad = F == null ? 0 : F.d_Cantidad.Value,
                                         UnidadSiglas = I == null ? "" : I.v_Field ?? "",
                                         Descripcion = H == null ? "" : H.v_Descripcion,
                                         Precio = F == null ? 0 : F.d_Precio.Value,
                                         Descuentos = F.v_Descuento,
                                         PrecioVenta = F == null ? 0 : F.d_Total.Value,
                                         Total = A.d_Total.Value,
                                         SerieDocumento = A.v_SerieGuiaRemision.Trim(),
                                         Moneda = A.i_IdMoneda == 1 ? "S" : "US$.",
                                         TipoDocumento = C.v_Siglas + " " + A.v_SerieGuiaRemision.Trim() + "-" + A.v_NumeroGuiaRemision.Trim(),

                                     }).ToList().Select(x => new ReporteDocumentoGuiaRemisionOtroFormato
                                     {


                                         Fecha = x.Fecha.Date.Day.ToString("00") + "/" + x.Fecha.Date.Month.ToString("00") + "/" + x.Fecha.Date.Year.ToString(),
                                         RazonSocialCliente = x.NombreCliente,
                                         RucCliente = x.NroDocCliente,
                                         PuntoLLegada = x.Direccion,
                                         CondicionPago = x.CondicionPago,
                                         CodigoProducto = x.CodigoArticulo,
                                         Cantidad = x.Cantidad,
                                         UnidadMedidaSiglas = x.UnidadSiglas,
                                         Descripcion = x.Descripcion,
                                         Precio = x.Precio,
                                         Dscto = x.Descuentos,
                                         SubTotal = x.PrecioVenta,
                                         Total = x.Total,
                                         DFecha = x.Fecha,
                                         SerieDocumento = x.SerieDocumento,
                                         Moneda = x.Moneda,
                                         TipoDocumento = x.TipoDocumento,


                                     }).ToList();


                }



                int i = 0;
                foreach (var item in ReporteInicial)
                {

                    item.Item = (i + 1).ToString();
                    i = i + 1;
                    ReporteFinal.Add(item);
                }



                return ReporteFinal;




            }


        }



        public List<ReporteDocumentoNotaCredito> ReporteDocumentoNotaCredito(string pstrv_IdVenta)
        {
            //mon.IsActive = true;
            try
            {
                using (var dbContext = new SAMBHSEntitiesModelWin())
                {

                    SystemParameterBL _objSystemParameterBL = new SystemParameterBL();
                    OperationResult objOperationResult = new OperationResult();
                    var Ruc = new NodeBL().ReporteEmpresa().FirstOrDefault().RucEmpresaPropietaria;
                    string pstrUbigeo = string.Empty;
                    #region Query
                    var query =
                            (from A in dbContext.venta
                             join B in dbContext.cliente on new { IdCliente = A.v_IdCliente, eliminado = 0 } equals new { IdCliente = B.v_IdCliente, eliminado = B.i_Eliminado.Value } into B_join
                             from B in B_join.DefaultIfEmpty()
                             join C in dbContext.documento on new { TipoDoc = A.i_IdTipoDocumento.Value, eliminado = 0 } equals new { TipoDoc = C.i_CodigoDocumento, eliminado = C.i_Eliminado.Value } into C_join
                             from C in C_join.DefaultIfEmpty()
                             join D in dbContext.vendedor on new { IdVendedor = A.v_IdVendedor, eliminado = 0 } equals new { IdVendedor = D.v_IdVendedor, eliminado = 0 } into D_join
                             from D in D_join.DefaultIfEmpty()
                             join E in dbContext.datahierarchy on new { CondicionPago = A.i_IdCondicionPago.Value, eliminado = 0, Grupo = 41 } equals new { CondicionPago = E.i_ItemId, eliminado = E.i_IsDeleted.Value, Grupo = E.i_GroupId } into E_join
                             from E in E_join.DefaultIfEmpty()
                             join F in dbContext.ventadetalle on new { IdVenta = A.v_IdVenta, eliminado = 0 } equals new { IdVenta = F.v_IdVenta, eliminado = F.i_Eliminado.Value } into F_join
                             from F in F_join.DefaultIfEmpty()
                             join G in dbContext.productodetalle on new { ProductoDetalle = F.v_IdProductoDetalle, eliminado = 0 } equals new { ProductoDetalle = G.v_IdProductoDetalle, eliminado = G.i_Eliminado.Value } into G_join
                             from G in G_join.DefaultIfEmpty()
                             join H in dbContext.producto on new { Prod = G.v_IdProducto, eliminado = 0 } equals new { Prod = H.v_IdProducto, eliminado = H.i_Eliminado.Value } into H_join
                             from H in H_join.DefaultIfEmpty()
                             join I in dbContext.datahierarchy on new { um = F.i_IdUnidadMedida.Value, eliminado = 0, Grupo = 17 } equals new { um = I.i_ItemId, eliminado = I.i_IsDeleted.Value, Grupo = I.i_GroupId } into I_join
                             from I in I_join.DefaultIfEmpty()
                             join J in dbContext.documento on new { Ref = A.i_IdTipoDocumentoRef.Value, eliminado = 0 } equals new { Ref = J.i_CodigoDocumento, eliminado = J.i_Eliminado.Value } into J_join
                             from J in J_join.DefaultIfEmpty()
                             join K in dbContext.datahierarchy on new { Mon = A.i_IdMoneda.Value, Grupo = 18, eliminado = 0 } equals new { Mon = K.i_ItemId, Grupo = K.i_GroupId, eliminado = K.i_IsDeleted.Value } into K_join
                             from K in K_join.DefaultIfEmpty()
                             join L in dbContext.datahierarchy on new { Igv = A.i_IdIgv.Value, eliminado = 0, Grupo = 27 }
                                                                equals new { Igv = L.i_ItemId, eliminado = L.i_IsDeleted.Value, Grupo = L.i_GroupId } into L_join

                             from L in L_join.DefaultIfEmpty()
                             where A.v_IdVenta == pstrv_IdVenta && A.i_Eliminado == 0

                             select new ReporteDocumentoNotaCredito
                             {
                                 FechaRegistro = A.t_FechaRegistro.Value,
                                 NroDocCliente = B == null ? "" : B.v_NroDocIdentificacion,
                                 NombreCliente = A.v_NombreClienteTemporal == "" ? (B.v_ApePaterno + " " + B.v_ApeMaterno + " " + B.v_PrimerNombre + " " + B.v_SegundoNombre + " " + B.v_RazonSocial).Trim() : (B.v_ApePaterno + " " + B.v_ApeMaterno + " " + B.v_PrimerNombre + " " + B.v_SegundoNombre + " " + A.v_NombreClienteTemporal).Trim(),
                                 Vendedor = D == null ? "" : D.v_NombreCompleto,
                                 Direccion = B == null ? "" : B.v_DirecPrincipal,
                                 CondicionPago = E == null ? "" : E.v_Value1,
                                 Documento = (A.v_SerieDocumento.Trim() + "-" + A.v_CorrelativoDocumento.Trim()),
                                 TipoDocumento = C == null ? "" : C.v_Siglas,
                                 ValorVenta = A.d_ValorVenta.Value,
                                 Igv = A.d_IGV.Value,
                                 Total = A.d_Total.Value,
                                 Descuento = A.d_Descuento.Value,
                                 CodigoArticulo = H == null ? "" : H.v_CodInterno,
                                 Cantidad = F == null ? 0 : F.d_Cantidad.Value,
                                 //Descripcion = H == null ? "" : H.v_Descripcion,
                                 Descripcion = H == null ? string.IsNullOrEmpty(F.v_DescripcionProducto) ? "" : F.v_DescripcionProducto : string.IsNullOrEmpty(F.v_DescripcionProducto) ? H.v_Descripcion : F.v_DescripcionProducto,
                                 Precio = F == null ? 0 : F.d_Precio.Value,
                                 d_Valor = F == null ? 0 : F.d_Valor.Value,
                                 d_ValorVenta = F == null ? 0 : F.d_ValorVenta.Value,
                                 d_Descuento = F == null ? 0 : F.d_Descuento.Value,
                                 Unidad = I == null ? "" : I.v_Value1,
                                 d_Igvdetalle = F == null ? 0 : F.d_Igv.Value,
                                 PrecioVenta = F == null ? 0 : F.d_PrecioVenta.Value,
                                 NombreEmpresaPropietaria = K == null ? "" : K.v_Field,
                                 DocumentoRef = (A.v_SerieDocumentoRef.Trim() + "-" + A.v_CorrelativoDocumentoRef.Trim()),
                                 FechaRegistroRef = A.t_FechaRef.Value,
                                 TipoDocumentoRef = J == null ? "" : J.v_Siglas,
                                 Concepto = A.v_Concepto,
                                 Moneda = A.i_IdMoneda == 1 ? "S/" : "US$",
                                 PorcentajeIvg = L == null ? "" : L.v_Value1,
                                 SerieDocumento = A.v_SerieDocumento.Trim(),
                                 Observacion = F.v_Observaciones == null ? "" : F.v_Observaciones,
                                 DFechaOC = A.t_FechaOrdenCompra.Value,
                                 DFechaVencimiento = A.t_FechaVencimiento.Value,
                                 NroOrdenCompra = A.v_OrdenCompra == null ? "" : A.v_OrdenCompra,
                                 IdDistrito = B.i_IdDistrito == null ? -1 : B.i_IdDistrito.Value,
                                 IdDepartamento = B.i_IdDepartamento == null ? -1 : B.i_IdDepartamento.Value,
                                 IdProvincia = B.i_IdProvincia == null ? -1 : B.i_IdProvincia.Value,
                                 UnidadSiglas = I == null ? "" : I.v_Field,
                                 PrecioDscto = F == null || F.d_ValorVenta == null || F.d_Cantidad == 0 ? 0 : F.d_ValorVenta.Value / F.d_Cantidad.Value,
                                 i_PrecioIncluyeIgv = A.i_PreciosIncluyenIgv ?? 0,



                             }).ToList().Select(x => new ReporteDocumentoNotaCredito
                             {

                                 FechaRegistro = x.FechaRegistro,
                                 NroDocCliente = x.NroDocCliente,
                                 NombreCliente = x.NombreCliente,
                                 Vendedor = x.Vendedor,
                                 Direccion = x.Direccion,
                                 CondicionPago = x.CondicionPago,
                                 Documento = x.Documento,
                                 TipoDocumento = x.TipoDocumento,
                                 ValorVenta = x.ValorVenta,
                                 Igv = x.Igv,
                                 Total = x.Total,
                                 Descuento = x.Descuento,
                                 CodigoArticulo = x.CodigoArticulo,
                                 Cantidad = x.Cantidad,
                                 Descripcion = x.Descripcion,
                                 Precio = x.Precio,
                                 d_Valor = x.d_Valor,
                                 d_ValorVenta = x.d_ValorVenta,
                                 d_Descuento = x.d_Descuento,
                                 Unidad = x.Unidad,
                                 d_Igvdetalle = x.d_Igvdetalle,
                                 PrecioVenta = x.PrecioVenta,
                                 NombreEmpresaPropietaria = x.NombreEmpresaPropietaria,
                                 DocumentoRef = x.DocumentoRef,
                                 FechaRegistroRef = x.FechaRegistroRef,
                                 TipoDocumentoRef = x.TipoDocumentoRef,
                                 Concepto = x.Concepto,
                                 Moneda = x.Moneda,
                                 PorcentajeIvg = Ruc == Constants.RucRollavel || Ruc == Constants.RucJorplast ? x.PorcentajeIvg + "%" : x.PorcentajeIvg,
                                 SerieDocumento = x.SerieDocumento,
                                 Observacion = x.Observacion,
                                 FechaLetras = x.FechaRegistro.Day.ToString("00") + " " + new CultureInfo("es-ES", false).DateTimeFormat.GetMonthName(int.Parse(x.FechaRegistro.Month.ToString())).ToUpper() + " DEL " + x.FechaRegistro.Year.ToString(),
                                 CantidadLetras = SAMBHS.Common.Resource.Utils.ConvertirenLetras(x.Cantidad.ToString()) + "(" + x.Cantidad + ")",
                                 SFechaOC = x.DFechaOC.Date.Day.ToString("00") + "/" + x.DFechaOC.Date.Month.ToString("00") + "/" + x.DFechaOC.Date.Year.ToString(),
                                 SFechaVencimiento = x.DFechaVencimiento.Date.Day.ToString("00") + "/" + x.DFechaVencimiento.Date.Month.ToString("00") + "/" + x.DFechaVencimiento.Date.Year.ToString(),
                                 NroOrdenCompra = x.NroOrdenCompra,
                                 IdDepartamento = x.IdDepartamento,
                                 IdProvincia = x.IdProvincia,
                                 IdDistrito = x.IdDistrito,
                                 UnidadSiglas = x.UnidadSiglas,
                                 MesEmisionLetras = new CultureInfo("es-ES", false).DateTimeFormat.GetMonthName(int.Parse(x.FechaRegistro.Month.ToString())).ToUpper(),
                                 PrecioDscto = x.PrecioDscto,
                                 i_PrecioIncluyeIgv = x.i_PrecioIncluyeIgv,
                             }).ToList();
                    try
                    {

                        var departamento = query.FirstOrDefault().IdDepartamento != -1 ? _objSystemParameterBL.GetSystemParameterForComboUbigeoKeyValueDto(ref objOperationResult, 1, 112, "").ToList().Where(x => x.Id == query.FirstOrDefault().IdDepartamento.ToString()).FirstOrDefault().Value1 : "";
                        var provincia = query.FirstOrDefault().IdProvincia != -1 ? _objSystemParameterBL.GetSystemParameterForComboUbigeoKeyValueDto(ref objOperationResult, query.FirstOrDefault().IdDepartamento, 112, "").Where(x => x.Id == query.FirstOrDefault().IdProvincia.ToString()).FirstOrDefault().Value1 : "";
                        var distrito = query.FirstOrDefault().IdDistrito != -1 ? _objSystemParameterBL.GetSystemParameterForComboUbigeoKeyValueDto(ref objOperationResult, query.FirstOrDefault().IdProvincia, 112, "").Where(x => x.Id == query.FirstOrDefault().IdDistrito.ToString()).FirstOrDefault().Value1 : "";
                        pstrUbigeo = departamento + " " + distrito;
                    }
                    catch (Exception ex)
                    {
                        pstrUbigeo = "";
                    }

                    query = query.Select(x => new ReporteDocumentoNotaCredito
                    {
                        FechaRegistro = x.FechaRegistro,
                        NroDocCliente = x.NroDocCliente,
                        NombreCliente = x.NombreCliente,
                        Vendedor = x.Vendedor,
                        Direccion = x.Direccion,
                        CondicionPago = x.CondicionPago,
                        Documento = x.Documento,
                        TipoDocumento = x.TipoDocumento,
                        ValorVenta = x.ValorVenta,
                        Igv = x.Igv,
                        Total = x.Total,
                        Descuento = x.Descuento,
                        CodigoArticulo = x.CodigoArticulo,
                        Cantidad = x.Cantidad,
                        Descripcion = x.Descripcion,
                        Precio = x.Precio,
                        d_Valor = x.d_Valor,
                        d_ValorVenta = x.d_ValorVenta,
                        d_Descuento = x.d_Descuento,
                        Unidad = x.Unidad,
                        d_Igvdetalle = x.d_Igvdetalle,
                        PrecioVenta = x.PrecioVenta,
                        NombreEmpresaPropietaria = x.NombreEmpresaPropietaria,
                        DocumentoRef = x.DocumentoRef,
                        FechaRegistroRef = x.FechaRegistroRef,
                        TipoDocumentoRef = x.TipoDocumentoRef,
                        Concepto = x.Concepto,
                        Moneda = x.Moneda,
                        PorcentajeIvg = x.PorcentajeIvg,
                        SerieDocumento = x.SerieDocumento,
                        Observacion = x.Observacion,
                        FechaLetras = x.FechaLetras,
                        CantidadLetras = x.CantidadLetras,
                        SFechaOC = x.SFechaOC,
                        SFechaVencimiento = x.SFechaVencimiento,
                        NroOrdenCompra = x.NroOrdenCompra,
                        Ubigeo = pstrUbigeo,
                        UnidadSiglas = x.UnidadSiglas,
                        MesEmisionLetras = x.MesEmisionLetras,
                        PrecioDscto = x.PrecioDscto,
                        i_PrecioIncluyeIgv = x.i_PrecioIncluyeIgv,

                    }).ToList();
                    #endregion
                    return query;
                }
            }
            catch (Exception ex)
            {

                return null;
            }
        }

        public List<ReporteDocumentoNotaDebito> ReporteDocumentoNotaDebito(string pstrv_IdVenta)
        {
            //mon.IsActive = truE;
            try
            {
                SAMBHSEntitiesModelWin dbContext = new SAMBHSEntitiesModelWin();
                string pstrUbigeo = string.Empty;
                SystemParameterBL _objSystemParameterBL = new SystemParameterBL();
                OperationResult objOperationResult = new OperationResult();
                #region Query
                var query =
                         (from A in dbContext.venta
                          join B in dbContext.cliente on new { Cliente = A.v_IdCliente, eliminado = 0 } equals new { Cliente = B.v_IdCliente, eliminado = B.i_Eliminado.Value } into B_join
                          from B in B_join.DefaultIfEmpty()
                          join C in dbContext.documento on new { TipoDoc = A.i_IdTipoDocumento.Value, eliminado = 0 } equals new { TipoDoc = C.i_CodigoDocumento, eliminado = C.i_Eliminado.Value } into C_join
                          from C in C_join.DefaultIfEmpty()
                          join D in dbContext.vendedor on new { Vend = A.v_IdVendedor, eliminado = 0 } equals new { Vend = D.v_IdVendedor, eliminado = D.i_Eliminado.Value } into D_join
                          from D in D_join.DefaultIfEmpty()
                          join E in dbContext.datahierarchy on new { Pago = A.i_IdCondicionPago.Value, Grupo = 41, eliminado = 0 } equals new { Pago = E.i_ItemId, Grupo = E.i_GroupId, eliminado = E.i_IsDeleted.Value } into E_join
                          from E in E_join.DefaultIfEmpty()
                          join F in dbContext.ventadetalle on new { Venta = A.v_IdVenta, eliminado = 0 } equals new { Venta = F.v_IdVenta, eliminado = F.i_Eliminado.Value } into F_join
                          from F in F_join.DefaultIfEmpty()
                          join G in dbContext.productodetalle on new { ProdDetalle = F.v_IdProductoDetalle, eliminado = 0 } equals new { ProdDetalle = G.v_IdProductoDetalle, eliminado = G.i_Eliminado.Value } into G_join
                          from G in G_join.DefaultIfEmpty()
                          join H in dbContext.producto on new { Prod = G.v_IdProducto, eliminado = 0 } equals new { Prod = H.v_IdProducto, eliminado = H.i_Eliminado.Value } into H_join
                          from H in H_join.DefaultIfEmpty()
                          join I in dbContext.datahierarchy on new { um = F.i_IdUnidadMedida.Value, eliminado = 0, Grupo = 17 } equals new { um = I.i_ItemId, eliminado = I.i_IsDeleted.Value, Grupo = I.i_GroupId } into I_join
                          from I in I_join.DefaultIfEmpty()
                          join J in dbContext.documento on new { Ref = A.i_IdTipoDocumentoRef.Value, eliminado = 0 } equals new { Ref = J.i_CodigoDocumento, eliminado = J.i_Eliminado.Value } into J_join
                          from J in J_join.DefaultIfEmpty()
                          join K in dbContext.datahierarchy on new { Mon = A.i_IdMoneda.Value, eliminado = 0, Grupo = 18 } equals new { Mon = K.i_ItemId, eliminado = K.i_IsDeleted.Value, Grupo = K.i_GroupId } into K_join
                          from K in K_join.DefaultIfEmpty()
                          join L in dbContext.datahierarchy on new { Igv = A.i_IdIgv.Value, eliminado = 0, Grupo = 27 }
                                                             equals new { Igv = L.i_ItemId, eliminado = L.i_IsDeleted.Value, Grupo = L.i_GroupId } into L_join

                          from L in L_join.DefaultIfEmpty()
                          where A.v_IdVenta == pstrv_IdVenta && A.i_Eliminado == 0

                          select new ReporteDocumentoNotaDebito
                          {
                              FechaRegistro = A.t_FechaRegistro.Value,
                              NroDocCliente = B == null ? "" : B.v_NroDocIdentificacion,
                              NombreCliente = A.v_NombreClienteTemporal == "" ? B == null ? "" : (B.v_ApePaterno + " " + B.v_ApeMaterno + " " + B.v_PrimerNombre + " " + B.v_SegundoNombre + " " + B.v_RazonSocial).Trim() : B == null ? "" : (B.v_ApePaterno + " " + B.v_ApeMaterno + " " + B.v_PrimerNombre + " " + B.v_SegundoNombre + " " + A.v_NombreClienteTemporal).Trim(),
                              Vendedor = D == null ? "" : D.v_NombreCompleto,
                              Direccion = B == null ? "" : B.v_DirecPrincipal,
                              CondicionPago = E == null ? "" : E.v_Value1,
                              Documento = (A.v_SerieDocumento.Trim() + "-" + A.v_CorrelativoDocumento.Trim()),
                              TipoDocumento = C == null ? "" : C.v_Siglas,
                              ValorVenta = A.d_ValorVenta.Value,
                              Igv = A.d_IGV.Value,
                              Total = A.d_Total.Value,
                              Descuento = A.d_Descuento.Value,
                              CodigoArticulo = H == null ? "" : H.v_CodInterno,
                              Cantidad = F == null ? 0 : F.d_Cantidad.Value,
                              // Descripcion = H == null ? "" : H.v_Descripcion,
                              Descripcion =  string.IsNullOrEmpty ( F.v_DescripcionProducto) ? string.IsNullOrEmpty ( H.v_Descripcion)?"": H.v_Descripcion  : F.v_DescripcionProducto , 
                              Precio = F == null ? 0 : F.d_Precio.Value,
                              d_Valor = F == null ? 0 : F.d_Valor.Value,
                              d_ValorVenta = F == null ? 0 : F.d_ValorVenta.Value,
                              d_Descuento = F == null ? 0 : F.d_Descuento.Value,
                              Unidad = E == null ? "" : I.v_Value1,
                              d_Igvdetalle = F == null ? 0 : F.d_Igv.Value,
                              PrecioVenta = F == null ? 0 : F.d_PrecioVenta.Value,
                              NombreEmpresaPropietaria = K == null ? "" : K.v_Field,
                              DocumentoRef = (A.v_SerieDocumentoRef.Trim() + "-" + A.v_CorrelativoDocumentoRef.Trim()),
                              FechaRegistroRef = A.t_FechaRef.Value,
                              TipoDocumentoRef = J == null ? "" : J.v_Nombre,
                              Concepto = A.v_Concepto,
                              Moneda = A.i_IdMoneda == 1 ? "S/." : "US$.",
                              PorcentajeIgv = L == null ? "" : L.v_Value1,
                              SerieDocumento = A.v_SerieDocumento.Trim(),
                              Observacion = F.v_Observaciones == null ? "" : F.v_Observaciones,
                              DFechaOC = A.t_FechaOrdenCompra.Value,
                              DFechaVencimiento = A.t_FechaVencimiento.Value,
                              NroOrdenCompra = A.v_OrdenCompra == null ? "" : A.v_OrdenCompra,
                              IdDistrito = B.i_IdDistrito == null ? -1 : B.i_IdDistrito.Value,
                              IdDepartamento = B.i_IdDepartamento == null ? -1 : B.i_IdDepartamento.Value,
                              IdProvincia = B.i_IdProvincia == null ? -1 : B.i_IdProvincia.Value
                          }).ToList().Select(x => new ReporteDocumentoNotaDebito
                          {

                              FechaRegistro = x.FechaRegistro,
                              NroDocCliente = x.NroDocCliente,
                              NombreCliente = x.NombreCliente,
                              Vendedor = x.Vendedor,
                              Direccion = x.Vendedor,
                              CondicionPago = x.CondicionPago,
                              Documento = x.Documento,
                              TipoDocumento = x.TipoDocumento,
                              ValorVenta = x.ValorVenta,
                              Igv = x.Igv,
                              Total = x.Total,
                              Descuento = x.Descuento,
                              CodigoArticulo = x.CodigoArticulo,
                              Cantidad = x.Cantidad,
                              Descripcion = x.Descripcion,
                              Precio = x.Precio,
                              d_Valor = x.d_Valor,
                              d_ValorVenta = x.d_ValorVenta,
                              d_Descuento = x.d_Descuento,
                              Unidad = x.Unidad,
                              d_Igvdetalle = x.d_Igvdetalle,
                              PrecioVenta = x.PrecioVenta,
                              NombreEmpresaPropietaria = x.NombreEmpresaPropietaria,
                              DocumentoRef = x.DocumentoRef,
                              FechaRegistroRef = x.FechaRegistroRef,
                              TipoDocumentoRef = x.TipoDocumentoRef,
                              Concepto = x.Concepto,
                              Moneda = x.Moneda,
                              PorcentajeIgv = x.PorcentajeIgv,
                              SerieDocumento = x.SerieDocumento,
                              Observacion = x.Observacion,
                              FechaLetras = x.FechaRegistro.Day.ToString("00") + " " + new CultureInfo("es-ES", false).DateTimeFormat.GetMonthName(int.Parse(x.FechaRegistro.Month.ToString())).ToUpper() + " DEL " + x.FechaRegistro.Year.ToString(),
                              CantidadLetras = SAMBHS.Common.Resource.Utils.ConvertirenLetras(x.Cantidad.ToString()) + "(" + x.Cantidad + ")",
                              SFechaOC = x.DFechaOC.Date.Day.ToString("00") + "/" + x.DFechaOC.Date.Month.ToString("00") + "/" + x.DFechaOC.Date.Year.ToString(),
                              SFechaVencimiento = x.DFechaVencimiento.Date.Day.ToString("00") + "/" + x.DFechaVencimiento.Date.Month.ToString("00") + "/" + x.DFechaVencimiento.Date.Year.ToString(),
                              NroOrdenCompra = x.NroOrdenCompra,
                              IdDepartamento = x.IdDepartamento,
                              IdProvincia = x.IdProvincia,
                              IdDistrito = x.IdDistrito,
                              MesLetras = new CultureInfo("es-ES", false).DateTimeFormat.GetMonthName(int.Parse(x.FechaRegistro.Month.ToString())).ToUpper(),

                          }).ToList();



                try
                {

                    var departamento = query.FirstOrDefault().IdDepartamento != -1 ? _objSystemParameterBL.GetSystemParameterForComboUbigeoKeyValueDto(ref objOperationResult, 1, 112, "").ToList().Where(x => x.Id == query.FirstOrDefault().IdDepartamento.ToString()).FirstOrDefault().Value1 : "";
                    var provincia = query.FirstOrDefault().IdProvincia != -1 ? _objSystemParameterBL.GetSystemParameterForComboUbigeoKeyValueDto(ref objOperationResult, query.FirstOrDefault().IdDepartamento, 112, "").Where(x => x.Id == query.FirstOrDefault().IdProvincia.ToString()).FirstOrDefault().Value1 : "";
                    var distrito = query.FirstOrDefault().IdDistrito != -1 ? _objSystemParameterBL.GetSystemParameterForComboUbigeoKeyValueDto(ref objOperationResult, query.FirstOrDefault().IdProvincia, 112, "").Where(x => x.Id == query.FirstOrDefault().IdDistrito.ToString()).FirstOrDefault().Value1 : "";
                    pstrUbigeo = departamento + " " + distrito;
                }
                catch (Exception ex)
                {
                    pstrUbigeo = "";
                }

                query = query.Select(x => new ReporteDocumentoNotaDebito
                {
                    FechaRegistro = x.FechaRegistro,
                    NroDocCliente = x.NroDocCliente,
                    NombreCliente = x.NombreCliente,
                    Vendedor = x.Vendedor,
                    Direccion = x.Vendedor,
                    CondicionPago = x.CondicionPago,
                    Documento = x.Documento,
                    TipoDocumento = x.TipoDocumento,
                    ValorVenta = x.ValorVenta,
                    Igv = x.Igv,
                    Total = x.Total,
                    Descuento = x.Descuento,
                    CodigoArticulo = x.CodigoArticulo,
                    Cantidad = x.Cantidad,
                    Descripcion = x.Descripcion,
                    Precio = x.Precio,
                    d_Valor = x.d_Valor,
                    d_ValorVenta = x.d_ValorVenta,
                    d_Descuento = x.d_Descuento,
                    Unidad = x.Unidad,
                    d_Igvdetalle = x.d_Igvdetalle,
                    PrecioVenta = x.PrecioVenta,
                    NombreEmpresaPropietaria = x.NombreEmpresaPropietaria,
                    DocumentoRef = x.DocumentoRef,
                    FechaRegistroRef = x.FechaRegistroRef,
                    TipoDocumentoRef = x.TipoDocumentoRef,
                    Concepto = x.Concepto,
                    Moneda = x.Moneda,
                    PorcentajeIgv = x.PorcentajeIgv,
                    SerieDocumento = x.SerieDocumento,
                    Observacion = x.Observacion,
                    FechaLetras = x.FechaLetras,
                    CantidadLetras = x.CantidadLetras,
                    SFechaOC = x.SFechaOC,
                    SFechaVencimiento = x.SFechaVencimiento,
                    NroOrdenCompra = x.NroOrdenCompra,
                    Ubigeo = pstrUbigeo,
                    MesLetras = x.MesLetras,

                }).ToList();
                #endregion


                //pobjOperationResult.Success = 1;
                return query;
            }
            catch (Exception ex)
            {
                //pobjOperationResult.Success = 0;
                //pobjOperationResult.ExceptionMessage = ex.Message;
                return null;
            }
        }

        public List<string> DevolverNombreEmpresaPropietaria()
        {
            OperationResult objOperationResult = new OperationResult();
            List<string> Retonar = new List<string>();
            NodeBL objNodeBL = new NodeBL();
            int _intNodeId = int.Parse(Utils.Windows.GetApplicationConfigValue("NodeId"));

            var x = objNodeBL.GetNodeByNodeId(ref objOperationResult, _intNodeId);
            Retonar.Add(x.v_RazonSocial);
            Retonar.Add(x.v_RUC);
            return Retonar;

        }

        public List<ReporteRegistroVenta> ReporteRegistroVenta(ref OperationResult objOperationResult, int pstri_IdEstablecimiento, DateTime? pstrt_FechaRegistroIni, DateTime? pstrt_FechaRegistroFin, int pintTipoDocumentoId, string pstrt_IdVendedor, string pstrt_Orden, string Agrupar)
        {

            try
            {
                objOperationResult.Success = 1;
                using (var dbContext = new SAMBHSEntitiesModelWin())
                {



                    if (Agrupar == "SIN AGRUPAR")
                    {
                        #region sinagrupar
                        var Ventas =
                        (from A in dbContext.venta
                         join B in dbContext.cliente on new { IdCliente = A.v_IdCliente, eliminado = 0 } equals new { IdCliente = B.v_IdCliente, eliminado = B.i_Eliminado.Value } into B_join
                         from B in B_join.DefaultIfEmpty()
                         join C in dbContext.documento on
                         new { IdTipoDocumento = A.i_IdTipoDocumento.Value, eliminado = 0 } equals new { IdTipoDocumento = C.i_CodigoDocumento, eliminado = C.i_Eliminado.Value } into C_join
                         from C in C_join.DefaultIfEmpty()
                         join D in dbContext.vendedor on new { IdVendedor = A.v_IdVendedor, eliminado = 0 } equals new { IdVendedor = D.v_IdVendedor, eliminado = D.i_Eliminado.Value } into D_join
                         from D in D_join.DefaultIfEmpty()
                         join E in dbContext.establecimiento on new { Id = A.i_IdEstablecimiento.Value, e = 0 } equals new { Id = E.i_IdEstablecimiento, e = E.i_Eliminado.Value } into E_Join
                         from E in E_Join.DefaultIfEmpty()
                         join F in dbContext.datahierarchy on new { IdMoneda = A.i_IdMoneda.Value, eliminado = 0, Grupo = 18 } equals new { IdMoneda = F.i_ItemId, eliminado = F.i_IsDeleted.Value, Grupo = F.i_GroupId } into F_join
                         from F in F_join.DefaultIfEmpty()
                         join G in dbContext.datahierarchy on new { Igv = A.i_IdIgv.Value, eliminado = 0, Grupo = 27 } equals new { Igv = G.i_ItemId, eliminado = G.i_IsDeleted.Value, Grupo = G.i_GroupId } into G_join
                         from G in G_join.DefaultIfEmpty()
                         where (A.i_Eliminado == 0)
                               && (A.t_FechaRegistro >= pstrt_FechaRegistroIni
                                   && A.t_FechaRegistro <= pstrt_FechaRegistroFin)
                               && (A.i_IdTipoDocumento == pintTipoDocumentoId || pintTipoDocumentoId == -1)
                               && (A.v_IdVendedor == pstrt_IdVendedor || pstrt_IdVendedor == "-1")
                               && (A.i_IdEstablecimiento == pstri_IdEstablecimiento || pstri_IdEstablecimiento == -1)

                         select new ReporteRegistroVenta
                         {
                             NombreAlmacen = "",
                             FechaRegistro = A.t_FechaRegistro.Value,
                             TipoDocumento = C.v_Siglas,
                             NombreDocumento = (A.v_SerieDocumento.Trim() + "-" + A.v_CorrelativoDocumento.Trim()),
                             NombreCliente = string.IsNullOrEmpty(A.v_NombreClienteTemporal)
                                     ? (B.v_ApePaterno + " " + B.v_ApeMaterno + " " + B.v_PrimerNombre + " " +
                                        B.v_SegundoNombre + " " + B.v_RazonSocial).Trim()
                                     : (B.v_ApePaterno + " " + B.v_ApeMaterno + " " + B.v_PrimerNombre + " " +
                                        B.v_SegundoNombre + " " + A.v_NombreClienteTemporal).Trim(),
                             NroDocCliente = B.v_NroDocIdentificacion,
                             NombreVendedor = D.v_NombreCompleto,
                             NroDocVendedor = D.v_NroDocIdentificacion,
                             Moneda = F.v_Value2,
                             ValorVenta = A.d_ValorVenta.Value,
                             Igv = A.d_IGV.Value,
                             Total = A.d_Total.Value,
                             Descuento = A.d_Descuento.Value,
                             DocumentoRef = A.v_SerieDocumento.Trim() + "-" + A.v_CorrelativoDocumento.Trim(),
                             FechaRegistroRef = A.t_FechaRef.Value,
                             TipoDocumentoRef = C.v_Siglas,
                             SerieDocumento = A.v_SerieDocumento,
                             CorrelativoDocumento = A.v_CorrelativoDocumento,
                             IdTipoDocumento = A.i_IdTipoDocumento.Value,
                             IdVendedor = A.v_IdVendedor,
                             TipoCambio = A.d_TipoCambio.Value,
                             IdMoneda = A.i_IdMoneda.Value,
                             IgvNombre = "IGV Al " + G.v_Value1.Trim() + " :",
                             Documento = "TOTAL " + C.v_Nombre.Trim() + " :",
                             IdEstado = A.i_IdEstado.Value,
                             Establecimiento = E.v_Nombre
                         });

                        // Ventas = Ventas.OrderBy(pstrt_Orden);
                        var VentasFinales = (from A in Ventas.ToList()
                                             let ValorVenta =
                                             CalcularVenta(A.IdTipoDocumento, A.ValorVenta, A.Igv, A.Total, A.Descuento, A.TipoCambio,
                                                 A.IdMoneda)

                                             select new ReporteRegistroVenta
                                             {
                                                 NombreAlmacen = "",
                                                 FechaRegistro = A.FechaRegistro,
                                                 TipoDocumento = A.TipoDocumento,
                                                 NombreDocumento = A.NombreDocumento,
                                                 NombreCliente =
                                                     A.IdEstado == 0 ? "** A     N     U     L     A     D     O **" : A.NombreCliente,
                                                 NroDocCliente = A.NroDocCliente,
                                                 NombreVendedor = A.NombreVendedor,
                                                 NroDocVendedor = A.NroDocVendedor,
                                                 Moneda = A.Moneda,
                                                 ValorVenta = A.IdEstado == 0 ? 0 : ValorVenta.ValorVentaSoles,
                                                 Igv = A.IdEstado == 0 ? 0 : ValorVenta.IgvSoles,
                                                 Total = A.IdEstado == 0 ? 0 : ValorVenta.TotalSoles,
                                                 Descuento = A.Descuento,
                                                 DocumentoRef = A.DocumentoRef,
                                                 FechaRegistroRef = A.FechaRegistroRef,
                                                 TipoDocumentoRef = A.TipoDocumentoRef,
                                                 SerieDocumento = A.SerieDocumento,
                                                 CorrelativoDocumento = A.CorrelativoDocumento,
                                                 IdTipoDocumento = A.IdTipoDocumento,
                                                 IdVendedor = A.IdVendedor,
                                                 TipoCambio = A.TipoCambio,
                                                 ValorVentaD = A.IdEstado == 0 ? 0 : ValorVenta.ValorVentaDolares,
                                                 IgvD = A.IdEstado == 0 ? 0 : ValorVenta.IgvDolares,
                                                 TotalD = A.IdEstado == 0 ? 0 : ValorVenta.TotalDolares,
                                                 IdMoneda = A.IdMoneda,
                                                 IgvNombre = A.IgvNombre,
                                                 Documento = A.Documento,
                                                 Establecimiento = A.Establecimiento
                                             });

                        var GuiasInternas = (from A in dbContext.guiaremision
                                             join B in dbContext.cliente on new { IdCliente = A.v_IdCliente, eliminado = 0 } equals
                                             new { IdCliente = B.v_IdCliente, eliminado = B.i_Eliminado.Value } into B_join
                                             from B in B_join.DefaultIfEmpty()
                                             join C in dbContext.documento on new { IdTipoDocumento = A.i_IdTipoGuia.Value, eliminado = 0 }
                                             equals new { IdTipoDocumento = C.i_CodigoDocumento, eliminado = C.i_Eliminado.Value } into C_join
                                             from C in C_join.DefaultIfEmpty()

                                             join E in dbContext.establecimiento on new { id = A.i_IdEstablecimiento.Value, eliminado = 0 } equals
                                             new { id = E.i_IdEstablecimiento, eliminado = E.i_Eliminado.Value } into E_join
                                             from E in E_join.DefaultIfEmpty()
                                             join F in dbContext.datahierarchy on
                                             new { IdMoneda = A.i_IdMoneda.Value, eliminado = 0, Grupo = 18 } equals
                                             new { IdMoneda = F.i_ItemId, eliminado = F.i_IsDeleted.Value, Grupo = F.i_GroupId } into F_join
                                             from F in F_join.DefaultIfEmpty()
                                             join G in dbContext.datahierarchy on new { Igv = A.i_IdIgv.Value, eliminado = 0, Grupo = 27 }
                                             equals new { Igv = G.i_ItemId, eliminado = G.i_IsDeleted.Value, Grupo = G.i_GroupId } into G_join
                                             from G in G_join.DefaultIfEmpty()
                                             where (A.i_Eliminado == 0)
                                                   && (A.t_FechaEmision >= pstrt_FechaRegistroIni
                                                       && A.t_FechaEmision <= pstrt_FechaRegistroFin)
                                                   &&
                                                   (A.i_IdTipoGuia == (int)TiposDocumentos.GuiaInterna ||
                                                    A.i_IdTipoGuia == pintTipoDocumentoId)
                                                   && (pstrt_IdVendedor == "-1")

                                             select new ReporteRegistroVenta
                                             {
                                                 NombreAlmacen = "",
                                                 FechaRegistro = A.t_FechaEmision.Value,
                                                 TipoDocumento = C.v_Siglas,
                                                 NombreDocumento = (A.v_SerieGuiaRemision.Trim() + "-" + A.v_NumeroGuiaRemision.Trim()),
                                                 NombreCliente =
                                                     A.i_IdEstado == 0
                                                         ? "** A     N     U     L     A     D     O **"
                                                         : (B.v_ApePaterno + " " + B.v_ApeMaterno + " " + B.v_PrimerNombre + " " +
                                                            B.v_SegundoNombre + " " + B.v_RazonSocial).Trim(),
                                                 NroDocCliente = B.v_NroDocIdentificacion,
                                                 NombreVendedor = "",
                                                 NroDocVendedor = "",
                                                 Moneda = F.v_Value2,
                                                 ValorVenta = A.i_IdEstado == 0 ? 0 : A.d_Total ?? 0,
                                                 Igv = 0,
                                                 Total = A.i_IdEstado == 0 ? 0 : A.d_Total.Value,
                                                 Descuento = 0,
                                                 DocumentoRef = "",
                                                 FechaRegistroRef = A.t_FechaEmision.Value,
                                                 TipoDocumentoRef = "",
                                                 SerieDocumento = A.v_SerieGuiaRemision.Trim(),
                                                 CorrelativoDocumento = A.v_NumeroGuiaRemision.Trim(),
                                                 IdTipoDocumento = A.i_IdTipoGuia ?? -1,
                                                 IdVendedor = "",
                                                 TipoCambio = A.d_TipoCambio.Value,
                                                 IdMoneda = A.i_IdMoneda.Value,
                                                 IgvNombre = "IGV Al " + G.v_Value1.Trim() + " :",
                                                 Documento = "TOTAL " + C.v_Nombre.Trim() + " :",
                                                 IdEstado = A.i_IdEstado.Value,
                                                 v_IdGuiaRemision = A.v_IdGuiaRemision,
                                                 i_IdTipoGuia = A.i_IdTipoGuia.Value,
                                                 Establecimiento = E.v_Nombre
                                             }).ToList().Select(a =>
                                             {
                                                 var CalculoGuiaInterna = ObtenerCalculosGuiaRemisionInterna(a.v_IdGuiaRemision);
                                                 return new ReporteRegistroVenta
                                                 {
                                                     NombreAlmacen = "",
                                                     FechaRegistro = a.FechaRegistro,
                                                     TipoDocumento = a.TipoDocumento,
                                                     NombreDocumento = a.NombreDocumento,
                                                     NombreCliente = a.NombreCliente,
                                                     NroDocCliente = a.NroDocCliente,
                                                     NombreVendedor = a.NombreVendedor,
                                                     NroDocVendedor = a.NroDocVendedor,
                                                     Moneda = a.Moneda,
                                                     ValorVenta = a.IdEstado == 0 ? 0 : CalculoGuiaInterna.Subtotal,
                                                     Igv = a.IdEstado == 0 ? 0 : CalculoGuiaInterna != null ? CalculoGuiaInterna.Igv : 0,
                                                     Total = a.IdEstado == 0 ? 0 : CalculoGuiaInterna != null ? CalculoGuiaInterna.Total : 0,
                                                     Descuento =
                                                         a.IdEstado == 0 ? 0 : CalculoGuiaInterna != null ? CalculoGuiaInterna.Descuento : 0,
                                                     DocumentoRef = "",
                                                     FechaRegistroRef = a.FechaRegistroRef,
                                                     TipoDocumentoRef = "",
                                                     SerieDocumento = a.SerieDocumento,
                                                     CorrelativoDocumento = a.CorrelativoDocumento,
                                                     IdTipoDocumento = a.IdTipoDocumento,
                                                     IdVendedor = "",
                                                     TipoCambio = a.TipoCambio,
                                                     IdMoneda = a.IdMoneda,
                                                     IgvNombre = a.IgvNombre,
                                                     Documento = a.Documento,
                                                     IdEstado = a.IdEstado,
                                                     i_IdTipoGuia = a.i_IdTipoGuia,
                                                     Establecimiento = a.Establecimiento
                                                 };
                                             }).ToList().AsQueryable();


                        var GuiasInternasFinales = (from A in GuiasInternas
                                                    let ValorVenta =
                                                    CalcularVenta(A.IdTipoDocumento, A.ValorVenta, A.Igv, A.Total, A.Descuento, A.TipoCambio,
                                                        A.IdMoneda)

                                                    select new ReporteRegistroVenta
                                                    {
                                                        NombreAlmacen = "",
                                                        FechaRegistro = A.FechaRegistro,
                                                        TipoDocumento = A.TipoDocumento,
                                                        NombreDocumento = A.NombreDocumento,
                                                        NombreCliente =
                                                            A.IdEstado == 0 ? "** A     N     U     L     A     D     O **" : A.NombreCliente,
                                                        NroDocCliente = A.NroDocCliente,
                                                        NombreVendedor = A.NombreVendedor,
                                                        NroDocVendedor = A.NroDocVendedor,
                                                        Moneda = A.Moneda,
                                                        ValorVenta = A.IdEstado == 0 ? 0 : ValorVenta.ValorVentaSoles,
                                                        Igv = A.IdEstado == 0 ? 0 : ValorVenta.IgvSoles,
                                                        Total = A.IdEstado == 0 ? 0 : ValorVenta.TotalSoles,
                                                        Descuento = A.Descuento,
                                                        DocumentoRef = A.DocumentoRef,
                                                        FechaRegistroRef = A.FechaRegistroRef,
                                                        TipoDocumentoRef = A.TipoDocumentoRef,
                                                        SerieDocumento = A.SerieDocumento,
                                                        CorrelativoDocumento = A.CorrelativoDocumento,
                                                        IdTipoDocumento = A.IdTipoDocumento,
                                                        IdVendedor = A.IdVendedor,
                                                        TipoCambio = A.TipoCambio,
                                                        ValorVentaD = A.IdEstado == 0 ? 0 : ValorVenta.ValorVentaDolares,
                                                        IgvD = A.IdEstado == 0 ? 0 : ValorVenta.IgvDolares,
                                                        TotalD = A.IdEstado == 0 ? 0 : ValorVenta.TotalDolares,
                                                        IdMoneda = A.IdMoneda,
                                                        IgvNombre = A.IgvNombre,
                                                        Documento = A.Documento,
                                                        Establecimiento = A.Establecimiento
                                                    }).ToList().AsQueryable();






                        var VT = VentasFinales.Concat(GuiasInternasFinales).ToList().AsQueryable();

                        return VT.OrderBy(pstrt_Orden).ToList();

                        #endregion
                    }
                    else
                    {


                        #region Moneda
                        var Ventas =
                        (from A in dbContext.venta
                         join B in dbContext.cliente on new { IdCliente = A.v_IdCliente, eliminado = 0 } equals new { IdCliente = B.v_IdCliente, eliminado = B.i_Eliminado.Value } into B_join
                         from B in B_join.DefaultIfEmpty()
                         join C in dbContext.documento on
                         new { IdTipoDocumento = A.i_IdTipoDocumento.Value, eliminado = 0 } equals new { IdTipoDocumento = C.i_CodigoDocumento, eliminado = C.i_Eliminado.Value } into C_join
                         from C in C_join.DefaultIfEmpty()
                         join D in dbContext.vendedor on new { IdVendedor = A.v_IdVendedor, eliminado = 0 } equals new { IdVendedor = D.v_IdVendedor, eliminado = D.i_Eliminado.Value } into D_join
                         from D in D_join.DefaultIfEmpty()
                         join E in dbContext.establecimiento on new { Id = A.i_IdEstablecimiento.Value, e = 0 } equals new { Id = E.i_IdEstablecimiento, e = E.i_Eliminado.Value } into E_Join
                         from E in E_Join.DefaultIfEmpty()
                         join F in dbContext.datahierarchy on new { IdMoneda = A.i_IdMoneda.Value, eliminado = 0, Grupo = 18 } equals new { IdMoneda = F.i_ItemId, eliminado = F.i_IsDeleted.Value, Grupo = F.i_GroupId } into F_join
                         from F in F_join.DefaultIfEmpty()
                         join G in dbContext.datahierarchy on new { Igv = A.i_IdIgv.Value, eliminado = 0, Grupo = 27 } equals new { Igv = G.i_ItemId, eliminado = G.i_IsDeleted.Value, Grupo = G.i_GroupId } into G_join
                         from G in G_join.DefaultIfEmpty()
                         where (A.i_Eliminado == 0)
                               && (A.t_FechaRegistro >= pstrt_FechaRegistroIni
                                   && A.t_FechaRegistro <= pstrt_FechaRegistroFin)
                               && (A.i_IdTipoDocumento == pintTipoDocumentoId || pintTipoDocumentoId == -1)
                               && (A.v_IdVendedor == pstrt_IdVendedor || pstrt_IdVendedor == "-1")
                               && (A.i_IdEstablecimiento == pstri_IdEstablecimiento || pstri_IdEstablecimiento == -1)

                         select new ReporteRegistroVenta
                         {
                             NombreAlmacen = "",
                             FechaRegistro = A.t_FechaRegistro.Value,
                             TipoDocumento = C.v_Siglas,
                             NombreDocumento = (A.v_SerieDocumento.Trim() + "-" + A.v_CorrelativoDocumento.Trim()),
                             NombreCliente = A.i_IdEstado == 0 ? "** A     N     U     L     A     D     O **" : string.IsNullOrEmpty(A.v_NombreClienteTemporal)
                                     ? (B.v_ApePaterno + " " + B.v_ApeMaterno + " " + B.v_PrimerNombre + " " +
                                        B.v_SegundoNombre + " " + B.v_RazonSocial).Trim()
                                     : (B.v_ApePaterno + " " + B.v_ApeMaterno + " " + B.v_PrimerNombre + " " +
                                        B.v_SegundoNombre + " " + A.v_NombreClienteTemporal).Trim(),
                             NroDocCliente = B.v_NroDocIdentificacion,
                             NombreVendedor = D.v_NombreCompleto,
                             NroDocVendedor = D.v_NroDocIdentificacion,
                             Moneda = F.v_Value2,
                             ValorVenta = A.i_IdEstado == 0 ? 0 : C.i_UsadoDocumentoInverso == 1 ? A.d_ValorVenta.Value * -1 : A.d_ValorVenta.Value,
                             Igv = A.i_IdEstado == 0 ? 0 : C.i_UsadoDocumentoInverso == 1 ? A.d_IGV.Value * -1 : A.d_IGV.Value,
                             Total = A.i_IdEstado == 0 ? 0 : C.i_UsadoDocumentoInverso == 1 ? A.d_Total.Value * -1 : A.d_Total.Value,
                             Descuento = A.d_Descuento.Value,
                             DocumentoRef = A.v_SerieDocumento.Trim() + "-" + A.v_CorrelativoDocumento.Trim(),
                             FechaRegistroRef = A.t_FechaRef.Value,
                             TipoDocumentoRef = C.v_Siglas,
                             SerieDocumento = A.v_SerieDocumento,
                             CorrelativoDocumento = A.v_CorrelativoDocumento,
                             IdTipoDocumento = A.i_IdTipoDocumento.Value,
                             IdVendedor = A.v_IdVendedor,
                             TipoCambio = A.d_TipoCambio.Value,
                             IdMoneda = A.i_IdMoneda.Value,
                             IgvNombre = "IGV Al " + G.v_Value1.Trim() + " :",
                             Documento = "TOTAL " + C.v_Nombre.Trim() + " :",
                             IdEstado = A.i_IdEstado.Value,
                             Establecimiento = E.v_Nombre,
                             Grupo = "MONEDA : " + F.v_Value1,
                             v_IdGuiaRemision = A.v_IdVenta,
                             i_IdTipoGuia = A.i_IdTipoDocumento ?? 0,

                         }).ToList();

                        // Ventas = Ventas.OrderBy(pstrt_Orden);
                        //var VentasFinales = (from A in Ventas.ToList()
                        //                     let ValorVenta =
                        //                     CalcularVenta(A.IdTipoDocumento, A.ValorVenta, A.Igv, A.Total, A.Descuento, A.TipoCambio,
                        //                         A.IdMoneda)

                        //                     select new ReporteRegistroVenta
                        //                     {
                        //                         NombreAlmacen = "",
                        //                         FechaRegistro = A.FechaRegistro,
                        //                         TipoDocumento = A.TipoDocumento,
                        //                         NombreDocumento = A.NombreDocumento,
                        //                         NombreCliente =
                        //                             A.IdEstado == 0 ? "** A     N     U     L     A     D     O **" : A.NombreCliente,
                        //                         NroDocCliente = A.NroDocCliente,
                        //                         NombreVendedor = A.NombreVendedor,
                        //                         NroDocVendedor = A.NroDocVendedor,
                        //                         Moneda = A.Moneda,
                        //                         ValorVenta = A.IdEstado == 0 ? 0 : ValorVenta.ValorVentaSoles,
                        //                         Igv = A.IdEstado == 0 ? 0 : ValorVenta.IgvSoles,
                        //                         Total = A.IdEstado == 0 ? 0 : ValorVenta.TotalSoles,
                        //                         Descuento = A.Descuento,
                        //                         DocumentoRef = A.DocumentoRef,
                        //                         FechaRegistroRef = A.FechaRegistroRef,
                        //                         TipoDocumentoRef = A.TipoDocumentoRef,
                        //                         SerieDocumento = A.SerieDocumento,
                        //                         CorrelativoDocumento = A.CorrelativoDocumento,
                        //                         IdTipoDocumento = A.IdTipoDocumento,
                        //                         IdVendedor = A.IdVendedor,
                        //                         TipoCambio = A.TipoCambio,
                        //                         ValorVentaD = A.IdEstado == 0 ? 0 : ValorVenta.ValorVentaDolares,
                        //                         IgvD = A.IdEstado == 0 ? 0 : ValorVenta.IgvDolares,
                        //                         TotalD = A.IdEstado == 0 ? 0 : ValorVenta.TotalDolares,
                        //                         IdMoneda = A.IdMoneda,
                        //                         IgvNombre = A.IgvNombre,
                        //                         Documento = A.Documento,
                        //                         Establecimiento = A.Establecimiento
                        //                     });

                        var GuiasInternas = (from A in dbContext.guiaremision
                                             join B in dbContext.cliente on new { IdCliente = A.v_IdCliente, eliminado = 0 } equals
                                             new { IdCliente = B.v_IdCliente, eliminado = B.i_Eliminado.Value } into B_join
                                             from B in B_join.DefaultIfEmpty()
                                             join C in dbContext.documento on new { IdTipoDocumento = A.i_IdTipoGuia.Value, eliminado = 0 }
                                             equals new { IdTipoDocumento = C.i_CodigoDocumento, eliminado = C.i_Eliminado.Value } into C_join
                                             from C in C_join.DefaultIfEmpty()

                                             join E in dbContext.establecimiento on new { id = A.i_IdEstablecimiento.Value, eliminado = 0 } equals
                                             new { id = E.i_IdEstablecimiento, eliminado = E.i_Eliminado.Value } into E_join
                                             from E in E_join.DefaultIfEmpty()
                                             join F in dbContext.datahierarchy on
                                             new { IdMoneda = A.i_IdMoneda.Value, eliminado = 0, Grupo = 18 } equals
                                             new { IdMoneda = F.i_ItemId, eliminado = F.i_IsDeleted.Value, Grupo = F.i_GroupId } into F_join
                                             from F in F_join.DefaultIfEmpty()
                                             join G in dbContext.datahierarchy on new { Igv = A.i_IdIgv.Value, eliminado = 0, Grupo = 27 }
                                             equals new { Igv = G.i_ItemId, eliminado = G.i_IsDeleted.Value, Grupo = G.i_GroupId } into G_join
                                             from G in G_join.DefaultIfEmpty()
                                             where (A.i_Eliminado == 0)
                                                   && (A.t_FechaEmision >= pstrt_FechaRegistroIni
                                                       && A.t_FechaEmision <= pstrt_FechaRegistroFin)
                                                   &&
                                                   (A.i_IdTipoGuia == (int)TiposDocumentos.GuiaInterna ||
                                                    A.i_IdTipoGuia == pintTipoDocumentoId)
                                                   && (pstrt_IdVendedor == "-1")

                                             select new ReporteRegistroVenta
                                             {
                                                 NombreAlmacen = "",
                                                 FechaRegistro = A.t_FechaEmision.Value,
                                                 TipoDocumento = C.v_Siglas,
                                                 NombreDocumento = (A.v_SerieGuiaRemision.Trim() + "-" + A.v_NumeroGuiaRemision.Trim()),
                                                 NombreCliente =
                                                     A.i_IdEstado == 0
                                                         ? "** A     N     U     L     A     D     O **"
                                                         : (B.v_ApePaterno + " " + B.v_ApeMaterno + " " + B.v_PrimerNombre + " " +
                                                            B.v_SegundoNombre + " " + B.v_RazonSocial).Trim(),
                                                 NroDocCliente = B.v_NroDocIdentificacion,
                                                 NombreVendedor = "",
                                                 NroDocVendedor = "",
                                                 Moneda = F.v_Value2,
                                                 ValorVenta = A.i_IdEstado == 0 ? 0 : A.d_Total ?? 0,
                                                 Igv = 0,
                                                 Total = A.i_IdEstado == 0 ? 0 : A.d_Total.Value,
                                                 Descuento = 0,
                                                 DocumentoRef = "",
                                                 FechaRegistroRef = A.t_FechaEmision.Value,
                                                 TipoDocumentoRef = "",
                                                 SerieDocumento = A.v_SerieGuiaRemision.Trim(),
                                                 CorrelativoDocumento = A.v_NumeroGuiaRemision.Trim(),
                                                 IdTipoDocumento = A.i_IdTipoGuia ?? -1,
                                                 IdVendedor = "",
                                                 TipoCambio = A.d_TipoCambio.Value,
                                                 IdMoneda = A.i_IdMoneda.Value,
                                                 IgvNombre = "IGV Al " + G.v_Value1.Trim() + " :",
                                                 Documento = "TOTAL " + C.v_Nombre.Trim() + " :",
                                                 IdEstado = A.i_IdEstado.Value,
                                                 v_IdGuiaRemision = A.v_IdGuiaRemision,
                                                 i_IdTipoGuia = A.i_IdTipoGuia.Value,
                                                 Establecimiento = E.v_Nombre,
                                                 Grupo = "MONEDA : " + F.v_Value1,
                                             }).ToList();
                        //                     }).ToList().Select(a =>
                        //{
                        //    var CalculoGuiaInterna = ObtenerCalculosGuiaRemisionInterna(a.v_IdGuiaRemision);
                        //    return new ReporteRegistroVenta
                        //    {
                        //        NombreAlmacen = "",
                        //        FechaRegistro = a.FechaRegistro,
                        //        TipoDocumento = a.TipoDocumento,
                        //        NombreDocumento = a.NombreDocumento,
                        //        NombreCliente = a.NombreCliente,
                        //        NroDocCliente = a.NroDocCliente,
                        //        NombreVendedor = a.NombreVendedor,
                        //        NroDocVendedor = a.NroDocVendedor,
                        //        Moneda = a.Moneda,
                        //        ValorVenta = a.IdEstado == 0 ? 0 : CalculoGuiaInterna.Subtotal,
                        //        Igv = a.IdEstado == 0 ? 0 : CalculoGuiaInterna != null ? CalculoGuiaInterna.Igv : 0,
                        //        Total = a.IdEstado == 0 ? 0 : CalculoGuiaInterna != null ? CalculoGuiaInterna.Total : 0,
                        //        Descuento =
                        //            a.IdEstado == 0 ? 0 : CalculoGuiaInterna != null ? CalculoGuiaInterna.Descuento : 0,
                        //        DocumentoRef = "",
                        //        FechaRegistroRef = a.FechaRegistroRef,
                        //        TipoDocumentoRef = "",
                        //        SerieDocumento = a.SerieDocumento,
                        //        CorrelativoDocumento = a.CorrelativoDocumento,
                        //        IdTipoDocumento = a.IdTipoDocumento,
                        //        IdVendedor = "",
                        //        TipoCambio = a.TipoCambio,
                        //        IdMoneda = a.IdMoneda,
                        //        IgvNombre = a.IgvNombre,
                        //        Documento = a.Documento,
                        //        IdEstado = a.IdEstado,
                        //        i_IdTipoGuia = a.i_IdTipoGuia,
                        //        Establecimiento = a.Establecimiento
                        //    };
                        //}).ToList().AsQueryable();


                        //var GuiasInternasFinales = (from A in GuiasInternas
                        //                            let ValorVenta =
                        //                            CalcularVenta(A.IdTipoDocumento, A.ValorVenta, A.Igv, A.Total, A.Descuento, A.TipoCambio,
                        //                                A.IdMoneda)

                        //                            select new ReporteRegistroVenta
                        //                            {
                        //                                NombreAlmacen = "",
                        //                                FechaRegistro = A.FechaRegistro,
                        //                                TipoDocumento = A.TipoDocumento,
                        //                                NombreDocumento = A.NombreDocumento,
                        //                                NombreCliente =
                        //                                    A.IdEstado == 0 ? "** A     N     U     L     A     D     O **" : A.NombreCliente,
                        //                                NroDocCliente = A.NroDocCliente,
                        //                                NombreVendedor = A.NombreVendedor,
                        //                                NroDocVendedor = A.NroDocVendedor,
                        //                                Moneda = A.Moneda,
                        //                                ValorVenta = A.IdEstado == 0 ? 0 : ValorVenta.ValorVentaSoles,
                        //                                Igv = A.IdEstado == 0 ? 0 : ValorVenta.IgvSoles,
                        //                                Total = A.IdEstado == 0 ? 0 : ValorVenta.TotalSoles,
                        //                                Descuento = A.Descuento,
                        //                                DocumentoRef = A.DocumentoRef,
                        //                                FechaRegistroRef = A.FechaRegistroRef,
                        //                                TipoDocumentoRef = A.TipoDocumentoRef,
                        //                                SerieDocumento = A.SerieDocumento,
                        //                                CorrelativoDocumento = A.CorrelativoDocumento,
                        //                                IdTipoDocumento = A.IdTipoDocumento,
                        //                                IdVendedor = A.IdVendedor,
                        //                                TipoCambio = A.TipoCambio,
                        //                                ValorVentaD = A.IdEstado == 0 ? 0 : ValorVenta.ValorVentaDolares,
                        //                                IgvD = A.IdEstado == 0 ? 0 : ValorVenta.IgvDolares,
                        //                                TotalD = A.IdEstado == 0 ? 0 : ValorVenta.TotalDolares,
                        //                                IdMoneda = A.IdMoneda,
                        //                                IgvNombre = A.IgvNombre,
                        //                                Documento = A.Documento,
                        //                                Establecimiento = A.Establecimiento
                        //                            }).ToList().AsQueryable();

                        var VT = Ventas.Concat(GuiasInternas).ToList();
                        return VT.AsQueryable().OrderBy(pstrt_Orden).ToList();

                    }
                        #endregion
                }
            }
            catch (Exception ex)
            {
                objOperationResult.Success = 0;
                return null;
            }
        }

        public CalculoGuiaInternTotales ObtenerCalculosGuiaRemisionInterna(string IdGuia)
        {

            try
            {
                CalculoGuiaInternTotales objCalculo = new CalculoGuiaInternTotales();
                using (SAMBHSEntitiesModelWin dbContext = new SAMBHSEntitiesModelWin())
                {

                    var GuiaDetalles = (from a in dbContext.guiaremisiondetalle
                                        where a.v_IdGuiaRemision == IdGuia && a.i_Eliminado == 0
                                        select a).ToList();


                    objCalculo.Subtotal = GuiaDetalles.Any() ? GuiaDetalles.Sum(x => x.d_ValorVenta).Value : 0;
                    objCalculo.Igv = GuiaDetalles.Any() ? GuiaDetalles.Sum(x => x.d_Igv).Value : 0;
                    objCalculo.Total = GuiaDetalles.Any() ? GuiaDetalles.Sum(x => x.d_Total).Value : 0;
                    objCalculo.Descuento = GuiaDetalles.Any() ? GuiaDetalles.Sum(x => x.d_Descuento).Value : 0;

                    return objCalculo;


                }
            }
            catch (Exception ex)
            {

                return null;
            }

        }

        public List<ReporteRegistroVentaContable> ReporteRegistroContableNuevo(ref OperationResult objOperatioResult, int pstri_IdEstablecimiento, DateTime? pstrt_FechaRegistroIni, DateTime? pstrt_FechaRegistroFin, int pintIdMoneda, string pstrt_Orden, int pintIdTipoventa, string pstrt_NroCuenta, int pintIdTipoDocumento, string pstr_grupollave, string pstr_Nombregrupollave, bool IncluirCobranzasExcel, bool UsadoPDB)
        {
            try
            { /// El 3 de diciembre se cambió esto : 
                /// int.Parse(x.CodigoSunat.Substring(0, 2) de la consulta ListaOperacion
                /// y en TipoOperacionNueva se cambio los codigos por 10 ,20 ,30 
                SAMBHSEntitiesModelWin dbContext = new SAMBHSEntitiesModelWin();
                List<ReporteRegistroVentaContable> Reporte = new List<ReporteRegistroVentaContable>();
                List<ReporteRegistroVentaContable> query = new List<ReporteRegistroVentaContable>();
                List<ReporteRegistroVentaContable> ListaFinal = new List<ReporteRegistroVentaContable>();
                var ListaTipoOperacion = (from a in dbContext.datahierarchy
                                          where a.i_GroupId == 35 && a.i_IsDeleted == 0
                                          select new
                                          {
                                              ItemId = a.i_ItemId,
                                              CodigoSunat = a.v_Value2,
                                          }).ToList().AsQueryable().Select(x => new TipoOperacionSunat
                                          {
                                              ItemId = x.ItemId,
                                              CodigoSunat = x.CodigoSunat.Length >= 2 ? int.Parse(x.CodigoSunat.Substring(0, 2)) : -1,
                                              //CodigoSunat = x.CodigoSunat.Length >= 2 ? int.Parse(x.CodigoSunat.Substring(0, 1)) : -1,
                                          }).ToList();
                List<FormaPagoCobranzas> Cobranzas = new List<FormaPagoCobranzas>();
                if (IncluirCobranzasExcel)
                {

                    DateTime FechaFinal = pstrt_FechaRegistroFin.Value.AddDays(30);
                    Cobranzas = (from a in dbContext.cobranzadetalle
                                 join b in dbContext.cobranza on new { c = a.v_IdCobranza, eliminado = 0 } equals new { c = b.v_IdCobranza, eliminado = b.i_Eliminado.Value } into b_join
                                 from b in b_join.DefaultIfEmpty()
                                 join c in dbContext.datahierarchy on new { Grupo = 46, eliminado = 0, fp = a.i_IdFormaPago.Value } equals new { Grupo = c.i_GroupId, eliminado = c.i_IsDeleted.Value, fp = c.i_ItemId } into c_join
                                 from c in c_join.DefaultIfEmpty()
                                 join d in dbContext.documento on new { tp = b.i_IdTipoDocumento.Value, eliminado = 0 } equals new { tp = d.i_CodigoDocumento, eliminado = d.i_Eliminado.Value } into d_join
                                 from d in d_join.DefaultIfEmpty()
                                 where a.i_Eliminado == 0 && (b.t_FechaRegistro >= pstrt_FechaRegistroIni
                                  && b.t_FechaRegistro <= FechaFinal)

                                  && b.i_IdEstado == 1

                                 select new FormaPagoCobranzas
                                 {
                                     Visa = c.v_Value1.Contains("VISA") ? a.d_ImporteSoles ?? 0 : 0,
                                     Mastercard = c.v_Value1.Contains("MASTERCARD") ? a.d_ImporteSoles ?? 0 : 0,
                                     Efectivo = c.v_Value1.Contains("EFECTIVO") ? a.d_ImporteSoles ?? 0 : 0,
                                     DocCobranza = d.v_Siglas + " " + b.v_Mes + " " + b.v_Correlativo,
                                     Vale = c.v_Value1.Contains("VALE") ? a.d_ImporteSoles ?? 0 : 0,
                                     Ncr = c.v_Value1.Contains("NOTA") ? a.d_ImporteSoles ?? 0 : 0,
                                     v_IdVenta = a.v_IdVenta,
                                     Monto = a.d_ImporteSoles ?? 0,
                                     FormaPago = c.v_Value1,
                                     CuentaContableCobranza = d.v_NroCuenta == null ? "" : d.v_NroCuenta,

                                 }).ToList();
                }


                #region Query
                //1. query para obtener toda la data filtrada por los parametros
                query =
                         (from A in dbContext.venta
                          join B in dbContext.cliente on new { idCliente = A.v_IdCliente, eliminado = 0, Flag = "C" } equals new { idCliente = B.v_IdCliente, eliminado = B.i_Eliminado.Value, Flag = B.v_FlagPantalla } into B_join
                          from B in B_join.DefaultIfEmpty()
                          join F in dbContext.datahierarchy on new { idMoneda = A.i_IdMoneda.Value, Grupo = 18, eliminado = 0 } equals new { idMoneda = F.i_ItemId, Grupo = F.i_GroupId, eliminado = F.i_IsDeleted.Value } into F_join
                          from F in F_join.DefaultIfEmpty()
                          join I in dbContext.ventadetalle on new { idVenta = A.v_IdVenta, eliminado = 0 } equals new { idVenta = I.v_IdVenta, eliminado = I.i_Eliminado.Value } into I_join
                          from I in I_join.DefaultIfEmpty()
                          join J in dbContext.productodetalle on new { idProductoDetalle = I.v_IdProductoDetalle, eliminado = 0 } equals new { idProductoDetalle = J.v_IdProductoDetalle, eliminado = J.i_Eliminado.Value } into J_join
                          from J in J_join.DefaultIfEmpty()
                          join K in dbContext.producto on new { idProducto = J.v_IdProducto, eliminado = 0 } equals new { idProducto = K.v_IdProducto, eliminado = K.i_Eliminado.Value } into K_join
                          from K in K_join.DefaultIfEmpty()
                          join G in dbContext.datahierarchy on new { idIgv = A.i_IdIgv.Value, eliminado = 0, Grupo = 27 } equals new { idIgv = G.i_ItemId, eliminado = G.i_IsDeleted.Value, Grupo = G.i_GroupId } into G_join
                          from G in G_join.DefaultIfEmpty()
                          join H in dbContext.documento on new { TipoDoc = A.i_IdTipoDocumento.Value, eliminado = 0 } equals new { TipoDoc = H.i_CodigoDocumento, eliminado = H.i_Eliminado.Value } into H_join
                          from H in H_join.DefaultIfEmpty()
                          where (A.i_Eliminado == 0)
                           && (A.t_FechaRegistro >= pstrt_FechaRegistroIni
                          && A.t_FechaRegistro <= pstrt_FechaRegistroFin)
                          && (A.i_IdTipoVenta == pintIdTipoventa || pintIdTipoventa == -1)
                          && (I.v_NroCuenta == pstrt_NroCuenta || pstrt_NroCuenta == "")
                          && (A.i_IdTipoDocumento == pintIdTipoDocumento || pintIdTipoDocumento == -1)
                          && H.i_UsadoDocumentoContable == 1
                          && !string.IsNullOrEmpty(A.v_SerieDocumento) && !string.IsNullOrEmpty(A.v_CorrelativoDocumento)
                          select new
                          {

                              Correlativo = A.v_Mes.Trim() + A.v_Correlativo.Trim(),
                              FechaRegistro = A.t_FechaRegistro.Value, // Fecha Emisión
                              IdTipoDocumento = A.i_IdTipoDocumento.Value,
                              SerieDocumento = A.v_SerieDocumento,
                              CorrelativoDocumento = A.v_CorrelativoDocumento.Trim(),
                              NombreCliente = A.i_IdEstado == 1 ? string.IsNullOrEmpty(A.v_NombreClienteTemporal) ? (B.v_ApePaterno + " " + B.v_ApeMaterno + " " + B.v_PrimerNombre + " " + B.v_SegundoNombre + " " + B.v_RazonSocial).Trim() : (B.v_ApePaterno + " " + B.v_ApeMaterno + " " + B.v_PrimerNombre + " " + B.v_SegundoNombre + " " + A.v_NombreClienteTemporal).Trim() : "**** ANULADO ****",
                              DocIdentidad = A.i_IdEstado == 1 ? B == null ? 0 : B.v_IdCliente == "N002-CL000000000" ? 1 : B.i_IdTipoIdentificacion.Value : 0,
                              NroDocCliente = A.i_IdEstado == 1 ? B == null ? "0" : B.v_IdCliente == "N002-CL000000000" ? "00000000" : B.v_NroDocIdentificacion : "0",
                              TipoCambio = A.i_IdEstado == 1 ? A.d_TipoCambio.Value : 0,
                              NombreMoneda = F == null ? "" : F.v_Value2,
                              IgvNombre = G == null ? "" : G.v_Value1,
                              Documento = H == null ? "" : H.v_Nombre,
                              FechaRegistroRef = A.t_FechaRef.Value,
                              idTipoDocumentoRef = A.i_IdTipoDocumentoRef.Value,
                              SerieDocumentoRef = A.v_SerieDocumentoRef,
                              CorrelativoDocumentoRef = A.v_CorrelativoDocumentoRef,
                              TipoDocumento = "",
                              LlaveOrdenar = "",
                              GrupoLlave = pstr_grupollave == "SERIEDOCUMENTO" ? pstr_Nombregrupollave + " " + A.v_SerieDocumento : "",
                              GrupoLlaveNombre = "",
                              IdCabecera = A.v_IdVenta,
                              IdDetalle = I.v_IdVentaDetalle,
                              i_idEstado = A.i_IdEstado.Value,
                              TipoVenta = A.i_IdTipoVenta.Value,
                              TipoOperacionCabecera = A.i_IdTipoOperacion == null ? 0 : A.i_IdTipoOperacion,
                              TipoOperacionGrilla = I == null ? 0 : I.i_IdTipoOperacion == null ? 0 : I.i_IdTipoOperacion.Value,
                              TipoOperacionGrilla2Dig = I == null ? 0 : I.i_IdTipoOperacion == null ? 0 : I.i_IdTipoOperacion.Value,
                              IgvCabecera = A.d_IGV.Value == null ? 0 : A.d_IGV.Value,
                              ValorVenta = A.d_ValorVenta.Value == null ? 0 : A.d_ValorVenta.Value,
                              ValorVentaDetalle = I == null ? 0 : I.d_ValorVenta.Value == null ? 0 : I.d_ValorVenta.Value,
                              IdMoneda = A.i_IdMoneda == null ? 0 : A.i_IdMoneda.Value,
                              AnticipioDetalle = I == null ? 0 : I.i_Anticipio == null ? 0 : I.i_Anticipio.Value,
                              OtrosTributosC = A.d_total_otrostributos == null ? 0 : A.d_total_otrostributos.Value,
                              OtrosTributosD = I == null ? 0 : I.d_otrostributos == null ? 0 : I.d_otrostributos.Value,
                              ISC = A.d_total_isc == null ? 0 : A.d_total_isc.Value,
                              Total = A.d_Total.Value == null ? 0 : A.i_IdEstado == 0 ? 0 : A.d_Total.Value,
                              FechaVencimiento = A.i_IdTipoDocumento == 14 ? A.t_FechaVencimiento : null,
                              TipoPersona = B == null ? 0 : B.i_IdTipoPersona == null ? 0 : B.i_IdTipoPersona.Value,
                              CorrelativoPle = A.v_Mes.Trim() + A.v_Correlativo.Trim().Substring(0, 2) + A.v_Correlativo.Trim().Substring(3, 8),
                              NroDocumentoAlPle = A.v_CorrelativoDocumentoFin == null ? "" : A.v_CorrelativoDocumentoFin.Trim().Substring(2, 6),
                              ValorFobEmbarcado = A.d_ValorFOB == null ? 0 : pintIdMoneda == (int)Currency.Soles ? A.i_IdMoneda == (int)Currency.Soles ? A.d_ValorFOB.Value : A.d_ValorFOB.Value * A.d_TipoCambio.Value : A.i_IdMoneda == (int)Currency.Soles ? A.d_ValorFOB.Value / A.d_TipoCambio.Value : A.d_ValorFOB.Value,
                              NroDocAl = A.v_CorrelativoDocumentoFin == null ? "" : A.v_CorrelativoDocumentoFin.Trim(),
                              SiglasMoneda = A.i_IdMoneda != -1 ? F.v_Field.Trim() : "",
                              IdCliente = B.v_IdCliente,
                              IgvDetalle = I.d_Igv ?? 0,
                              v_IdProductoDetalle = I.v_IdProductoDetalle,
                              Cuenta = I == null ? "" : I.v_NroCuenta,
                              v_IdVenta = A.v_IdVenta,
                              PrecioVentaDetalle = I == null ? 0 : I.d_PrecioVenta ?? 0,
                              i_FormaParteOtrosTributos = K.i_IndicaFormaParteOtrosTributos ?? 0,
                              PrecioIncluyeIgv = A.i_PreciosIncluyenIgv == 1 ? true : false,
                              AfectoIgv = A.i_EsAfectoIgv == 1 ? true : false,
                              ApePaterno = B == null ? "" : B.v_ApePaterno,
                              ApeMaterno = B == null ? "" : B.v_ApeMaterno,
                              PrimerNombre = B == null ? "" : B.v_PrimerNombre,
                              SegundoNombre = B == null ? "" : B.v_SegundoNombre,

                          }).ToList().Select(l =>
                          {
                              var TipoOperacionGrillaFinal = ListaTipoOperacion.Where(x => x.ItemId == l.TipoOperacionGrilla2Dig).FirstOrDefault();

                              return new ReporteRegistroVentaContable
                              {

                                  Correlativo = l.Correlativo,
                                  FechaRegistro = l.FechaRegistro,
                                  IdTipoDocumento = l.IdTipoDocumento,
                                  SerieDocumento = l.SerieDocumento,
                                  CorrelativoDocumento = l.CorrelativoDocumento,
                                  NombreCliente = l.NombreCliente,
                                  DocIdentidad = l.DocIdentidad,
                                  NroDocCliente = l.NroDocCliente,
                                  TipoCambio = l.TipoCambio,
                                  NombreMoneda = l.NombreMoneda,
                                  IgvNombre = l.IgvNombre,
                                  Documento = l.Documento,
                                  FechaRegistroRef = l.FechaRegistroRef,
                                  idTipoDocumentoRef = l.idTipoDocumentoRef,
                                  SerieDocumentoRef = l.SerieDocumentoRef,
                                  CorrelativoDocumentoRef = l.CorrelativoDocumentoRef,
                                  TipoDocumento = l.TipoDocumento,
                                  LlaveOrdenar = l.LlaveOrdenar,
                                  GrupoLlave = l.GrupoLlave,
                                  GrupoLlaveNombre = l.GrupoLlaveNombre,
                                  IdCabecera = l.IdCabecera,
                                  IdDetalle = l.IdDetalle,
                                  i_idEstado = l.i_idEstado,
                                  TipoVenta = l.TipoVenta,
                                  TipoOperacionCabecera = l.TipoOperacionCabecera,
                                  TipoOperacionGrilla = TipoOperacionGrillaFinal != null ? TipoOperacionGrillaFinal.CodigoSunat : 0,
                                  TipoOperacionGrilla2Dig = TipoOperacionGrillaFinal != null ? int.Parse(TipoOperacionGrillaFinal.CodigoSunat.ToString().Substring(0, 1)) : 0,    //l.TipoOperacionGrilla2Dig,
                                  //TipoOperacionGrilla2Dig = l.TipoOperacionGrilla2Dig, Antes de cambio diciembre
                                  IgvCabecera = l.IgvCabecera,
                                  ValorVenta = l.ValorVenta,
                                  ValorVentaDetalle = l.ValorVentaDetalle,
                                  IdMoneda = l.IdMoneda,
                                  AnticipioDetalle = l.AnticipioDetalle,
                                  OtrosTributosC = l.OtrosTributosC,
                                  //OtrosTributosD = l.OtrosTributosD,
                                  ISC = l.ISC,
                                  Total = l.Total,
                                  FechaVencimiento = l.FechaVencimiento,
                                  TipoPersona = l.TipoPersona,
                                  CorrelativoPle = l.CorrelativoPle,
                                  NroDocumentoAlPle = l.NroDocumentoAlPle,
                                  ValorFobEmbarcado = l.ValorFobEmbarcado,
                                  NroDocAl = l.NroDocAl,
                                  SiglasMoneda = l.SiglasMoneda,
                                  IdCliente = l.IdCliente,
                                  IgvDetalle = l.IgvDetalle,
                                  IdProductoDetalle = l.v_IdProductoDetalle,
                                  Cuenta = l.Cuenta,
                                  v_IdVenta = l.v_IdVenta,
                                  PrecioVentaDetalle = l.PrecioVentaDetalle,
                                  EsOtrosTributos = l.i_FormaParteOtrosTributos == 1 ? true : false,
                                  PrecioIncluyeIgv = l.PrecioIncluyeIgv,
                                  AfectoIgv = l.AfectoIgv,
                                  ApePaterno = l.ApePaterno,
                                  ApeMaterno = l.ApeMaterno,
                                  PrimerNombre = l.PrimerNombre,
                                  SegundoNombre = l.SegundoNombre,
                              };

                          }).ToList();
                //2.- Query para hacer càculos en memoria 
                if (UsadoPDB)
                {
                    //var Temporal1 = query.ToList().GroupBy(x => x.IdCabecera).Where(y => y.Any(x => x.TipoOperacionCabecera != (int)TipoOperacion1Digito.Mixta)).Select(x => x.First()).OrderBy(o => o.TipoVenta).ThenBy(p => p.Correlativo).ToList();
                    //var Temporal2 = query.ToList().Where(y => y.TipoOperacionCabecera == (int)TipoOperacion1Digito.Mixta).OrderBy(o => o.TipoVenta).ThenBy(p => p.Correlativo).ToList();
                    //ListaFinal = Temporal1.Concat(Temporal2).ToList();
                    ListaFinal = query.GroupBy(x => x.IdCabecera).Select(x => x.First()).ToList().OrderBy(g => g.NroRegistro).ToList();
                }
                else
                {

                    ListaFinal = query.GroupBy(x => x.IdCabecera).Select(x => x.First()).ToList().OrderBy(g => g.NroRegistro).ToList();
                }
                var CabecernasNulas = query.Where(l => (l.TipoOperacionCabecera == null || l.TipoOperacionCabecera.ToString() == "-1" || l.TipoOperacionCabecera.ToString() == "0") && l.i_idEstado == 1).ToList();
                var DetallesNulas = query.Where(l => (l.TipoOperacionGrilla == null || l.TipoOperacionGrilla.ToString() == "0" || l.TipoOperacionGrilla2Dig == null || l.TipoOperacionGrilla2Dig.ToString() == "0") && l.IdProductoDetalle != "N002-PE000000000" && l.i_idEstado == 1 && l.Cuenta != "").ToList();
                if (CabecernasNulas.Any())
                {

                    objOperatioResult.AdditionalInformation = "El tipo de Operación no puede ser nulo : " + CabecernasNulas.FirstOrDefault().Correlativo;
                    objOperatioResult.Success = 0;
                    return null;
                }
                if (DetallesNulas.Any())
                {
                    objOperatioResult.AdditionalInformation = "El tipo de Operación de los detalles no puede ser nulo : " + DetallesNulas.FirstOrDefault().Correlativo;
                    objOperatioResult.Success = 0;
                    return null;
                }
                int index = 1;
                foreach (var item in ListaFinal)
                {
                    ReporteRegistroVentaContable objReporte = new ReporteRegistroVentaContable();
                    objReporte = item;

                    if (UsadoPDB)
                    {


                        //objReporte.Base_Impon_Oper_Grav = item.i_idEstado == 1 ? item.TipoOperacionCabecera <= (int)TipoOperacion1Digito.Exportacion ? item.ValorVenta : item.ValorVentaDetalle : 0;
                        //objReporte.ISC = item.i_idEstado == 1 ? item.TipoOperacionCabecera <= (int)TipoOperacion1Digito.Exportacion ? item.ISC : item.IscDetalle : 0;
                        //objReporte.Igv_Y_O_Ipm = item.i_idEstado == 1 ? item.TipoOperacionCabecera <= (int)TipoOperacion1Digito.Exportacion ? item.IgvCabecera : item.IgvDetalle : 0;

                        objReporte.Base_Impon_Oper_Grav = item.i_idEstado == 1 ? item.ValorVenta : 0;
                        objReporte.ISC = item.i_idEstado == 1 ? item.ISC : 0;
                        objReporte.Igv_Y_O_Ipm = item.i_idEstado == 1 ? item.IgvCabecera : 0;



                    }
                    else
                    {

                        int TipoOperacionCabecera = -1;
                        var TipoOperacionCab = ListaTipoOperacion.Where(x => x.ItemId == item.TipoOperacionCabecera).FirstOrDefault();
                        if (TipoOperacionCab != null)
                        {
                            TipoOperacionCabecera = TipoOperacionCab.CodigoSunat;
                        }
                        item.TipoOperacionGrilla = item.TipoOperacionGrilla.ToString().Length >= 2 ? int.Parse(item.TipoOperacionGrilla.ToString().Substring(0, 2)) : item.TipoOperacionGrilla;
                        objReporte.Valor_Export = item.i_idEstado == 1 ? Globals.ClientSession.i_Periodo != 2016 ? CalcularValoresVentasSunat2017("VE", item.TipoVenta, TipoOperacionCabecera, item.TipoOperacionGrilla, item.IgvCabecera, item.IdTipoDocumento, item.ValorVenta, item.TipoCambio, pintIdMoneda, item.IdMoneda, query, item.IdCabecera) : CalcularValoresVentasSunat2016("VE", item.TipoVenta, TipoOperacionCabecera, item.TipoOperacionGrilla, item.IgvCabecera, item.IdTipoDocumento, item.ValorVenta, item.TipoCambio, pintIdMoneda, item.IdMoneda, query, item.IdCabecera) : 0;
                        objReporte.Base_Impon_Oper_Grav = item.i_idEstado == 1 ? Globals.ClientSession.i_Periodo != 2016 ? CalcularValoresVentasSunat2017("BI", item.TipoVenta, TipoOperacionCabecera, item.TipoOperacionGrilla, item.IgvCabecera, item.IdTipoDocumento, item.ValorVenta, item.TipoCambio, pintIdMoneda, item.IdMoneda, query, item.IdCabecera) : CalcularValoresVentasSunat2016("BI", item.TipoVenta, TipoOperacionCabecera, item.TipoOperacionGrilla, item.IgvCabecera, item.IdTipoDocumento, item.ValorVenta, item.TipoCambio, pintIdMoneda, item.IdMoneda, query, item.IdCabecera) : 0;
                        objReporte.Importe_Exonerada = item.i_idEstado == 1 ? Globals.ClientSession.i_Periodo != 2016 ? CalcularValoresVentasSunat2017("E", item.TipoVenta, TipoOperacionCabecera, item.TipoOperacionGrilla, item.IgvCabecera, item.IdTipoDocumento, item.ValorVenta, item.TipoCambio, pintIdMoneda, item.IdMoneda, query, item.IdCabecera) : CalcularValoresVentasSunat2016("E", item.TipoVenta, TipoOperacionCabecera, item.TipoOperacionGrilla, item.IgvCabecera, item.IdTipoDocumento, item.ValorVenta, item.TipoCambio, pintIdMoneda, item.IdMoneda, query, item.IdCabecera) : 0;
                        objReporte.Importe_Inafecta = item.i_idEstado == 1 ? Globals.ClientSession.i_Periodo != 2016 ? CalcularValoresVentasSunat2017("I", item.TipoVenta, TipoOperacionCabecera, item.TipoOperacionGrilla, item.IgvCabecera, item.IdTipoDocumento, item.ValorVenta, item.TipoCambio, pintIdMoneda, item.IdMoneda, query, item.IdCabecera) : CalcularValoresVentasSunat2016("I", item.TipoVenta, TipoOperacionCabecera, item.TipoOperacionGrilla, item.IgvCabecera, item.IdTipoDocumento, item.ValorVenta, item.TipoCambio, pintIdMoneda, item.IdMoneda, query, item.IdCabecera) : 0;
                        objReporte.Otros_Tributos_No_Forman_Parte_B = item.i_idEstado == 1 ? Globals.ClientSession.i_Periodo != 2016 ? CalcularValoresVentasSunat2017("OT", item.TipoVenta, TipoOperacionCabecera, item.TipoOperacionGrilla, item.IgvCabecera, item.IdTipoDocumento, item.ValorVenta, item.TipoCambio, pintIdMoneda, item.IdMoneda, query, item.IdCabecera) : CalcularValoresVentasSunat2016("OT", item.TipoVenta, TipoOperacionCabecera, item.TipoOperacionGrilla, item.IgvCabecera, item.IdTipoDocumento, item.ValorVenta, item.TipoCambio, pintIdMoneda, item.IdMoneda, query, item.IdCabecera) : 0;
                        objReporte.Igv_Y_O_Ipm = item.i_idEstado == 1 ? Globals.ClientSession.i_Periodo != 2016 ? CalcularValoresVentasSunat2017("IGV", item.TipoVenta, TipoOperacionCabecera, item.TipoOperacionGrilla, item.IgvCabecera, item.IdTipoDocumento, item.ValorVenta, item.TipoCambio, pintIdMoneda, item.IdMoneda, query, item.IdCabecera) : CalcularValoresVentasSunat2016("IGV", item.TipoVenta, TipoOperacionCabecera, item.TipoOperacionGrilla, item.IgvCabecera, item.IdTipoDocumento, item.ValorVenta, item.TipoCambio, pintIdMoneda, item.IdMoneda, query, item.IdCabecera) : 0;
                        objReporte.ISC = item.i_idEstado == 1 ? Globals.ClientSession.i_Periodo != 2016 ? CalcularValoresVentasSunat2017("ISC", item.TipoVenta, item.TipoOperacionCabecera, item.TipoOperacionGrilla, item.IgvCabecera, item.IdTipoDocumento, item.ValorVenta, item.TipoCambio, pintIdMoneda, item.IdMoneda, ListaFinal.ToList(), item.IdCabecera) : CalcularValoresVentasSunat2016("ISC", item.TipoVenta, item.TipoOperacionCabecera, item.TipoOperacionGrilla, item.IgvCabecera, item.IdTipoDocumento, item.ValorVenta, item.TipoCambio, pintIdMoneda, item.IdMoneda, ListaFinal.ToList(), item.IdCabecera) : 0;
                        //objReporte.Valor_Export = item.i_idEstado == 1 ? CalcularValoresVentasSunat2016("VE", item.TipoVenta, TipoOperacionCabecera, item.TipoOperacionGrilla, item.IgvCabecera, item.IdTipoDocumento, item.ValorVenta, item.TipoCambio, pintIdMoneda, item.IdMoneda, query, item.IdCabecera) : 0;
                        //objReporte.Base_Impon_Oper_Grav = item.i_idEstado == 1 ? CalcularValoresVentasSunat2016("BI", item.TipoVenta, TipoOperacionCabecera, item.TipoOperacionGrilla, item.IgvCabecera, item.IdTipoDocumento, item.ValorVenta, item.TipoCambio, pintIdMoneda, item.IdMoneda, query, item.IdCabecera) : 0;
                        //objReporte.Importe_Exonerada = item.i_idEstado == 1 ? CalcularValoresVentasSunat2016("E", item.TipoVenta, TipoOperacionCabecera, item.TipoOperacionGrilla, item.IgvCabecera, item.IdTipoDocumento, item.ValorVenta, item.TipoCambio, pintIdMoneda, item.IdMoneda, query, item.IdCabecera) : 0;
                        //objReporte.Importe_Inafecta = item.i_idEstado == 1 ? CalcularValoresVentasSunat2016("I", item.TipoVenta, TipoOperacionCabecera, item.TipoOperacionGrilla, item.IgvCabecera, item.IdTipoDocumento, item.ValorVenta, item.TipoCambio, pintIdMoneda, item.IdMoneda, query, item.IdCabecera) : 0;
                        //objReporte.Otros_Tributos_No_Forman_Parte_B = item.i_idEstado == 1 ? CalcularValoresVentasSunat2016("OT", item.TipoVenta, TipoOperacionCabecera, item.TipoOperacionGrilla, item.IgvCabecera, item.IdTipoDocumento, item.ValorVenta, item.TipoCambio, pintIdMoneda, item.IdMoneda, query, item.IdCabecera) : 0;
                        //objReporte.Igv_Y_O_Ipm = item.i_idEstado == 1 ? CalcularValoresVentasSunat2016("IGV", item.TipoVenta, TipoOperacionCabecera, item.TipoOperacionGrilla, item.IgvCabecera, item.IdTipoDocumento, item.ValorVenta, item.TipoCambio, pintIdMoneda, item.IdMoneda, query, item.IdCabecera) : 0;
                        //objReporte.ISC = item.i_idEstado == 1 ? CalcularValoresVentasSunat2016("ISC", item.TipoVenta, item.TipoOperacionCabecera, item.TipoOperacionGrilla, item.IgvCabecera, item.IdTipoDocumento, item.ValorVenta, item.TipoCambio, pintIdMoneda, item.IdMoneda, ListaFinal.ToList(), item.IdCabecera) : 0;
                        var detalles = query.Where(x => x.IdCabecera == item.v_IdVenta).ToList();
                        OperationResult objOperationResult = new OperationResult();
                        objOperationResult.Success = 1;
                        if (Globals.ClientSession.i_Periodo == 2016)
                        {
                            #region 2016
                            if (pintIdMoneda == item.IdMoneda)
                            {
                                var sumadetalles = detalles.Any() ? detalles.Sum(o => o.PrecioVentaDetalle) : 0;
                                if (_objDocumentoBL.DocumentoEsInverso(objReporte.IdTipoDocumento))
                                {
                                    if ((TipoOperacionCabecera > 10 && TipoOperacionCabecera <= 19) || (TipoOperacionCabecera > 20 && TipoOperacionCabecera < 30) || (TipoOperacionCabecera > 30 && TipoOperacionCabecera < 40) || TipoOperacionCabecera == 50)
                                    {
                                        objReporte.Total = objReporte.i_idEstado == 1 ? Utils.Windows.DevuelveValorRedondeado(sumadetalles * -1, 2) : 0;
                                    }
                                    else
                                    {
                                        objReporte.Total = Utils.Windows.DevuelveValorRedondeado(item.Total * -1, 2);
                                    }
                                }
                                else
                                {
                                    if ((TipoOperacionCabecera > 10 && TipoOperacionCabecera <= 19) || (TipoOperacionCabecera > 20 && TipoOperacionCabecera < 30) || (TipoOperacionCabecera > 30 && TipoOperacionCabecera < 40) || TipoOperacionCabecera == 50)
                                    {
                                        objReporte.Total = objReporte.i_idEstado == 1 ? Utils.Windows.DevuelveValorRedondeado(sumadetalles, 2) : 0;
                                    }
                                    else
                                    {
                                        objReporte.Total = Utils.Windows.DevuelveValorRedondeado(item.Total, 2);
                                    }
                                }
                            }
                            else if (pintIdMoneda == (int)Currency.Soles && item.IdMoneda == (int)Currency.Dolares)
                            {

                                var sumadetalles = detalles.Any() ? detalles.Sum(o => Utils.Windows.DevuelveValorRedondeado(o.PrecioVentaDetalle * item.TipoCambio, 2)) : 0;
                                if (_objDocumentoBL.DocumentoEsInverso(objReporte.IdTipoDocumento))
                                {
                                    if ((TipoOperacionCabecera > 10 && TipoOperacionCabecera <= 19) || (TipoOperacionCabecera > 20 && TipoOperacionCabecera < 30) || (TipoOperacionCabecera > 30 && TipoOperacionCabecera < 40) || TipoOperacionCabecera == 50)
                                    {
                                        objReporte.Total = objReporte.i_idEstado == 1 ? Utils.Windows.DevuelveValorRedondeado((sumadetalles) * -1, 2) : 0;
                                    }
                                    else
                                    {
                                        objReporte.Total = Utils.Windows.DevuelveValorRedondeado((item.Total * item.TipoCambio) * -1, 2);
                                    }
                                }
                                else
                                {
                                    if ((TipoOperacionCabecera > 10 && TipoOperacionCabecera <= 19) || (TipoOperacionCabecera > 20 && TipoOperacionCabecera < 30) || (TipoOperacionCabecera > 30 && TipoOperacionCabecera < 40) || TipoOperacionCabecera == 50)
                                    {
                                        objReporte.Total = objReporte.i_idEstado == 1 ? item.TipoCambio == 0 ? 0 : Utils.Windows.DevuelveValorRedondeado(sumadetalles, 2) : 0;
                                    }

                                    else
                                    {
                                        objReporte.Total = item.TipoCambio == 0 ? 0 : Utils.Windows.DevuelveValorRedondeado(item.Total * item.TipoCambio, 2);
                                    }
                                }
                            }
                            else if (pintIdMoneda == (int)Currency.Dolares && item.IdMoneda == (int)Currency.Soles)
                            {
                                var sumadetalles = detalles.Any() ? detalles.Sum(o => Utils.Windows.DevuelveValorRedondeado(item.TipoCambio == 0 ? 0 : (o.PrecioVentaDetalle / item.TipoCambio), 2)) : 0;
                                if (_objDocumentoBL.DocumentoEsInverso(objReporte.IdTipoDocumento))
                                {
                                    if ((TipoOperacionCabecera > 10 && TipoOperacionCabecera <= 19) || (TipoOperacionCabecera > 20 && TipoOperacionCabecera < 30) || (TipoOperacionCabecera > 30 && TipoOperacionCabecera < 40) || TipoOperacionCabecera == 50)
                                    {
                                        objReporte.Total = objReporte.i_idEstado == 1 ? item.TipoCambio == 0 ? 0 : Utils.Windows.DevuelveValorRedondeado((sumadetalles) * -1, 2) : 0;
                                    }
                                    else
                                    {
                                        objReporte.Total = item.TipoCambio == 0 ? 0 : Utils.Windows.DevuelveValorRedondeado((item.Total / item.TipoCambio) * -1, 2);
                                    }
                                }
                                else
                                {
                                    if ((TipoOperacionCabecera > 10 && TipoOperacionCabecera <= 19) || (TipoOperacionCabecera > 20 && TipoOperacionCabecera < 30) || (TipoOperacionCabecera > 30 && TipoOperacionCabecera < 40) || TipoOperacionCabecera == 50)
                                    {
                                        objReporte.Total = objReporte.i_idEstado == 1 ? item.TipoCambio == 0 ? 0 : Utils.Windows.DevuelveValorRedondeado(sumadetalles, 2) : 0;
                                    }
                                    else
                                    {
                                        objReporte.Total = item.TipoCambio == 0 ? 0 : Utils.Windows.DevuelveValorRedondeado(item.TipoCambio == 0 ? 0 : (item.Total / item.TipoCambio), 2);
                                    }
                                }

                            }

                            #endregion


                        }
                        else
                        {
                            #region 2017
                            if (pintIdMoneda == item.IdMoneda)
                            {
                                var sumadetalles = detalles.Any() ? detalles.Sum(o => o.PrecioVentaDetalle) : 0;
                                if (_objDocumentoBL.DocumentoEsInverso(objReporte.IdTipoDocumento))
                                {
                                    if ((TipoOperacionCabecera > 10 && TipoOperacionCabecera <= 19) || (TipoOperacionCabecera > 20 && TipoOperacionCabecera < 30) || (TipoOperacionCabecera > 30 && TipoOperacionCabecera < 40) || TipoOperacionCabecera == 50)
                                    {
                                        objReporte.Total = objReporte.i_idEstado == 1 ? Utils.Windows.DevuelveValorRedondeado(sumadetalles * -1, 2) : 0;
                                    }
                                    else
                                    {
                                        objReporte.Total = Utils.Windows.DevuelveValorRedondeado(item.Total * -1, 2);
                                    }
                                }
                                else
                                {
                                    if ((TipoOperacionCabecera > 10 && TipoOperacionCabecera <= 19) || (TipoOperacionCabecera > 20 && TipoOperacionCabecera < 30) || (TipoOperacionCabecera > 30 && TipoOperacionCabecera < 40) || TipoOperacionCabecera == 50)
                                    {
                                        objReporte.Total = objReporte.i_idEstado == 1 ? Utils.Windows.DevuelveValorRedondeado(sumadetalles, 2) : 0;
                                    }
                                    else
                                    {
                                        objReporte.Total = Utils.Windows.DevuelveValorRedondeado(item.Total, 2);
                                    }
                                }
                            }
                            else if (pintIdMoneda != item.IdMoneda)
                            {

                                var sumadetalles = detalles.Any() ? detalles.Sum(o => Utils.Windows.DevuelveValorRedondeado(o.PrecioVentaDetalle * item.TipoCambio, 2)) : 0;
                                if (_objDocumentoBL.DocumentoEsInverso(objReporte.IdTipoDocumento))
                                {
                                    if ((TipoOperacionCabecera > 10 && TipoOperacionCabecera <= 19) || (TipoOperacionCabecera > 20 && TipoOperacionCabecera < 30) || (TipoOperacionCabecera > 30 && TipoOperacionCabecera < 40) || TipoOperacionCabecera == 50)
                                    {
                                        objReporte.Total = objReporte.i_idEstado == 1 ? Utils.Windows.DevuelveValorRedondeado((sumadetalles) * -1, 2) : 0;
                                    }
                                    else
                                    {
                                        // objReporte.Total = Utils.Windows.DevuelveValorRedondeado((item.Total * item.TipoCambio) * -1, 2);
                                        objReporte.Total = CalcularTotalesOtraMonedaVenta(ref objOperationResult, detalles, pintIdMoneda, "T") * -1;//Utils.Windows.DevuelveValorRedondeado((item.Total * item.TipoCambio) * -1, 2);
                                    }
                                }
                                else
                                {
                                    if ((TipoOperacionCabecera > 10 && TipoOperacionCabecera <= 19) || (TipoOperacionCabecera > 20 && TipoOperacionCabecera < 30) || (TipoOperacionCabecera > 30 && TipoOperacionCabecera < 40) || TipoOperacionCabecera == 50)
                                    {
                                        objReporte.Total = objReporte.i_idEstado == 1 ? item.TipoCambio == 0 ? 0 : Utils.Windows.DevuelveValorRedondeado(sumadetalles, 2) : 0;
                                    }

                                    else
                                    {
                                        objReporte.Total = objReporte.i_idEstado == 1 ? item.TipoCambio == 0 ? 0 : CalcularTotalesOtraMonedaVenta(ref objOperationResult, detalles, pintIdMoneda, "T") : 0;
                                    }
                                }
                            }

                            #endregion

                        }
                        objReporte.IgvNombre = "IGV Al  : " + item.IgvNombre;
                        objReporte.Documento = "TOTAL " + item.Documento.Trim() + " :";

                        objReporte.FechaRegistroRef = item.IdTipoDocumento == 6 || item.IdTipoDocumento == 7 || item.IdTipoDocumento == 8 || item.IdTipoDocumento == 87 || item.IdTipoDocumento == 88 || item.IdTipoDocumento == 97 || item.IdTipoDocumento == 98 ? item.FechaRegistroRef : null;
                        objReporte.TipoDocumentoRef = item.IdTipoDocumento == 6 || item.IdTipoDocumento == 7 || item.IdTipoDocumento == 8 || item.IdTipoDocumento == 87 || item.IdTipoDocumento == 88 || item.IdTipoDocumento == 97 || item.IdTipoDocumento == 98 ? item.idTipoDocumentoRef == -1 ? "" : item.idTipoDocumentoRef.ToString("000") : "";
                        objReporte.TipoDocumento = item.IdTipoDocumento.ToString("000");
                        objReporte.LlaveOrdenar = pstrt_Orden == "CORRELATIVODOCUMENTO" ? item.CorrelativoDocumento : "" + pstrt_Orden == "FECHAREGISTRO" ? item.FechaRegistro.ToString() : "" + pstrt_Orden == "IDDOCUMENTO" ? item.IdTipoDocumento.ToString() : "";

                        objReporte.GrupoLlaveNombre = pstr_Nombregrupollave;


                        objReporte.Index = index;
                        if (IncluirCobranzasExcel)
                        {

                            try
                            {
                                if (item.v_IdVenta == "D014-ZQ000000029")
                                {
                                    string h = "";
                                }
                                var cob = Cobranzas.Where(l => l.v_IdVenta == item.v_IdVenta).ToList();
                                objReporte.Visa = cob != null ? cob.Where(l => l.FormaPago.Contains("VISA")).Sum(o => o.Visa) : 0;
                                objReporte.Vale = cob != null ? cob.Where(l => l.FormaPago.Contains("VALE")).Sum(o => o.Vale) : 0;
                                objReporte.Efectivo = cob != null ? cob.Where(l => l.FormaPago.Contains("EFECTIVO")).Sum(o => o.Efectivo) : 0;
                                objReporte.Ncr = cob != null ? cob.Where(l => l.FormaPago.Contains("NOTA")).Sum(o => o.Ncr) : 0;
                                objReporte.Mastercard = cob != null ? cob.Where(l => l.FormaPago.Contains("MASTERCARD")).Sum(o => o.Mastercard) : 0;
                                objReporte.DocCobranza = cob != null ? string.Join(" ,", cob.Select(o => o.DocCobranza).Distinct()) : "";
                                objReporte.CuentaContableCobranza = cob != null ? string.Join(" ,", cob.Select(o => o.CuentaContableCobranza).Distinct()) : "";
                            }
                            catch (Exception ex)
                            { }
                        }
                    }


                    index = index + 1;
                    Reporte.Add(objReporte);
                }
                if (pstrt_Orden == "CORRELATIVODOCUMENTO")
                {
                    Reporte = Reporte.OrderBy(c => c.CorrelativoDocumento).ToList();
                }
                else if (pstrt_Orden == "FECHAREGISTRO")
                {
                    Reporte = Reporte.OrderBy(c => c.FechaRegistro).ThenBy(x => x.CorrelativoDocumento).ToList();
                }
                else if (pstrt_Orden == "CORRELATIVO")
                {
                    Reporte = Reporte.OrderBy(c => c.Correlativo).ToList();
                }
                else
                {

                    Reporte = Reporte.OrderBy(c => c.IdTipoDocumento).ToList();
                }
                objOperatioResult.Success = 1;
                return Reporte;
                #endregion


            }
            catch (Exception ex)
            {
                objOperatioResult.Success = 0;
                return null;
            }
        }

        public List<ConsultaVentasExportacion> ConsultaVentaExportacion(ref OperationResult objOperationResult, DateTime FechaInicial, DateTime FechaFinal)
        {

            try
            {
                List<ConsultaVentasExportacion> Consulta = new List<ConsultaVentasExportacion>();
                using (SAMBHSEntitiesModelWin dbContext = new SAMBHSEntitiesModelWin())
                {
                    objOperationResult.Success = 1;

                    Consulta = (from a in dbContext.ventadetalle
                                join b in dbContext.venta on new { v = a.v_IdVenta, eliminado = 0 } equals new { v = b.v_IdVenta, eliminado = b.i_Eliminado.Value } into b_join
                                from b in b_join.DefaultIfEmpty()
                                join c in dbContext.cliente on new { c = b.v_IdCliente, eliminado = 0 } equals new { c = c.v_IdCliente, eliminado = c.i_Eliminado.Value } into c_join
                                from c in c_join.DefaultIfEmpty()
                                join d in dbContext.datahierarchy on new { grupo = 17, um = a.i_IdUnidadMedida.Value, eliminado = 0 } equals new { grupo = d.i_GroupId, um = d.i_ItemId, eliminado = d.i_IsDeleted.Value } into d_join
                                from d in d_join.DefaultIfEmpty()
                                join e in dbContext.productodetalle on new { pd = a.v_IdProductoDetalle, eliminado = 0 } equals new { pd = e.v_IdProductoDetalle, eliminado = e.i_Eliminado.Value } into e_join
                                from e in e_join.DefaultIfEmpty()
                                join f in dbContext.documento on new { doc = b.i_IdTipoDocumento.Value, eliminado = 0 } equals new { doc = f.i_CodigoDocumento, eliminado = f.i_Eliminado.Value } into f_join
                                from f in f_join.DefaultIfEmpty()

                                where a.i_Eliminado == 0 && b.i_IdEstado == 1 && b.t_FechaRegistro >= FechaInicial && b.t_FechaRegistro <= FechaFinal

                                && f.i_UsadoDocumentoContable == 1 && e.producto != null && (e.producto.i_IndicaFormaParteOtrosTributos == 0 || e.producto.i_IndicaFormaParteOtrosTributos == null)
                                select new
                                {
                                    Fecha = b.t_FechaRegistro.Value,
                                    Cliente = c == null ? "" : (c.v_ApePaterno + " " + c.v_ApeMaterno + " " + c.v_PrimerNombre + " " + c.v_SegundoNombre + " " + c.v_RazonSocial).Trim(),
                                    Cantidad = a.d_Cantidad.Value,
                                    UnidadMedida = d.v_Field,
                                    Producto = e.producto.v_Descripcion,
                                    FobProducto = a.d_Precio ?? 0,
                                    Flete = a.d_FleteXProducto ?? 0,
                                    PrecioPactado = a.d_PrecioPactado ?? 0,
                                    Comision = b.d_PocComision ?? 0,
                                    Naviera = b.v_Naviera,
                                    NroBL = b.v_NroBL,
                                    FechaBL = b.t_FechaPagoBL,
                                    Contenedor = b.v_Contenedor,
                                    Banco = b.v_Banco,
                                    NroFactura = f.v_Siglas + " " + b.v_SerieDocumento + " " + b.v_CorrelativoDocumento,

                                }).ToList().Select(o =>
                                {
                                    var NombreProducto = "";
                                    if (Globals.ClientSession.v_RucEmpresa == Constants.RucAgrofergic)
                                    {
                                        if (o.Producto.Contains("-"))
                                        {
                                            NombreProducto = o.Producto.Split('-')[0];
                                        }
                                        else
                                            NombreProducto = o.Producto;
                                    }
                                    else
                                        NombreProducto = o.Producto;

                                    return new ConsultaVentasExportacion
                                    {
                                        Fecha = o.Fecha.ToShortDateString(),
                                        Cliente = o.Cliente,
                                        Cantidad = o.Cantidad,
                                        UM = o.UnidadMedida,
                                        Producto = NombreProducto,
                                        Fob = o.FobProducto,
                                        Flete = o.Flete,
                                        CifoCfr = o.PrecioPactado,
                                        Comision = o.Comision,
                                        Naviera = o.Naviera,
                                        NroBL = o.NroBL,
                                        FechaBL = o.FechaBL == null ? "" : o.FechaBL.Value.ToShortDateString(),
                                        Contenedor = o.Contenedor,
                                        Banco = o.Banco,
                                        NroFactura = o.NroFactura,
                                    };
                                }).ToList();

                }

                return Consulta;

            }
            catch (Exception ex)
            {
                objOperationResult.Success = 0;
                return null;
            }



        }





        public List<ReporteRegistroVentaContable> VentasPDBNuevo(ref OperationResult objOperatioResult, int pstri_IdEstablecimiento, DateTime? pstrt_FechaRegistroIni, DateTime? pstrt_FechaRegistroFin, int pintIdMoneda, string pstrt_Orden, int pintIdTipoventa, string pstrt_NroCuenta, int pintIdTipoDocumento, string pstr_grupollave, string pstr_Nombregrupollave)
        {
            //mon.IsActive = true;
            try
            {
                SAMBHSEntitiesModelWin dbContext = new SAMBHSEntitiesModelWin();

                List<ReporteRegistroVentaContable> Reporte = new List<ReporteRegistroVentaContable>();
                List<ReporteRegistroVentaContable> query = new List<ReporteRegistroVentaContable>();

                List<ReporteRegistroVentaContable> ListaFinal = new List<ReporteRegistroVentaContable>();
                #region Query
                objOperatioResult.Success = 1;
                //1. query para obtener toda la data filtrada por los parametros
                query =
                         (from A in dbContext.venta
                          join B in dbContext.cliente on new { idCliente = A.v_IdCliente, eliminado = 0, Flag = "C" } equals new { idCliente = B.v_IdCliente, eliminado = B.i_Eliminado.Value, Flag = B.v_FlagPantalla } into B_join
                          from B in B_join.DefaultIfEmpty()
                          join F in dbContext.datahierarchy on new { idMoneda = A.i_IdMoneda.Value, Grupo = 18, eliminado = 0 } equals new { idMoneda = F.i_ItemId, Grupo = F.i_GroupId, eliminado = F.i_IsDeleted.Value } into F_join
                          from F in F_join.DefaultIfEmpty()
                          join I in dbContext.ventadetalle on new { idVenta = A.v_IdVenta, eliminado = 0 } equals new { idVenta = I.v_IdVenta, eliminado = I.i_Eliminado.Value } into I_join
                          from I in I_join.DefaultIfEmpty()
                          join J in dbContext.productodetalle on new { idProductoDetalle = I.v_IdProductoDetalle, eliminado = 0 } equals new { idProductoDetalle = J.v_IdProductoDetalle, eliminado = J.i_Eliminado.Value } into J_join
                          from J in J_join.DefaultIfEmpty()
                          join K in dbContext.producto on new { idProducto = J.v_IdProducto, eliminado = 0 } equals new { idProducto = K.v_IdProducto, eliminado = K.i_Eliminado.Value } into K_join
                          from K in K_join.DefaultIfEmpty()
                          join G in dbContext.datahierarchy on new { idIgv = A.i_IdIgv.Value, eliminado = 0, Grupo = 27 } equals new { idIgv = G.i_ItemId, eliminado = G.i_IsDeleted.Value, Grupo = G.i_GroupId } into G_join
                          from G in G_join.DefaultIfEmpty()
                          join H in dbContext.documento on new { TipoDoc = A.i_IdTipoDocumento.Value, eliminado = 0 } equals new { TipoDoc = H.i_CodigoDocumento, eliminado = H.i_Eliminado.Value } into H_join
                          from H in H_join.DefaultIfEmpty()

                          where (A.i_Eliminado == 0)
                           && (A.t_FechaRegistro >= pstrt_FechaRegistroIni
                          && A.t_FechaRegistro <= pstrt_FechaRegistroFin)
                          && (A.i_IdTipoVenta == pintIdTipoventa || pintIdTipoventa == -1)
                          && (I.v_NroCuenta == pstrt_NroCuenta || pstrt_NroCuenta == "")
                          && (A.i_IdTipoDocumento == pintIdTipoDocumento || pintIdTipoDocumento == -1)
                          && H.i_UsadoDocumentoContable == 1 && A.i_IdEstado == 1
                          //  orderby pstrt_Orden
                          select new ReporteRegistroVentaContable
                          {


                              Correlativo = A.v_Mes.Trim() + A.v_Correlativo.Trim(),
                              FechaRegistro = A.t_FechaRegistro.Value, // Fecha Emisión
                              IdTipoDocumento = A.i_IdTipoDocumento.Value,
                              SerieDocumento = A.v_SerieDocumento,
                              CorrelativoDocumento = A.v_CorrelativoDocumento.Trim(),
                              NombreCliente = A.i_IdEstado == 1 ? A.v_NombreClienteTemporal == "" ? (B.v_ApePaterno + " " + B.v_ApeMaterno + " " + B.v_PrimerNombre + " " + B.v_SegundoNombre + " " + B.v_RazonSocial).Trim() : (B.v_ApePaterno + " " + B.v_ApeMaterno + " " + B.v_PrimerNombre + " " + B.v_SegundoNombre + " " + A.v_NombreClienteTemporal).Trim() : "**** ANULADO ****",
                              DocIdentidad = A.i_IdEstado == 1 ? B == null ? 0 : B.v_IdCliente == "N002-CL000000000" ? 1 : B.i_IdTipoIdentificacion.Value : 0,
                              NroDocCliente = A.i_IdEstado == 1 ? B == null ? "0" : B.v_IdCliente == "N002-CL000000000" ? "00000000" : B.v_NroDocIdentificacion : "0",
                              TipoCambio = A.i_IdEstado == 1 ? A.d_TipoCambio.Value : 0,
                              NombreMoneda = F == null ? "" : F.v_Value2,
                              IgvNombre = G == null ? "" : G.v_Value1,
                              Documento = H == null ? "" : H.v_Nombre,
                              FechaRegistroRef = A.t_FechaRef.Value,
                              idTipoDocumentoRef = A.i_IdTipoDocumentoRef.Value,
                              SerieDocumentoRef = A.v_SerieDocumentoRef,
                              CorrelativoDocumentoRef = A.v_CorrelativoDocumentoRef,
                              TipoDocumento = "",
                              LlaveOrdenar = "",
                              GrupoLlave = pstr_grupollave == "SERIEDOCUMENTO" ? pstr_Nombregrupollave + " " + A.v_SerieDocumento : "",
                              GrupoLlaveNombre = "",
                              IdCabecera = A.v_IdVenta,
                              IdDetalle = I.v_IdVentaDetalle,
                              i_idEstado = A.i_IdEstado.Value,
                              TipoVenta = A.i_IdTipoVenta.Value,
                              TipoOperacionCabecera = A.i_IdTipoOperacion == null ? 0 : A.i_IdTipoOperacion,
                              TipoOperacionGrilla = I == null ? 0 : I.i_IdTipoOperacion == null ? 0 : I.i_IdTipoOperacion.Value,
                              IgvCabecera = A.d_IGV.Value == null ? 0 : A.d_IGV.Value,
                              ValorVenta = A.d_ValorVenta.Value == null ? 0 : A.d_ValorVenta.Value,
                              ValorVentaDetalle = I == null ? 0 : I.d_ValorVenta.Value == null ? 0 : I.d_ValorVenta.Value,
                              IdMoneda = A.i_IdMoneda == null ? 0 : A.i_IdMoneda.Value,
                              AnticipioDetalle = I == null ? 0 : I.i_Anticipio == null ? 0 : I.i_Anticipio.Value,
                              //OtrosTributosC = A.d_total_otrostributos == null ? 0 : A.d_total_otrostributos.Value,
                              //OtrosTributosD = I == null ? 0 : I.d_otrostributos == null ? 0 : I.d_otrostributos.Value,
                              ISC = A.d_total_isc == null ? 0 : A.d_total_isc.Value,
                              Total = A.d_Total.Value == null ? 0 : A.i_IdEstado == 0 ? 0 : A.d_Total.Value,
                              FechaVencimiento = A.t_FechaVencimiento.Value,
                              TipoPersona = B == null ? 0 : B.i_IdTipoPersona == null ? 0 : B.i_IdTipoPersona.Value,
                              CorrelativoPle = A.v_Mes.Trim() + A.v_Correlativo.Trim().Substring(0, 2) + A.v_Correlativo.Trim().Substring(3, 8),
                              NroDocumentoAlPle = A.v_CorrelativoDocumentoFin == null ? "" : A.v_CorrelativoDocumentoFin.Trim().Substring(2, 6),
                              NroDocAl = A.v_CorrelativoDocumentoFin == null ? "" : A.v_CorrelativoDocumentoFin.Trim(),
                              SiglasMoneda = A.i_IdMoneda != -1 ? F.v_Field.Trim() : "",
                              IdCliente = B.v_IdCliente,
                              ApePaterno = B.v_ApePaterno,
                              ApeMaterno = B.v_ApeMaterno,
                              PrimerNombre = B.v_PrimerNombre,
                              SegundoNombre = B.v_SegundoNombre,
                              IscDetalle = I == null ? 0 : I.d_isc ?? 0,
                              TipoOperacionGrilla2Dig = I.i_IdTipoOperacion ?? 0,
                              IgvDetalle = I.d_Igv ?? 0,
                              DocumentoInverso = H.i_UsadoDocumentoInverso ?? 0,

                          }).ToList();

                //2.- Query para hacer càculos en memoria 
                //var ListaFinal = query.GroupBy(x => x.IdCabecera).Select(x => x.First()).ToList();
                var Temporal1 = query.ToList().GroupBy(x => x.IdCabecera).Where(y => y.Any(x => x.TipoOperacionCabecera != (int)TipoOperacionNueva.Mixta)).Select(x => x.First()).OrderBy(o => o.TipoVenta).ThenBy(p => p.Correlativo).ToList();
                var Temporal2 = query.ToList().Where(y => y.TipoOperacionCabecera == (int)TipoOperacionNueva.Mixta).OrderBy(o => o.TipoVenta).ThenBy(p => p.Correlativo).ToList();
                ListaFinal = Temporal1.Concat(Temporal2).ToList();
                int index = 1;
                foreach (var item in ListaFinal)
                {
                    if (item.CorrelativoDocumento == "00176379")
                    {
                        string h = "";
                    }
                    ReporteRegistroVentaContable objReporte = new ReporteRegistroVentaContable();
                    objReporte = item;
                    if (item.DocumentoInverso == 0)
                    {

                        objReporte.Base_Impon_Oper_Grav = item.i_idEstado == 1 ? item.TipoOperacionCabecera <= (int)TipoOperacionNueva.Exportacion ? item.ValorVenta : item.ValorVentaDetalle : 0;
                        objReporte.ISC = item.i_idEstado == 1 ? item.TipoOperacionCabecera <= (int)TipoOperacionNueva.Exportacion ? item.ISC : item.IscDetalle : 0;
                        objReporte.Igv_Y_O_Ipm = item.i_idEstado == 1 ? item.TipoOperacionCabecera <= (int)TipoOperacionNueva.Exportacion ? item.IgvCabecera : item.IgvDetalle : 0;

                    }
                    else
                    {


                        objReporte.Base_Impon_Oper_Grav = item.i_idEstado == 1 ? item.TipoOperacionCabecera <= (int)TipoOperacionNueva.Exportacion ? item.ValorVenta * -1 : item.ValorVentaDetalle * -1 : 0;
                        objReporte.ISC = item.i_idEstado == 1 ? item.TipoOperacionCabecera <= (int)TipoOperacionNueva.Exportacion ? item.ISC * -1 : item.IscDetalle * -1 : 0;
                        objReporte.Igv_Y_O_Ipm = item.i_idEstado == 1 ? item.TipoOperacionCabecera <= (int)TipoOperacionNueva.Exportacion ? item.IgvCabecera * -1 : item.IgvDetalle * -1 : 0;
                    }

                    objReporte.TipoOperacionCabecera = int.Parse(item.TipoOperacionCabecera.ToString().Substring(0, 1));
                    index = index + 1;
                    objReporte.TipoOperacionGrilla = int.Parse(item.TipoOperacionGrilla.ToString().Substring(0, 1));
                    Reporte.Add(objReporte);
                }
                Reporte = Reporte.OrderBy(c => c.IdTipoDocumento).ThenBy(l => l.FechaRegistro).ThenBy(l => l.SerieDocumento).ThenBy(l => l.CorrelativoDocumento).ToList();
                return Reporte;
                #endregion


            }
            catch (Exception ex)
            {
                objOperatioResult.Success = 0;
                return null;
            }
        }



        public List<ReporteRegistroVentaContable> ReporteVentasConsolidado(ref OperationResult objOperatioResult, int pstri_IdEstablecimiento, DateTime? pstrt_FechaRegistroIni, DateTime? pstrt_FechaRegistroFin, int pintIdMoneda, string pstrt_Orden, int pintIdTipoventa, string pstrt_NroCuenta, int pintIdTipoDocumento, string pstr_grupollave, string pstr_Nombregrupollave)
        {
            //mon.IsActive = true;
            try
            {
                SAMBHSEntitiesModelWin dbContext = new SAMBHSEntitiesModelWin();

                List<ReporteRegistroVentaContable> Reporte = new List<ReporteRegistroVentaContable>();
                List<ReporteRegistroVentaContable> query = new List<ReporteRegistroVentaContable>();



                var ListaTipoOperacion = (from a in dbContext.datahierarchy
                                          where a.i_GroupId == 35 && a.i_IsDeleted == 0
                                          select new
                                          {
                                              ItemId = a.i_ItemId,
                                              CodigoSunat = a.v_Value2,
                                          }).ToList().AsQueryable().Select(x => new TipoOperacionSunat
                                          {
                                              ItemId = x.ItemId,
                                              CodigoSunat = x.CodigoSunat.Length >= 2 ? int.Parse(x.CodigoSunat.Substring(0, 2)) : -1,
                                              //CodigoSunat = x.CodigoSunat.Length >= 2 ? int.Parse(x.CodigoSunat.Substring(0, 1)) : -1,
                                          }).ToList();
                #region Query

                //1. query para obtener toda la data filtrada por los parametros


                //query =
                //         (from A in dbContext.venta
                //          join B in dbContext.cliente on new { idCliente = A.v_IdCliente, eliminado = 0, Flag = "C" } equals new { idCliente = B.v_IdCliente, eliminado = B.i_Eliminado.Value, Flag = B.v_FlagPantalla } into B_join
                //          from B in B_join.DefaultIfEmpty()
                //          join F in dbContext.datahierarchy on new { idMoneda = A.i_IdMoneda.Value, Grupo = 18, eliminado = 0 } equals new { idMoneda = F.i_ItemId, Grupo = F.i_GroupId, eliminado = F.i_IsDeleted.Value } into F_join
                //          from F in F_join.DefaultIfEmpty()
                //          join I in dbContext.ventadetalle on new { idVenta = A.v_IdVenta, eliminado = 0 } equals new { idVenta = I.v_IdVenta, eliminado = I.i_Eliminado.Value } into I_join
                //          from I in I_join.DefaultIfEmpty()
                //          join J in dbContext.productodetalle on new { idProductoDetalle = I.v_IdProductoDetalle, eliminado = 0 } equals new { idProductoDetalle = J.v_IdProductoDetalle, eliminado = J.i_Eliminado.Value } into J_join
                //          from J in J_join.DefaultIfEmpty()
                //          join K in dbContext.producto on new { idProducto = J.v_IdProducto, eliminado = 0 } equals new { idProducto = K.v_IdProducto, eliminado = K.i_Eliminado.Value } into K_join
                //          from K in K_join.DefaultIfEmpty()
                //          join G in dbContext.datahierarchy on new { idIgv = A.i_IdIgv.Value, eliminado = 0, Grupo = 27 } equals new { idIgv = G.i_ItemId, eliminado = G.i_IsDeleted.Value, Grupo = G.i_GroupId } into G_join
                //          from G in G_join.DefaultIfEmpty()
                //          join H in dbContext.documento on new { TipoDoc = A.i_IdTipoDocumento.Value, eliminado = 0 } equals new { TipoDoc = H.i_CodigoDocumento, eliminado = H.i_Eliminado.Value } into H_join
                //          from H in H_join.DefaultIfEmpty()
                //          //join L in dbContext.datahierarchy on new { Grupo = 35, tipoOperacion = A.i_IdTipoOperacion.Value, eliminado = 0 } equals new { Grupo= L.i_GroupId ,tipoOperacion=L.i_ItemId ,eliminado=L.i_IsDeleted.Value   } into L_join
                //          //from L in L_join.DefaultIfEmpty ()
                //          where (A.i_Eliminado == 0)
                //           && (A.t_FechaRegistro >= pstrt_FechaRegistroIni
                //          && A.t_FechaRegistro <= pstrt_FechaRegistroFin)
                //          && (A.i_IdTipoVenta == pintIdTipoventa || pintIdTipoventa == -1)
                //          && (I.v_NroCuenta == pstrt_NroCuenta || pstrt_NroCuenta == "")
                //          && (A.i_IdTipoDocumento == pintIdTipoDocumento || pintIdTipoDocumento == -1)
                //          && H.i_UsadoDocumentoContable == 1

                //          //  orderby pstrt_Orden
                //          select new
                //          {

                //              Correlativo = A.v_Mes.Trim() + A.v_Correlativo.Trim(),
                //              FechaRegistro = A.t_FechaRegistro.Value, // Fecha Emisión
                //              IdTipoDocumento = A.i_IdTipoDocumento.Value,
                //              SerieDocumento = A.v_SerieDocumento,
                //              CorrelativoDocumento = A.v_CorrelativoDocumento.Trim(),
                //              NombreCliente = A.i_IdEstado == 1 ? A.v_NombreClienteTemporal == "" ? (B.v_ApePaterno + " " + B.v_ApeMaterno + " " + B.v_PrimerNombre + " " + B.v_SegundoNombre + " " + B.v_RazonSocial).Trim() : (B.v_ApePaterno + " " + B.v_ApeMaterno + " " + B.v_PrimerNombre + " " + B.v_SegundoNombre + " " + A.v_NombreClienteTemporal).Trim() : "**** ANULADO ****",
                //              DocIdentidad = A.i_IdEstado == 1 ? B == null ? 0 : B.v_IdCliente == "N002-CL000000000" ? 1 : B.i_IdTipoIdentificacion.Value : 0,
                //              NroDocCliente = A.i_IdEstado == 1 ? B == null ? "0" : B.v_IdCliente == "N002-CL000000000" ? "00000000" : B.v_NroDocIdentificacion : "0",
                //              TipoCambio = A.i_IdEstado == 1 ? A.d_TipoCambio.Value : 0,
                //              NombreMoneda = F == null ? "" : F.v_Value2,
                //              IgvNombre = G == null ? "" : G.v_Value1,
                //              Documento = H == null ? "" : H.v_Nombre,
                //              FechaRegistroRef = A.t_FechaRef.Value,
                //              idTipoDocumentoRef = A.i_IdTipoDocumentoRef.Value,
                //              SerieDocumentoRef = A.v_SerieDocumentoRef,
                //              CorrelativoDocumentoRef = A.v_CorrelativoDocumentoRef,
                //              TipoDocumento = "",
                //              LlaveOrdenar = "",
                //              GrupoLlave = pstr_grupollave == "SERIEDOCUMENTO" ? pstr_Nombregrupollave + " " + A.v_SerieDocumento : "",
                //              GrupoLlaveNombre = "",
                //              IdCabecera = A.v_IdVenta,
                //              IdDetalle = I.v_IdVentaDetalle,
                //              i_idEstado = A.i_IdEstado.Value,
                //              TipoVenta = A.i_IdTipoVenta.Value,


                //              //TipoOperacionCabecera = A.i_IdTipoOperacion == null ? 0 : A.i_IdTipoOperacion,
                //              //TipoOperacionGrilla = I == null ? 0 : I.i_IdTipoOperacion == null ? 0 : I.i_IdTipoOperacion.Value,
                //              //TipoOperacionGrilla2Dig = I == null ? 0 : I.i_IdTipoOperacion == null ? 0 : I.i_IdTipoOperacion.Value,

                //              TipoOperacionCabecera = A.i_IdTipoOperacion == null ? 0 : A.i_IdTipoOperacion,
                //              TipoOperacionGrilla = I == null ? 0 : I.i_IdTipoOperacion == null ? 0 : I.i_IdTipoOperacion.Value,
                //              TipoOperacionGrilla2Dig = I == null ? 0 : I.i_IdTipoOperacion == null ? 0 : I.i_IdTipoOperacion.Value,


                //              IgvCabecera = A.d_IGV.Value == null ? 0 : A.d_IGV.Value,
                //              ValorVenta = A.d_ValorVenta.Value == null ? 0 : A.d_ValorVenta.Value,
                //              ValorVentaDetalle = I == null ? 0 : I.d_ValorVenta.Value == null ? 0 : I.d_ValorVenta.Value,
                //              IdMoneda = A.i_IdMoneda == null ? 0 : A.i_IdMoneda.Value,
                //              AnticipioDetalle = I == null ? 0 : I.i_Anticipio == null ? 0 : I.i_Anticipio.Value,
                //              OtrosTributosC = A.d_total_otrostributos == null ? 0 : A.d_total_otrostributos.Value,
                //              OtrosTributosD = I == null ? 0 : I.d_otrostributos == null ? 0 : I.d_otrostributos.Value,
                //              ISC = A.d_total_isc == null ? 0 : A.d_total_isc.Value,
                //              Total = A.d_Total.Value == null ? 0 : A.i_IdEstado == 0 ? 0 : A.d_Total.Value,

                //              FechaVencimiento = A.i_IdTipoDocumento == 14 ? A.t_FechaVencimiento : null,
                //              TipoPersona = B == null ? 0 : B.i_IdTipoPersona == null ? 0 : B.i_IdTipoPersona.Value,
                //              CorrelativoPle = A.v_Mes.Trim() + A.v_Correlativo.Trim().Substring(0, 2) + A.v_Correlativo.Trim().Substring(3, 8),
                //              NroDocumentoAlPle = A.v_CorrelativoDocumentoFin == null ? "" : A.v_CorrelativoDocumentoFin.Trim().Substring(2, 6),
                //              ValorFobEmbarcado = A.d_ValorFOB == null ? 0 : pintIdMoneda == (int)Currency.Soles ? A.i_IdMoneda == (int)Currency.Soles ? A.d_ValorFOB.Value : A.d_ValorFOB.Value * A.d_TipoCambio.Value : A.i_IdMoneda == (int)Currency.Soles ? A.d_ValorFOB.Value / A.d_TipoCambio.Value : A.d_ValorFOB.Value,

                //              NroDocAl = A.v_CorrelativoDocumentoFin == null ? "" : A.v_CorrelativoDocumentoFin.Trim(),
                //              SiglasMoneda = A.i_IdMoneda != -1 ? F.v_Field.Trim() : "",
                //              IdCliente = B.v_IdCliente,
                //              IgvDetalle = I.d_Igv ?? 0,

                //          }).ToList ().Select (l=> new 

                //           {
                //             var TipoOperacionGrillaFinal = ListaTipoOperacion.Where(x => x.ItemId == l.TipoOperacionGrilla2Dig).FirstOrDefault();
                //             return   new ReporteRegistroVentaContable
                //           {

                //               Correlativo = l.Correlativo,
                //               FechaRegistro = l.FechaRegistro,
                //               IdTipoDocumento = l.IdTipoDocumento,
                //               SerieDocumento = l.SerieDocumento,
                //               CorrelativoDocumento = l.CorrelativoDocumento,
                //               NombreCliente = l.NombreCliente,
                //               DocIdentidad = l.DocIdentidad,
                //               NroDocCliente = l.NroDocCliente,
                //               TipoCambio = l.TipoCambio,
                //               NombreMoneda = l.NombreMoneda,
                //               IgvNombre = l.IgvNombre,
                //               Documento = l.Documento,
                //               FechaRegistroRef = l.FechaRegistroRef,
                //               idTipoDocumentoRef = l.idTipoDocumentoRef,
                //               SerieDocumentoRef = l.SerieDocumentoRef,
                //               CorrelativoDocumentoRef = l.CorrelativoDocumentoRef,
                //               TipoDocumento = l.TipoDocumento,
                //               LlaveOrdenar = l.LlaveOrdenar,
                //               GrupoLlave = l.GrupoLlave,
                //               GrupoLlaveNombre = l.GrupoLlaveNombre,
                //               IdCabecera = l.IdCabecera,
                //               IdDetalle = l.IdDetalle,
                //               i_idEstado = l.i_idEstado,
                //               TipoVenta = l.TipoVenta,
                //               //TipoOperacionCabecera = l.TipoOperacionCabecera,
                //               //TipoOperacionGrilla = ListaTipoOperacion.Where(x => x.ItemId == l.TipoOperacionGrilla2Dig).Any() ? ListaTipoOperacion.Where(x => x.ItemId == l.TipoOperacionGrilla2Dig).FirstOrDefault().CodigoSunat : 0,
                //               TipoOperacionCabecera = l.TipoOperacionCabecera,
                //               TipoOperacionGrilla = TipoOperacionGrillaFinal != null ? TipoOperacionGrillaFinal.CodigoSunat : 0,
                //               TipoOperacionGrilla2Dig = TipoOperacionGrillaFinal != null ? int.Parse(TipoOperacionGrillaFinal.CodigoSunat.ToString().Substring(0, 1)) : 0,
                //               IgvCabecera = l.IgvCabecera,
                //               ValorVenta = l.ValorVenta,
                //               ValorVentaDetalle = l.ValorVentaDetalle,
                //               IdMoneda = l.IdMoneda,
                //               AnticipioDetalle = l.AnticipioDetalle,
                //               OtrosTributosC = l.OtrosTributosC,
                //               OtrosTributosD = l.OtrosTributosD,
                //               ISC = l.ISC,
                //               Total = l.Total,
                //               // TipoOperacionNoGravadaGrilla = l.TipoOperacionNoGravadaGrilla,
                //               FechaVencimiento = l.FechaVencimiento,
                //               TipoPersona = l.TipoPersona,
                //               CorrelativoPle = l.CorrelativoPle,
                //               NroDocumentoAlPle = l.NroDocumentoAlPle,
                //               ValorFobEmbarcado = l.ValorFobEmbarcado,
                //               // TipoCambioCalculo = l.TipoCambioCalculo,
                //               NroDocAl = l.NroDocAl,
                //               SiglasMoneda = l.SiglasMoneda,
                //               IdCliente = l.IdCliente,
                //               IgvDetalle = l.IgvDetalle,
                //           };

                //          }).ToList();



                query =
                        (from A in dbContext.venta
                         join B in dbContext.cliente on new { idCliente = A.v_IdCliente, eliminado = 0, Flag = "C" } equals new { idCliente = B.v_IdCliente, eliminado = B.i_Eliminado.Value, Flag = B.v_FlagPantalla } into B_join
                         from B in B_join.DefaultIfEmpty()
                         join F in dbContext.datahierarchy on new { idMoneda = A.i_IdMoneda.Value, Grupo = 18, eliminado = 0 } equals new { idMoneda = F.i_ItemId, Grupo = F.i_GroupId, eliminado = F.i_IsDeleted.Value } into F_join
                         from F in F_join.DefaultIfEmpty()
                         join I in dbContext.ventadetalle on new { idVenta = A.v_IdVenta, eliminado = 0 } equals new { idVenta = I.v_IdVenta, eliminado = I.i_Eliminado.Value } into I_join
                         from I in I_join.DefaultIfEmpty()
                         join J in dbContext.productodetalle on new { idProductoDetalle = I.v_IdProductoDetalle, eliminado = 0 } equals new { idProductoDetalle = J.v_IdProductoDetalle, eliminado = J.i_Eliminado.Value } into J_join
                         from J in J_join.DefaultIfEmpty()
                         join K in dbContext.producto on new { idProducto = J.v_IdProducto, eliminado = 0 } equals new { idProducto = K.v_IdProducto, eliminado = K.i_Eliminado.Value } into K_join
                         from K in K_join.DefaultIfEmpty()
                         join G in dbContext.datahierarchy on new { idIgv = A.i_IdIgv.Value, eliminado = 0, Grupo = 27 } equals new { idIgv = G.i_ItemId, eliminado = G.i_IsDeleted.Value, Grupo = G.i_GroupId } into G_join
                         from G in G_join.DefaultIfEmpty()
                         join H in dbContext.documento on new { TipoDoc = A.i_IdTipoDocumento.Value, eliminado = 0 } equals new { TipoDoc = H.i_CodigoDocumento, eliminado = H.i_Eliminado.Value } into H_join
                         from H in H_join.DefaultIfEmpty()
                         where (A.i_Eliminado == 0)
                          && (A.t_FechaRegistro >= pstrt_FechaRegistroIni
                         && A.t_FechaRegistro <= pstrt_FechaRegistroFin)
                         && (A.i_IdTipoVenta == pintIdTipoventa || pintIdTipoventa == -1)
                         && (I.v_NroCuenta == pstrt_NroCuenta || pstrt_NroCuenta == "")
                         && (A.i_IdTipoDocumento == pintIdTipoDocumento || pintIdTipoDocumento == -1)
                         && H.i_UsadoDocumentoContable == 1
                         && !string.IsNullOrEmpty(A.v_SerieDocumento) && !string.IsNullOrEmpty(A.v_CorrelativoDocumento)
                         select new
                         {

                             Correlativo = A.v_Mes.Trim() + A.v_Correlativo.Trim(),
                             FechaRegistro = A.t_FechaRegistro.Value, // Fecha Emisión
                             IdTipoDocumento = A.i_IdTipoDocumento.Value,
                             SerieDocumento = A.v_SerieDocumento,
                             CorrelativoDocumento = A.v_CorrelativoDocumento.Trim(),
                             NombreCliente = A.i_IdEstado == 1 ? string.IsNullOrEmpty(A.v_NombreClienteTemporal) ? (B.v_ApePaterno + " " + B.v_ApeMaterno + " " + B.v_PrimerNombre + " " + B.v_SegundoNombre + " " + B.v_RazonSocial).Trim() : (B.v_ApePaterno + " " + B.v_ApeMaterno + " " + B.v_PrimerNombre + " " + B.v_SegundoNombre + " " + A.v_NombreClienteTemporal).Trim() : "**** ANULADO ****",
                             DocIdentidad = A.i_IdEstado == 1 ? B == null ? 0 : B.v_IdCliente == "N002-CL000000000" ? 1 : B.i_IdTipoIdentificacion.Value : 0,
                             NroDocCliente = A.i_IdEstado == 1 ? B == null ? "0" : B.v_IdCliente == "N002-CL000000000" ? "00000000" : B.v_NroDocIdentificacion : "0",
                             TipoCambio = A.i_IdEstado == 1 ? A.d_TipoCambio.Value : 0,
                             NombreMoneda = F == null ? "" : F.v_Value2,
                             IgvNombre = G == null ? "" : G.v_Value1,
                             Documento = H == null ? "" : H.v_Nombre,
                             FechaRegistroRef = A.t_FechaRef.Value,
                             idTipoDocumentoRef = A.i_IdTipoDocumentoRef.Value,
                             SerieDocumentoRef = A.v_SerieDocumentoRef,
                             CorrelativoDocumentoRef = A.v_CorrelativoDocumentoRef,
                             TipoDocumento = "",
                             LlaveOrdenar = "",
                             GrupoLlave = pstr_grupollave == "SERIEDOCUMENTO" ? pstr_Nombregrupollave + " " + A.v_SerieDocumento : "",
                             GrupoLlaveNombre = "",
                             IdCabecera = A.v_IdVenta,
                             IdDetalle = I.v_IdVentaDetalle,
                             i_idEstado = A.i_IdEstado.Value,
                             TipoVenta = A.i_IdTipoVenta.Value,
                             TipoOperacionCabecera = A.i_IdTipoOperacion == null ? 0 : A.i_IdTipoOperacion,
                             TipoOperacionGrilla = I == null ? 0 : I.i_IdTipoOperacion == null ? 0 : I.i_IdTipoOperacion.Value,
                             TipoOperacionGrilla2Dig = I == null ? 0 : I.i_IdTipoOperacion == null ? 0 : I.i_IdTipoOperacion.Value,
                             IgvCabecera = A.d_IGV.Value == null ? 0 : A.d_IGV.Value,
                             ValorVenta = A.d_ValorVenta.Value == null ? 0 : A.d_ValorVenta.Value,
                             ValorVentaDetalle = I == null ? 0 : I.d_ValorVenta.Value == null ? 0 : I.d_ValorVenta.Value,
                             IdMoneda = A.i_IdMoneda == null ? 0 : A.i_IdMoneda.Value,
                             AnticipioDetalle = I == null ? 0 : I.i_Anticipio == null ? 0 : I.i_Anticipio.Value,
                             OtrosTributosC = A.d_total_otrostributos == null ? 0 : A.d_total_otrostributos.Value,
                             OtrosTributosD = I == null ? 0 : I.d_otrostributos == null ? 0 : I.d_otrostributos.Value,
                             ISC = A.d_total_isc == null ? 0 : A.d_total_isc.Value,
                             Total = A.d_Total.Value == null ? 0 : A.i_IdEstado == 0 ? 0 : A.d_Total.Value,
                             FechaVencimiento = A.i_IdTipoDocumento == 14 ? A.t_FechaVencimiento : null,
                             TipoPersona = B == null ? 0 : B.i_IdTipoPersona == null ? 0 : B.i_IdTipoPersona.Value,
                             CorrelativoPle = A.v_Mes.Trim() + A.v_Correlativo.Trim().Substring(0, 2) + A.v_Correlativo.Trim().Substring(3, 8),
                             NroDocumentoAlPle = A.v_CorrelativoDocumentoFin == null ? "" : A.v_CorrelativoDocumentoFin.Trim().Substring(2, 6),
                             ValorFobEmbarcado = A.d_ValorFOB == null ? 0 : pintIdMoneda == (int)Currency.Soles ? A.i_IdMoneda == (int)Currency.Soles ? A.d_ValorFOB.Value : A.d_ValorFOB.Value * A.d_TipoCambio.Value : A.i_IdMoneda == (int)Currency.Soles ? A.d_ValorFOB.Value / A.d_TipoCambio.Value : A.d_ValorFOB.Value,
                             NroDocAl = A.v_CorrelativoDocumentoFin == null ? "" : A.v_CorrelativoDocumentoFin.Trim(),
                             SiglasMoneda = A.i_IdMoneda != -1 ? F.v_Field.Trim() : "",
                             IdCliente = B.v_IdCliente,
                             IgvDetalle = I.d_Igv ?? 0,
                             v_IdProductoDetalle = I.v_IdProductoDetalle,
                             Cuenta = I == null ? "" : I.v_NroCuenta,
                             v_IdVenta = A.v_IdVenta,
                             PrecioVentaDetalle = I == null ? 0 : I.d_PrecioVenta ?? 0,


                         }).ToList().Select(l =>
                         {
                             var TipoOperacionGrillaFinal = ListaTipoOperacion.Where(x => x.ItemId == l.TipoOperacionGrilla2Dig).FirstOrDefault();

                             return new ReporteRegistroVentaContable
                             {

                                 Correlativo = l.Correlativo,
                                 FechaRegistro = l.FechaRegistro,
                                 IdTipoDocumento = l.IdTipoDocumento,
                                 SerieDocumento = l.SerieDocumento,
                                 CorrelativoDocumento = l.CorrelativoDocumento,
                                 NombreCliente = l.NombreCliente,
                                 DocIdentidad = l.DocIdentidad,
                                 NroDocCliente = l.NroDocCliente,
                                 TipoCambio = l.TipoCambio,
                                 NombreMoneda = l.NombreMoneda,
                                 IgvNombre = l.IgvNombre,
                                 Documento = l.Documento,
                                 FechaRegistroRef = l.FechaRegistroRef,
                                 idTipoDocumentoRef = l.idTipoDocumentoRef,
                                 SerieDocumentoRef = l.SerieDocumentoRef,
                                 CorrelativoDocumentoRef = l.CorrelativoDocumentoRef,
                                 TipoDocumento = l.TipoDocumento,
                                 LlaveOrdenar = l.LlaveOrdenar,
                                 GrupoLlave = l.GrupoLlave,
                                 GrupoLlaveNombre = l.GrupoLlaveNombre,
                                 IdCabecera = l.IdCabecera,
                                 IdDetalle = l.IdDetalle,
                                 i_idEstado = l.i_idEstado,
                                 TipoVenta = l.TipoVenta,
                                 TipoOperacionCabecera = l.TipoOperacionCabecera,
                                 TipoOperacionGrilla = TipoOperacionGrillaFinal != null ? TipoOperacionGrillaFinal.CodigoSunat : 0,
                                 TipoOperacionGrilla2Dig = TipoOperacionGrillaFinal != null ? int.Parse(TipoOperacionGrillaFinal.CodigoSunat.ToString().Substring(0, 1)) : 0,    //l.TipoOperacionGrilla2Dig,
                                 //TipoOperacionGrilla2Dig = l.TipoOperacionGrilla2Dig, Antes de cambio diciembre
                                 IgvCabecera = l.IgvCabecera,
                                 ValorVenta = l.ValorVenta,
                                 ValorVentaDetalle = l.ValorVentaDetalle,
                                 IdMoneda = l.IdMoneda,
                                 AnticipioDetalle = l.AnticipioDetalle,
                                 //OtrosTributosC = l.OtrosTributosC,
                                 //OtrosTributosD = l.OtrosTributosD,
                                 ISC = l.ISC,
                                 Total = l.Total,

                                 FechaVencimiento = l.FechaVencimiento,
                                 TipoPersona = l.TipoPersona,
                                 CorrelativoPle = l.CorrelativoPle,
                                 NroDocumentoAlPle = l.NroDocumentoAlPle,
                                 ValorFobEmbarcado = l.ValorFobEmbarcado,

                                 NroDocAl = l.NroDocAl,
                                 SiglasMoneda = l.SiglasMoneda,
                                 IdCliente = l.IdCliente,
                                 IgvDetalle = l.IgvDetalle,
                                 IdProductoDetalle = l.v_IdProductoDetalle,
                                 Cuenta = l.Cuenta,
                                 v_IdVenta = l.v_IdVenta,
                                 PrecioVentaDetalle = l.PrecioVentaDetalle,
                             };

                         }).ToList();

                //2.- Query para hacer càculos en memoria 
                var ListaFinal = query.GroupBy(x => x.IdCabecera).Select(x => x.First()).ToList().OrderBy(g => g.NroRegistro).ToList();
                int index = 1;
                foreach (var item in ListaFinal)
                {
                    ReporteRegistroVentaContable objReporte = new ReporteRegistroVentaContable();
                    objReporte = item;

                    //int TipoOperacionCabecera = -1;
                    //var TipoOperacionCab = ListaTipoOperacion.Where(x => x.ItemId == item.TipoOperacionCabecera).FirstOrDefault();
                    //if (TipoOperacionCab != null)
                    //{
                    //    TipoOperacionCabecera = TipoOperacionCab.CodigoSunat;
                    //}
                    //item.TipoOperacionGrilla = item.TipoOperacionGrilla.ToString().Length >= 2 ? int.Parse(item.TipoOperacionGrilla.ToString().Substring(0, 1)) : item.TipoOperacionGrilla;


                    int TipoOperacionCabecera = -1;
                    var TipoOperacionCab = ListaTipoOperacion.Where(x => x.ItemId == item.TipoOperacionCabecera).FirstOrDefault();
                    if (TipoOperacionCab != null)
                    {
                        TipoOperacionCabecera = TipoOperacionCab.CodigoSunat;
                    }
                    //  item.TipoOperacionGrilla = item.TipoOperacionGrilla.ToString().Length >= 2 ? int.Parse(item.TipoOperacionGrilla.ToString().Substring(0, 1)) : item.TipoOperacionGrilla;
                    item.TipoOperacionGrilla = item.TipoOperacionGrilla.ToString().Length >= 2 ? int.Parse(item.TipoOperacionGrilla.ToString().Substring(0, 2)) : item.TipoOperacionGrilla;
                    objReporte.Valor_Export = item.i_idEstado == 1 ? CalcularValoresVentasSunat2016("VE", item.TipoVenta, TipoOperacionCabecera, item.TipoOperacionGrilla, item.IgvCabecera, item.IdTipoDocumento, item.ValorVenta, item.TipoCambio, pintIdMoneda, item.IdMoneda, query, item.IdCabecera) : 0;
                    objReporte.Base_Impon_Oper_GravConsolidado = item.i_idEstado == 1 ? (double)CalcularValoresVentasSunat2016("BI", item.TipoVenta, TipoOperacionCabecera, item.TipoOperacionGrilla, item.IgvCabecera, item.IdTipoDocumento, item.ValorVenta, item.TipoCambio, pintIdMoneda, item.IdMoneda, query, item.IdCabecera) : 0;
                    objReporte.Importe_Exonerada = item.i_idEstado == 1 ? CalcularValoresVentasSunat2016("E", item.TipoVenta, TipoOperacionCabecera, item.TipoOperacionGrilla, item.IgvCabecera, item.IdTipoDocumento, item.ValorVenta, item.TipoCambio, pintIdMoneda, item.IdMoneda, query, item.IdCabecera) : 0;
                    objReporte.Importe_Inafecta = item.i_idEstado == 1 ? CalcularValoresVentasSunat2016("I", item.TipoVenta, TipoOperacionCabecera, item.TipoOperacionGrilla, item.IgvCabecera, item.IdTipoDocumento, item.ValorVenta, item.TipoCambio, pintIdMoneda, item.IdMoneda, query, item.IdCabecera) : 0;
                    objReporte.Otros_Tributos_No_Forman_Parte_B = item.i_idEstado == 1 ? CalcularValoresVentasSunat2016("OT", item.TipoVenta, TipoOperacionCabecera, item.TipoOperacionGrilla, item.IgvCabecera, item.IdTipoDocumento, item.ValorVenta, item.TipoCambio, pintIdMoneda, item.IdMoneda, query, item.IdCabecera) : 0;
                    objReporte.Igv_Y_O_IpmConsolidado = item.i_idEstado == 1 ? (double)CalcularValoresVentasSunat2016("IGV", item.TipoVenta, TipoOperacionCabecera, item.TipoOperacionGrilla, item.IgvCabecera, item.IdTipoDocumento, item.ValorVenta, item.TipoCambio, pintIdMoneda, item.IdMoneda, query, item.IdCabecera) : 0;

                    //if (pintIdMoneda == (int)Currency.Soles && item.IdMoneda == (int)Currency.Soles)
                    //{
                    //    if (objReporte.IdTipoDocumento == (int)Documentos.NotaCredito)

                    //        objReporte.TotalConsolidado = (double)(item.Total * -1);
                    //    else
                    //        objReporte.TotalConsolidado = (double)item.Total;
                    //}
                    //else if (pintIdMoneda == (int)Currency.Soles && item.IdMoneda == (int)Currency.Dolares)
                    //{
                    //    if (objReporte.IdTipoDocumento == (int)Documentos.NotaCredito)

                    //        objReporte.TotalConsolidado = (double)(item.Total * item.TipoCambio * -1);
                    //    else
                    //        objReporte.TotalConsolidado = item.TipoCambio == 0 ? 0 : (double)(item.Total * item.TipoCambio);
                    //}
                    //else if (pintIdMoneda == (int)Currency.Dolares && item.IdMoneda == (int)Currency.Soles)
                    //{
                    //    if (objReporte.IdTipoDocumento == (int)Documentos.NotaCredito)

                    //        objReporte.TotalConsolidado = item.TipoCambio == 0 ? 0 : (double)(item.Total / item.TipoCambio * -1);
                    //    else
                    //        objReporte.TotalConsolidado = item.TipoCambio == 0 ? 0 : (double)(item.Total / item.TipoCambio);

                    //}
                    //else if (pintIdMoneda == (int)Currency.Dolares && item.IdMoneda == (int)Currency.Dolares)
                    //{
                    //    if (objReporte.IdTipoDocumento == (int)Documentos.NotaCredito)

                    //        objReporte.TotalConsolidado = (double)(item.Total * -1);
                    //    else
                    //        objReporte.TotalConsolidado = (double)item.Total;

                    //}



                    var detalles = query.Where(x => x.IdCabecera == item.v_IdVenta).ToList();
                    var sumadetalles = detalles.Any() ? detalles.Sum(o => o.PrecioVentaDetalle) : 0;
                    if (pintIdMoneda == (int)Currency.Soles && item.IdMoneda == (int)Currency.Soles)
                    {

                        if (_objDocumentoBL.DocumentoEsInverso(objReporte.IdTipoDocumento))
                        {
                            if ((TipoOperacionCabecera > 10 && TipoOperacionCabecera <= 19) || (TipoOperacionCabecera > 20 && TipoOperacionCabecera < 30) || (TipoOperacionCabecera > 30 && TipoOperacionCabecera < 40) || TipoOperacionCabecera == 50)
                            {
                                objReporte.TotalConsolidado = objReporte.i_idEstado == 1 ? double.Parse(Utils.Windows.DevuelveValorRedondeado(sumadetalles * -1, 2).ToString()) : 0;
                            }
                            else
                            {
                                objReporte.TotalConsolidado = double.Parse(Utils.Windows.DevuelveValorRedondeado(item.Total * -1, 2).ToString());
                            }
                        }
                        else
                        {
                            if ((TipoOperacionCabecera > 10 && TipoOperacionCabecera <= 19) || (TipoOperacionCabecera > 20 && TipoOperacionCabecera < 30) || (TipoOperacionCabecera > 30 && TipoOperacionCabecera < 40) || TipoOperacionCabecera == 50)
                            {
                                objReporte.TotalConsolidado = objReporte.i_idEstado == 1 ? double.Parse(Utils.Windows.DevuelveValorRedondeado(sumadetalles, 2).ToString()) : 0;
                            }
                            else
                            {
                                objReporte.TotalConsolidado = double.Parse(Utils.Windows.DevuelveValorRedondeado(item.Total, 2).ToString());
                            }
                        }
                    }
                    else if (pintIdMoneda == (int)Currency.Soles && item.IdMoneda == (int)Currency.Dolares)
                    {
                        if (_objDocumentoBL.DocumentoEsInverso(objReporte.IdTipoDocumento))
                        {
                            if ((TipoOperacionCabecera > 10 && TipoOperacionCabecera <= 19) || (TipoOperacionCabecera > 20 && TipoOperacionCabecera < 30) || (TipoOperacionCabecera > 30 && TipoOperacionCabecera < 40) || TipoOperacionCabecera == 50)
                            {
                                objReporte.TotalConsolidado = objReporte.i_idEstado == 1 ? double.Parse(Utils.Windows.DevuelveValorRedondeado((sumadetalles * item.TipoCambio) * -1, 2).ToString()) : 0;
                            }
                            else
                            {
                                objReporte.TotalConsolidado = double.Parse(Utils.Windows.DevuelveValorRedondeado((item.Total * item.TipoCambio) * -1, 2).ToString());
                            }
                        }
                        else
                        {
                            if ((TipoOperacionCabecera > 10 && TipoOperacionCabecera <= 19) || (TipoOperacionCabecera > 20 && TipoOperacionCabecera < 30) || (TipoOperacionCabecera > 30 && TipoOperacionCabecera < 40) || TipoOperacionCabecera == 50)
                            {
                                objReporte.TotalConsolidado = objReporte.i_idEstado == 1 ? item.TipoCambio == 0 ? 0 : double.Parse(Utils.Windows.DevuelveValorRedondeado(sumadetalles * item.TipoCambio, 2).ToString()) : 0;
                            }

                            else
                            {
                                objReporte.Total = item.TipoCambio == 0 ? 0 : Utils.Windows.DevuelveValorRedondeado(item.Total * item.TipoCambio, 2);
                            }
                        }
                    }
                    else if (pintIdMoneda == (int)Currency.Dolares && item.IdMoneda == (int)Currency.Soles)
                    {
                        if (_objDocumentoBL.DocumentoEsInverso(objReporte.IdTipoDocumento))
                        {
                            if ((TipoOperacionCabecera > 10 && TipoOperacionCabecera <= 19) || (TipoOperacionCabecera > 20 && TipoOperacionCabecera < 30) || (TipoOperacionCabecera > 30 && TipoOperacionCabecera < 40) || TipoOperacionCabecera == 50)
                            {
                                objReporte.TotalConsolidado = objReporte.i_idEstado == 1 ? item.TipoCambio == 0 ? 0 : double.Parse(Utils.Windows.DevuelveValorRedondeado((sumadetalles / item.TipoCambio) * -1, 2).ToString()) : 0;
                            }
                            else
                            {
                                objReporte.TotalConsolidado = item.TipoCambio == 0 ? 0 : double.Parse(Utils.Windows.DevuelveValorRedondeado((item.Total / item.TipoCambio) * -1, 2).ToString());
                            }
                        }
                        else
                        {
                            if ((TipoOperacionCabecera > 10 && TipoOperacionCabecera <= 19) || (TipoOperacionCabecera > 20 && TipoOperacionCabecera < 30) || (TipoOperacionCabecera > 30 && TipoOperacionCabecera < 40) || TipoOperacionCabecera == 50)
                            {
                                objReporte.TotalConsolidado = objReporte.i_idEstado == 1 ? item.TipoCambio == 0 ? 0 : double.Parse(Utils.Windows.DevuelveValorRedondeado(sumadetalles / item.TipoCambio, 2).ToString()) : 0;
                            }
                            else
                            {
                                objReporte.TotalConsolidado = item.TipoCambio == 0 ? 0 : double.Parse(Utils.Windows.DevuelveValorRedondeado(item.Total / item.TipoCambio, 2).ToString());
                            }
                        }

                    }
                    else if (pintIdMoneda == (int)Currency.Dolares && item.IdMoneda == (int)Currency.Dolares)
                    {
                        if (_objDocumentoBL.DocumentoEsInverso(objReporte.IdTipoDocumento))
                        {
                            if ((TipoOperacionCabecera > 10 && TipoOperacionCabecera <= 19) || (TipoOperacionCabecera > 20 && TipoOperacionCabecera < 30) || (TipoOperacionCabecera > 30 && TipoOperacionCabecera < 40) || TipoOperacionCabecera == 50)
                            {
                                objReporte.TotalConsolidado = objReporte.i_idEstado == 1 ? double.Parse(Utils.Windows.DevuelveValorRedondeado(sumadetalles * -1, 2).ToString()) : 0;
                            }
                            else
                            {
                                objReporte.TotalConsolidado = double.Parse(Utils.Windows.DevuelveValorRedondeado(item.Total * -1, 2).ToString());
                            }
                        }
                        else
                        {
                            if ((TipoOperacionCabecera > 10 && TipoOperacionCabecera <= 19) || (TipoOperacionCabecera > 20 && TipoOperacionCabecera < 30) || (TipoOperacionCabecera > 30 && TipoOperacionCabecera < 40) || TipoOperacionCabecera == 50)
                            {
                                objReporte.TotalConsolidado = objReporte.i_idEstado == 1 ? double.Parse(Utils.Windows.DevuelveValorRedondeado(sumadetalles, 2).ToString()) : 0;
                            }
                            else
                            {
                                objReporte.TotalConsolidado = double.Parse(Utils.Windows.DevuelveValorRedondeado(item.Total, 2).ToString());
                            }
                        }

                    }

                    objReporte.IgvNombre = "IGV Al  : " + item.IgvNombre;
                    objReporte.Documento = "TOTAL " + item.Documento.Trim() + " :";

                    objReporte.FechaRegistroRef = item.IdTipoDocumento == 6 || item.IdTipoDocumento == 7 || item.IdTipoDocumento == 8 || item.IdTipoDocumento == 87 || item.IdTipoDocumento == 88 || item.IdTipoDocumento == 97 || item.IdTipoDocumento == 98 ? item.FechaRegistroRef : null;
                    objReporte.TipoDocumentoRef = item.IdTipoDocumento == 6 || item.IdTipoDocumento == 7 || item.IdTipoDocumento == 8 || item.IdTipoDocumento == 87 || item.IdTipoDocumento == 88 || item.IdTipoDocumento == 97 || item.IdTipoDocumento == 98 ? item.idTipoDocumentoRef == -1 ? "" : item.idTipoDocumentoRef.ToString("000") : "";
                    objReporte.TipoDocumento = item.IdTipoDocumento.ToString("000");
                    objReporte.LlaveOrdenar = pstrt_Orden == "CORRELATIVODOCUMENTO" ? item.CorrelativoDocumento : "" + pstrt_Orden == "FECHAREGISTRO" ? item.FechaRegistro.ToString() : "" + pstrt_Orden == "IDDOCUMENTO" ? item.IdTipoDocumento.ToString() : "";

                    objReporte.GrupoLlaveNombre = pstr_Nombregrupollave;
                    objReporte.ISC = item.i_idEstado == 1 ? CalcularValoresVentasSunat2016("ISC", item.TipoVenta, item.TipoOperacionCabecera, item.TipoOperacionGrilla, item.IgvCabecera, item.IdTipoDocumento, item.ValorVenta, item.TipoCambio, pintIdMoneda, item.IdMoneda, ListaFinal.ToList(), item.IdCabecera) : 0;
                    objReporte.Index = index;
                    objReporte.IntCorrelativoDocumento = int.Parse(item.CorrelativoDocumento);

                    index = index + 1;
                    Reporte.Add(objReporte);
                }

                var OtrosDocumentos = Reporte.Where((x => x.IdTipoDocumento != (int)TiposDocumentos.BoletaVenta && x.IdTipoDocumento != (int)TiposDocumentos.Ticket)).ToList();

                var DocumentosConsolidados = Reporte.Where(x => (x.IdTipoDocumento == (int)TiposDocumentos.BoletaVenta || x.IdTipoDocumento == (int)TiposDocumentos.Ticket)).ToList().OrderBy(x => x.FechaRegistro).OrderBy(x => x.IdTipoDocumento).ThenBy(x => x.SerieDocumento).ThenBy(x => x.CorrelativoDocumento).ToList();

                string[] DatosPublicoGeneral = new string[5];
                DatosPublicoGeneral = PublicoGeneral();
                List<ReporteRegistroVentaContable> ListaAgrupados = new List<ReporteRegistroVentaContable>();
                List<ReporteRegistroVentaContable> ListaReporte = new List<ReporteRegistroVentaContable>();
                int i = 1;
                string Grupo = string.Empty, IgvNombre = string.Empty;
                int IdTipoDocumento = -1;
                DateTime Fecha = DateTime.Now;
                bool SeTomoCuenta = false;
                bool InicialAnulado = false;
                ReporteRegistroVentaContable objTemporal = new ReporteRegistroVentaContable();
                foreach (var subgrupo in DocumentosConsolidados)
                {

                    if (i == 1160)
                    {
                        string j = "";
                    }
                    int NumeroInicial = 0;

                    if (i == 1)
                    {

                        var agrupadosEstado = DocumentosConsolidados.Where(p => p.IdTipoDocumento == subgrupo.IdTipoDocumento).GroupBy(o => o.i_idEstado).ToList();
                        NumeroInicial = agrupadosEstado.Count();
                        string correlativoal = "";
                        bool Accedio = false;
                        foreach (var item in agrupadosEstado)
                        {
                            if (!Accedio)
                            {
                                if (item.FirstOrDefault().i_idEstado == 0)
                                {
                                    correlativoal = item.LastOrDefault().CorrelativoDocumento;

                                }
                                else
                                {
                                    ReporteRegistroVentaContable subI = agrupadosEstado.FirstOrDefault().FirstOrDefault();
                                    subI.IntCorrelativoDocumento = int.Parse(subI.CorrelativoDocumento);
                                    ListaAgrupados.Add(subI);
                                    ReporteRegistroVentaContable subF = agrupadosEstado.LastOrDefault().LastOrDefault();
                                    subF.IntCorrelativoDocumento = int.Parse(subF.CorrelativoDocumento);
                                    ListaAgrupados.Add(subF);


                                }
                                Accedio = true;
                            }
                        }
                        //subgrupo.IntCorrelativoDocumento = int.Parse(subgrupo.CorrelativoDocumento);
                        // ListaAgrupados.Add(subgrupo);
                        SeTomoCuenta = false;
                        objTemporal = subgrupo;

                        if (subgrupo.i_idEstado == 0)
                            InicialAnulado = true;
                        else
                            InicialAnulado = false;

                    }
                    else if (subgrupo.GrupoLlave == Grupo && subgrupo.IgvNombre == IgvNombre && subgrupo.IdTipoDocumento == IdTipoDocumento && subgrupo.FechaRegistro == Fecha && subgrupo.i_idEstado == 1)
                    {

                        if (InicialAnulado && !SeTomoCuenta)
                        {
                            ListaReporte.Add(objTemporal);
                            InicialAnulado = false;
                            ListaAgrupados = new List<ReporteRegistroVentaContable>();
                        }
                        subgrupo.IntCorrelativoDocumento = int.Parse(subgrupo.CorrelativoDocumento);
                        ListaAgrupados.Add(subgrupo);
                        SeTomoCuenta = false;

                    }
                    else if (subgrupo.GrupoLlave == Grupo && subgrupo.IgvNombre == IgvNombre && subgrupo.IdTipoDocumento == IdTipoDocumento && subgrupo.FechaRegistro == Fecha && subgrupo.i_idEstado == 0)
                    {

                        ReporteRegistroVentaContable objReporte = new ReporteRegistroVentaContable();
                        if (ListaAgrupados.Any())
                        {
                            objReporte = ListaAgrupados.FirstOrDefault();
                            objReporte.SerieDocumento = ListaAgrupados.FirstOrDefault().SerieDocumento.Trim();
                            objReporte.CorrelativoDocumento = ListaAgrupados.FirstOrDefault().CorrelativoDocumento.Trim();
                            objReporte.NroDocAl = ListaAgrupados.LastOrDefault().CorrelativoDocumento.Trim();
                            objReporte.DocIdentidad = 1;
                            objReporte.NroDocCliente = ListaAgrupados.FirstOrDefault().i_idEstado == 0 ? "00000000" : DatosPublicoGeneral[3];
                            objReporte.NombreCliente = ListaAgrupados.FirstOrDefault().i_idEstado == 0 ? "****A N U L A D O****" : DatosPublicoGeneral[2];
                            var Consolidados = DocumentosConsolidados.Where(x => x.IntCorrelativoDocumento >= ListaAgrupados.FirstOrDefault().IntCorrelativoDocumento && x.IntCorrelativoDocumento <= ListaAgrupados.LastOrDefault().IntCorrelativoDocumento && x.SerieDocumento == ListaAgrupados.FirstOrDefault().SerieDocumento && x.IdTipoDocumento == ListaAgrupados.FirstOrDefault().IdTipoDocumento).ToList();
                            objReporte.Valor_Export = Consolidados.Any() ? Consolidados.Sum(x => x.Valor_Export) : 0;

                            objReporte.Base_Impon_Oper_GravConsolidado = Consolidados.Any() ? (double)Consolidados.Sum(x => x.Base_Impon_Oper_GravConsolidado) : 0;
                            objReporte.Importe_Exonerada = Consolidados.Any() ? Consolidados.Sum(x => x.Importe_Exonerada) : 0;
                            objReporte.Importe_Inafecta = Consolidados.Any() ? Consolidados.Sum(x => x.Importe_Inafecta) : 0;
                            objReporte.Otros_Tributos_No_Forman_Parte_B = Consolidados.Any() ? Consolidados.Sum(x => x.Otros_Tributos_No_Forman_Parte_B) : 0;
                            objReporte.Igv_Y_O_IpmConsolidado = Consolidados.Any() ? (double)Consolidados.Sum(x => x.Igv_Y_O_IpmConsolidado) : 0;

                            objReporte.TotalConsolidado = Consolidados.Any() ? (double)Consolidados.Sum(x => x.TotalConsolidado) : 0;
                            objReporte.ISC = Consolidados.Any() ? Consolidados.Sum(x => x.ISC) : 0;
                            ListaReporte.Add(objReporte);
                        }

                        ListaAgrupados = new List<ReporteRegistroVentaContable>();
                        ListaReporte.Add(subgrupo);
                        SeTomoCuenta = true;



                    }
                    else  // otro dia 
                    {

                        if (ListaAgrupados.Any() && !SeTomoCuenta)
                        {


                            ReporteRegistroVentaContable objReporte = new ReporteRegistroVentaContable();
                            objReporte = ListaAgrupados.FirstOrDefault();
                            objReporte.SerieDocumento = ListaAgrupados.FirstOrDefault().SerieDocumento.Trim();
                            objReporte.CorrelativoDocumento = ListaAgrupados.FirstOrDefault().CorrelativoDocumento.Trim();
                            objReporte.NroDocAl = ListaAgrupados.LastOrDefault().CorrelativoDocumento.Trim();
                            objReporte.DocIdentidad = 1;
                            //objReporte.NroDocCliente = DatosPublicoGeneral[3];
                            //objReporte.NombreCliente = DatosPublicoGeneral[2];
                            objReporte.NroDocCliente = ListaAgrupados.FirstOrDefault().i_idEstado == 0 ? "00000000" : DatosPublicoGeneral[3];
                            objReporte.NombreCliente = ListaAgrupados.FirstOrDefault().i_idEstado == 0 ? "****A N U L A D O****" : DatosPublicoGeneral[2];
                            var Consolidados = DocumentosConsolidados.Where(x => x.IntCorrelativoDocumento >= ListaAgrupados.FirstOrDefault().IntCorrelativoDocumento && x.IntCorrelativoDocumento <= ListaAgrupados.LastOrDefault().IntCorrelativoDocumento && x.SerieDocumento == ListaAgrupados.FirstOrDefault().SerieDocumento && x.IdTipoDocumento == ListaAgrupados.FirstOrDefault().IdTipoDocumento).ToList();
                            objReporte.Valor_Export = Consolidados.Any() ? Consolidados.Sum(x => x.Valor_Export) : 0;

                            objReporte.Base_Impon_Oper_GravConsolidado = Consolidados.Any() ? (double)Consolidados.Sum(x => x.Base_Impon_Oper_GravConsolidado) : 0;
                            objReporte.Importe_Exonerada = Consolidados.Any() ? Consolidados.Sum(x => x.Importe_Exonerada) : 0;
                            objReporte.Importe_Inafecta = Consolidados.Any() ? Consolidados.Sum(x => x.Importe_Inafecta) : 0;
                            objReporte.Otros_Tributos_No_Forman_Parte_B = Consolidados.Any() ? Consolidados.Sum(x => x.Otros_Tributos_No_Forman_Parte_B) : 0;
                            objReporte.Igv_Y_O_IpmConsolidado = Consolidados.Any() ? (double)Consolidados.Sum(x => x.Igv_Y_O_IpmConsolidado) : 0;

                            objReporte.TotalConsolidado = Consolidados.Any() ? (double)Consolidados.Sum(x => x.TotalConsolidado) : 0;
                            objReporte.ISC = Consolidados.Any() ? Consolidados.Sum(x => x.ISC) : 0;  // DocumentosConsolidados.Where(x => x.IntCorrelativoDocumento >= ListaAgrupados.FirstOrDefault().IntCorrelativoDocumento && x.IntCorrelativoDocumento <= ListaAgrupados.LastOrDefault().IntCorrelativoDocumento).Sum(x => x.ISC);
                            ListaReporte.Add(objReporte);

                            SeTomoCuenta = true;


                        }
                        else if (!SeTomoCuenta)
                        {
                            if (InicialAnulado)
                            {
                                InicialAnulado = false;
                            }
                            SeTomoCuenta = true;
                            ListaReporte.Add(objTemporal);

                        }

                        //subgrupo.IntCorrelativoDocumento = int.Parse(subgrupo.CorrelativoDocumento);
                        if (!ListaReporte.Select(o => o.IntCorrelativoDocumento).Contains(subgrupo.IntCorrelativoDocumento) && !ListaReporte.Select(o => o.NroDocAl).Contains(subgrupo.NroDocAl))
                        {
                            // var Consolidados = ListaReporte.Where(x => int.Parse ( x.NroDocAl )>=it ListaAgrupados.LastOrDefault().IntCorrelativoDocumento && x.IdTipoDocumento ==ListaAgrupados.LastOrDefault ().IdTipoDocumento ).ToList();
                            var Consolidados = ListaReporte.Where(x => int.Parse(x.NroDocAl) >= subgrupo.IntCorrelativoDocumento && x.IdTipoDocumento == subgrupo.IdTipoDocumento).ToList();
                            {
                                if (!Consolidados.Any())
                                {
                                    Grupo = subgrupo.GrupoLlave;
                                    IgvNombre = subgrupo.IgvNombre;
                                    IdTipoDocumento = subgrupo.IdTipoDocumento;
                                    Fecha = subgrupo.FechaRegistro;
                                    ListaAgrupados = new List<ReporteRegistroVentaContable>();
                                    subgrupo.IntCorrelativoDocumento = int.Parse(subgrupo.CorrelativoDocumento);
                                    ListaAgrupados.Add(subgrupo);
                                    SeTomoCuenta = false;

                                }

                            }
                        }
                        //Grupo = subgrupo.GrupoLlave;
                        //IgvNombre = subgrupo.IgvNombre;
                        //IdTipoDocumento = subgrupo.IdTipoDocumento;
                        //Fecha = subgrupo.FechaRegistro;
                        //ListaAgrupados = new List<ReporteRegistroVentaContable>();
                        //subgrupo.IntCorrelativoDocumento = int.Parse(subgrupo.CorrelativoDocumento);
                        //ListaAgrupados.Add(subgrupo);
                        //SeTomoCuenta = false;
                    }

                    if (i == DocumentosConsolidados.Count() && !SeTomoCuenta)
                    {
                        if (ListaAgrupados.Count() > 1)
                        {

                            ReporteRegistroVentaContable objReporte = new ReporteRegistroVentaContable();
                            objReporte = ListaAgrupados.FirstOrDefault();
                            objReporte.SerieDocumento = ListaAgrupados.FirstOrDefault().SerieDocumento.Trim();
                            objReporte.CorrelativoDocumento = ListaAgrupados.FirstOrDefault().CorrelativoDocumento.Trim();
                            objReporte.NroDocAl = ListaAgrupados.LastOrDefault().CorrelativoDocumento.Trim();

                            objReporte.DocIdentidad = 1;
                            //objReporte.NroDocCliente = DatosPublicoGeneral[3];
                            //objReporte.NombreCliente = DatosPublicoGeneral[2];
                            objReporte.NroDocCliente = ListaAgrupados.FirstOrDefault().i_idEstado == 0 ? "00000000" : DatosPublicoGeneral[3];
                            objReporte.NombreCliente = ListaAgrupados.FirstOrDefault().i_idEstado == 0 ? "****A N U L A D O****" : DatosPublicoGeneral[2];
                            var Consolidados = DocumentosConsolidados.Where(x => x.IntCorrelativoDocumento >= ListaAgrupados.FirstOrDefault().IntCorrelativoDocumento && x.IntCorrelativoDocumento <= ListaAgrupados.LastOrDefault().IntCorrelativoDocumento && x.SerieDocumento == ListaAgrupados.FirstOrDefault().SerieDocumento).ToList();
                            objReporte.Valor_Export = Consolidados.Any() ? Consolidados.Sum(x => x.Valor_Export) : 0;   //DocumentosConsolidados.Where(x => x.IntCorrelativoDocumento >= ListaAgrupados.FirstOrDefault().IntCorrelativoDocumento && x.IntCorrelativoDocumento <= ListaAgrupados.LastOrDefault().IntCorrelativoDocumento).Sum(x => x.Valor_Export);
                            objReporte.Base_Impon_Oper_GravConsolidado = Consolidados.Any() ? (double)Consolidados.Sum(x => x.Base_Impon_Oper_GravConsolidado) : 0;
                            objReporte.Importe_Exonerada = Consolidados.Any() ? Consolidados.Sum(x => x.Importe_Exonerada) : 0;//DocumentosConsolidados.Where(x => x.IntCorrelativoDocumento >= ListaAgrupados.FirstOrDefault().IntCorrelativoDocumento && x.IntCorrelativoDocumento <= ListaAgrupados.LastOrDefault().IntCorrelativoDocumento).Sum(x => x.Importe_Exonerada);
                            objReporte.Importe_Inafecta = Consolidados.Any() ? Consolidados.Sum(x => x.Importe_Inafecta) : 0;  //DocumentosConsolidados.Where(x => x.IntCorrelativoDocumento >= ListaAgrupados.FirstOrDefault().IntCorrelativoDocumento && x.IntCorrelativoDocumento <= ListaAgrupados.LastOrDefault().IntCorrelativoDocumento).Sum(x => x.Importe_Inafecta);
                            objReporte.Otros_Tributos_No_Forman_Parte_B = Consolidados.Any() ? Consolidados.Sum(x => x.Otros_Tributos_No_Forman_Parte_B) : 0; //DocumentosConsolidados.Where(x => x.IntCorrelativoDocumento >= ListaAgrupados.FirstOrDefault().IntCorrelativoDocumento && x.IntCorrelativoDocumento <= ListaAgrupados.LastOrDefault().IntCorrelativoDocumento).Sum(x => x.Otros_Tributos_No_Forman_Parte_B);
                            objReporte.Igv_Y_O_IpmConsolidado = Consolidados.Any() ? (double)Consolidados.Sum(x => x.Igv_Y_O_IpmConsolidado) : 0;  //DocumentosConsolidados.Where(x => x.IntCorrelativoDocumento >= ListaAgrupados.FirstOrDefault().IntCorrelativoDocumento && x.IntCorrelativoDocumento <= ListaAgrupados.LastOrDefault().IntCorrelativoDocumento).Sum(x => x.Igv_Y_O_Ipm);

                            objReporte.TotalConsolidado = Consolidados.Any() ? (double)Consolidados.Sum(x => x.TotalConsolidado) : 0;
                            objReporte.ISC = Consolidados.Any() ? Consolidados.Sum(x => x.ISC) : 0;
                            ListaReporte.Add(objReporte);
                        }
                        else
                        {
                            ListaReporte.Add(subgrupo);
                        }
                    }
                    i = i + 1;

                }
                Reporte = OtrosDocumentos.Concat(ListaReporte).ToList();

                if (pstrt_Orden == "CORRELATIVODOCUMENTO")
                {
                    Reporte = Reporte.OrderBy(c => c.CorrelativoDocumento).ToList();
                }
                else if (pstrt_Orden == "FECHAREGISTRO")
                {
                    Reporte = Reporte.OrderBy(c => c.FechaRegistro).ThenBy(x => x.CorrelativoDocumento).ToList();
                }
                else if (pstrt_Orden == "CORRELATIVO")
                {
                    Reporte = Reporte.OrderBy(c => c.Correlativo).ToList();
                }
                else
                {

                    Reporte = Reporte.OrderBy(c => c.IdTipoDocumento).ToList();
                }
                objOperatioResult.Success = 1;
                return Reporte;
                #endregion


            }
            catch (Exception ex)
            {
                objOperatioResult.Success = 0;
                //objOperatioResult.AdditionalInformation = i.ToString();
                return null;
            }
        }




        private decimal CalcularValoresVentasSunat2016(string TipoCalculo, int TipoVentas, int TipoOperacionCabecera, int TipoOperacionGrilla, decimal IgvCabecera, int idTipoDocumento, decimal ValorVenta, decimal TipoCambio, int MonedaReporte, int MonedaRegistro, List<ReporteRegistroVentaContable> ListaReporte, string idCabecera)
        {
            decimal Valor = 0;
            switch (TipoCalculo)
            {
                case "VE":

                    if (TipoOperacionCabecera == (int)TipoOperacionNueva.Exportacion)
                    {

                        if (_objDocumentoBL.DocumentoEsInverso(idTipoDocumento))
                        {
                            // Valor = MonedaReporte == (int)Currency.Soles ? MonedaRegistro == (int)Currency.Soles ? ValorVenta * -1 : (ValorVenta * TipoCambio) * -1 : MonedaRegistro == (int)Currency.Soles ? (ValorVenta / TipoCambio) * -1 : ValorVenta * -1;

                            Valor = MonedaReporte == MonedaRegistro ? ValorVenta * -1 : MonedaReporte == (int)Currency.Soles ? (ValorVenta * TipoCambio) * -1 : (ValorVenta / TipoCambio) * -1;

                        }
                        else
                        {
                            Valor = MonedaReporte == MonedaRegistro ? ValorVenta : MonedaReporte == (int)Currency.Soles ? (ValorVenta * TipoCambio) : (ValorVenta / TipoCambio);

                        }
                    }
                    else if (TipoOperacionCabecera == (int)TipoOperacionNueva.Mixta)
                    {

                        //Tomar en cuenta Anticipo por Tipo Operacion  ... porque es Mixta
                        var detalles = ListaReporte.Where(x => x.IdCabecera == idCabecera && x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Exportacion).ToList();
                        decimal ValorDetalleGravada = detalles.Where(x => x.IdCabecera == idCabecera && x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Exportacion).Sum(y => y.ValorVentaDetalle);     // ListaReporte.Where(x => x.IdCabecera == idCabecera && x.TipoOperacionGrilla == (int)TipoOperacionNueva.Gravada).Sum(y => y.ValorVentaDetalle);
                        decimal ValorDetalleGravadaAnticipo = detalles.Where(x => x.IdCabecera == idCabecera && x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Exportacion && x.AnticipioDetalle == 1).Sum(u => u.ValorVentaDetalle) * -1 + detalles.Where(x => x.IdCabecera == idCabecera && x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Exportacion && x.AnticipioDetalle == 0).Sum(u => u.ValorVentaDetalle);      //ListaReporte.Where(x => x.IdCabecera == idCabecera && x.TipoOperacionGrilla == (int)TipoOperacionNueva.Gravada && x.AnticipioDetalle == 1).Sum(u => u.ValorVentaDetalle) * -1 + ListaReporte.Where(x => x.IdCabecera == idCabecera && x.TipoOperacionGrilla == (int)TipoOperacionNueva.Gravada && x.AnticipioDetalle == 0).Sum(u => u.ValorVentaDetalle);
                        if (_objDocumentoBL.DocumentoEsInverso(idTipoDocumento))
                        {   //Aca no hay anticipo

                            // Valor = MonedaReporte == (int)Currency.Soles ? MonedaRegistro == (int)Currency.Soles ? ValorDetalleGravada * -1 : (ValorDetalleGravada * TipoCambio) * -1 : MonedaRegistro == (int)Currency.Soles ? (ValorDetalleGravada / TipoCambio) * -1 : ValorDetalleGravada * -1;
                            Valor = MonedaReporte == MonedaRegistro ? ValorDetalleGravada * -1 : MonedaReporte == (int)Currency.Soles ? (ValorDetalleGravada * TipoCambio) * -1 : (ValorDetalleGravada / TipoCambio) * -1;
                        }
                        else
                        { // Aca si se considera Anticipo

                            Valor = MonedaReporte == MonedaRegistro ? ValorDetalleGravadaAnticipo : MonedaReporte == (int)Currency.Soles ? (ValorDetalleGravadaAnticipo * TipoCambio) : (ValorDetalleGravadaAnticipo / TipoCambio);
                        }

                    }


                    else
                    {
                        Valor = 0;
                    }
                    break;
                case "BI":

                    if (TipoOperacionCabecera == (int)TipoOperacionNueva.Gravada)
                    {
                        if (_objDocumentoBL.DocumentoEsInverso(idTipoDocumento))
                        {
                            // Valor = MonedaReporte == (int)Currency.Soles ? MonedaRegistro == (int)Currency.Soles ? ValorVenta * -1 : (ValorVenta * TipoCambio) * -1 : MonedaRegistro == (int)Currency.Soles ? (ValorVenta / TipoCambio) * -1 : ValorVenta * -1;
                            Valor = MonedaReporte == MonedaRegistro ? ValorVenta * -1 : MonedaReporte == (int)Currency.Soles ? (ValorVenta * TipoCambio) * -1 : (ValorVenta / TipoCambio) * -1;


                        }
                        else
                        {
                            Valor = MonedaReporte == MonedaRegistro ? ValorVenta : MonedaReporte == (int)Currency.Soles ? ValorVenta * TipoCambio : ValorVenta / TipoCambio;
                        }

                    }

                    else if (TipoOperacionCabecera == (int)TipoOperacionNueva.Mixta)
                    {

                        //Tomar en cuenta Anticipo por Tipo Operacion  ... porque es Mixta

                        var detalles = ListaReporte.Where(x => x.IdCabecera == idCabecera && x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Gravada).ToList();
                        decimal ValorDetalleGravada = detalles.Where(x => x.IdCabecera == idCabecera && x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Gravada).Sum(y => y.ValorVentaDetalle);     // ListaReporte.Where(x => x.IdCabecera == idCabecera && x.TipoOperacionGrilla == (int)TipoOperacionNueva.Gravada).Sum(y => y.ValorVentaDetalle);
                        decimal ValorDetalleGravadaAnticipo = detalles.Where(x => x.IdCabecera == idCabecera && x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Gravada && x.AnticipioDetalle == 1).Sum(u => u.ValorVentaDetalle) * -1 + detalles.Where(x => x.IdCabecera == idCabecera && x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Gravada && x.AnticipioDetalle == 0).Sum(u => u.ValorVentaDetalle);      //ListaReporte.Where(x => x.IdCabecera == idCabecera && x.TipoOperacionGrilla == (int)TipoOperacionNueva.Gravada && x.AnticipioDetalle == 1).Sum(u => u.ValorVentaDetalle) * -1 + ListaReporte.Where(x => x.IdCabecera == idCabecera && x.TipoOperacionGrilla == (int)TipoOperacionNueva.Gravada && x.AnticipioDetalle == 0).Sum(u => u.ValorVentaDetalle);
                        if (_objDocumentoBL.DocumentoEsInverso(idTipoDocumento))
                        {   //Aca no hay anticipo
                            Valor = MonedaReporte == MonedaRegistro ? ValorDetalleGravada * -1 : MonedaReporte == (int)Currency.Soles ? (ValorDetalleGravada * TipoCambio) * -1 : (ValorDetalleGravada / TipoCambio) * -1;
                        }
                        else
                        { // Aca si se considera Anticipo

                            Valor = MonedaReporte == MonedaRegistro ? ValorDetalleGravadaAnticipo : MonedaReporte == (int)Currency.Soles ? (ValorDetalleGravadaAnticipo * TipoCambio) : (ValorDetalleGravadaAnticipo / TipoCambio);
                        }

                    }
                    else if (TipoOperacionCabecera > 10 && TipoOperacionCabecera <= 19)
                    {

                        var detalles = ListaReporte.Where(x => x.IdCabecera == idCabecera).ToList();
                        decimal ValoresBI = detalles.Sum(y => y.ValorVentaDetalle);     // ListaReporte.Where(x => x.IdCabecera == idCabecera && x.TipoOperacionGrilla == (int)TipoOperacionNueva.Gravada).Sum(y => y.ValorVentaDetalle)

                        if (_objDocumentoBL.DocumentoEsInverso(idTipoDocumento))
                        {
                            Valor = MonedaReporte == MonedaRegistro ? ValoresBI * -1 : MonedaReporte == (int)Currency.Soles ? (ValoresBI * TipoCambio) * -1 : (ValoresBI / TipoCambio) * -1;
                        }
                        else
                        {
                            Valor = MonedaReporte == MonedaRegistro ? ValoresBI : MonedaReporte == (int)Currency.Soles ? ValoresBI * TipoCambio : ValoresBI / TipoCambio;
                        }
                    }
                    else
                    {

                        Valor = 0;
                    }
                    break;
                case "OT":
                    var ListaOtrosTributos = ListaReporte.Where(x => x.IdCabecera == idCabecera && x.EsOtrosTributos == true).ToList();
                    var OT = ListaReporte.Where(x => x.IdCabecera == idCabecera).FirstOrDefault().OtrosTributosC;
                    //decimal OtrosTributos = ListaOtrosTributos.Any() ? ListaOtrosTributos.Sum(o =>   o.ValorVentaDetalle) : 0;
                    if (_objDocumentoBL.DocumentoEsInverso(idTipoDocumento))
                    {
                        // Valor = ListaOtrosTributos.Any() ? MonedaReporte == (int)Currency.Soles ? MonedaRegistro == (int)Currency.Soles ? ListaOtrosTributos.Sum(o => o.ValorVentaDetalle) * -1 : ListaOtrosTributos.Sum(o => Utils.Windows.DevuelveValorRedondeado(o.ValorVentaDetalle * TipoCambio, 2)) * -1 : MonedaRegistro == (int)Currency.Soles ? ListaOtrosTributos.Sum(o => Utils.Windows.DevuelveValorRedondeado(o.ValorVentaDetalle / TipoCambio, 2)) * -1 : ListaOtrosTributos.Sum(o => o.ValorVentaDetalle) * -1 : 0;
                        if (Globals.ClientSession.v_RucEmpresa == Constants.RucAgrofergic)
                        {
                            Valor = ListaOtrosTributos.Any() ? MonedaReporte == MonedaRegistro ? ListaOtrosTributos.Sum(o => o.ValorVentaDetalle) * -1 : MonedaReporte == (int)Currency.Soles ? ListaOtrosTributos.Sum(o => Utils.Windows.DevuelveValorRedondeado(o.ValorVentaDetalle * TipoCambio, 2)) * -1 : ListaOtrosTributos.Sum(o => Utils.Windows.DevuelveValorRedondeado(o.ValorVentaDetalle / TipoCambio, 2)) * -1 : 0;
                        }
                        else
                        {
                            Valor = MonedaReporte == MonedaRegistro ? OT * -1 : MonedaReporte == (int)Currency.Soles ? (OT * TipoCambio) * -1 : (OT / TipoCambio) * -1;
                        }
                    }
                    else
                    {
                        if (Globals.ClientSession.v_RucEmpresa == Constants.RucAgrofergic)
                        {
                            Valor = ListaOtrosTributos.Any() ? MonedaReporte == MonedaRegistro ? ListaOtrosTributos.Sum(o => o.ValorVentaDetalle) : MonedaReporte == (int)Currency.Soles ? ListaOtrosTributos.Sum(o => Utils.Windows.DevuelveValorRedondeado(o.ValorVentaDetalle * TipoCambio, 2)) : ListaOtrosTributos.Sum(o => Utils.Windows.DevuelveValorRedondeado(o.ValorVentaDetalle / TipoCambio, 2)) : 0;
                        }
                        else
                        {
                            Valor = MonedaReporte == MonedaRegistro ? OT : MonedaReporte == (int)Currency.Soles ? (OT * TipoCambio) : (OT / TipoCambio);
                        }
                    }
                    break;

                case "ISC":

                    decimal Isc = ListaReporte.Where(x => x.IdCabecera == idCabecera).FirstOrDefault().ISC;

                    if (_objDocumentoBL.DocumentoEsInverso(idTipoDocumento))
                    {

                        Valor = MonedaReporte == MonedaRegistro ? Isc * -1 : MonedaReporte == (int)Currency.Soles ? (Isc * TipoCambio) * -1 : (Isc / TipoCambio) * -1;
                    }
                    else
                    {
                        Valor = MonedaReporte == MonedaRegistro ? Isc : MonedaReporte == (int)Currency.Soles ? (Isc * TipoCambio) : (Isc / TipoCambio);
                    }

                    break;

                case "IGV":

                    decimal Igv = ListaReporte.Where(x => x.IdCabecera == idCabecera).FirstOrDefault().IgvCabecera;

                    if ((TipoOperacionCabecera == (int)TipoOperacionNueva.Gravada || TipoOperacionCabecera == (int)TipoOperacionNueva.Exonerado || TipoOperacionCabecera == (int)TipoOperacionNueva.Inafecto))
                    {
                        if (_objDocumentoBL.DocumentoEsInverso(idTipoDocumento))
                        {
                            Valor = MonedaReporte == MonedaRegistro ? Igv * -1 : MonedaReporte == (int)Currency.Soles ? (Igv * TipoCambio) * -1 : (Igv / TipoCambio) * -1;
                        }
                        else
                        {
                            Valor = MonedaReporte == MonedaRegistro ? Igv : MonedaReporte == (int)Currency.Soles ? Igv * TipoCambio : Igv / TipoCambio;
                        }

                    }
                    else if (TipoOperacionCabecera == (int)TipoOperacionNueva.Mixta)
                    {
                        // Tomar en cuenta Anticipo por Tipo Operacion  ... porque es Mixta
                        var detalles = ListaReporte.Where(x => x.IdCabecera == idCabecera && x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Gravada);
                        decimal IgvDetalleGravada = detalles.Where(x => x.IdCabecera == idCabecera && x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Gravada).Sum(y => y.IgvDetalle);
                        decimal IgvDetalleGravadaAnticipo = detalles.Where(x => x.IdCabecera == idCabecera && x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Gravada && x.AnticipioDetalle == 1).Sum(u => u.IgvDetalle) * -1 + detalles.Where(x => x.IdCabecera == idCabecera && x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Gravada && x.AnticipioDetalle == 0).Sum(u => u.IgvDetalle);
                        if (_objDocumentoBL.DocumentoEsInverso(idTipoDocumento))
                        {   //Aca no hay anticipo
                            Valor = MonedaReporte == MonedaRegistro ? IgvDetalleGravada * -1 : MonedaReporte == (int)Currency.Soles ? (IgvDetalleGravada * TipoCambio) * -1 : (IgvDetalleGravada / TipoCambio) * -1;
                        }
                        else
                        { // Aca si se considera Anticipo

                            Valor = MonedaReporte == MonedaRegistro ? IgvDetalleGravadaAnticipo : MonedaReporte == (int)Currency.Soles ? (IgvDetalleGravadaAnticipo * TipoCambio) : (IgvDetalleGravadaAnticipo / TipoCambio);
                        }

                    }
                    else if ((TipoOperacionCabecera > 10 && TipoOperacionCabecera <= 19) || (TipoOperacionCabecera > 20 && TipoOperacionCabecera < 30) || (TipoOperacionCabecera > 30 && TipoOperacionCabecera < 40))
                    {
                        var detalles = ListaReporte.Where(x => x.IdCabecera == idCabecera);
                        decimal IgvDetalle = detalles.Where(x => x.IdCabecera == idCabecera).Sum(y => y.IgvDetalle);

                        if (_objDocumentoBL.DocumentoEsInverso(idTipoDocumento))
                        {
                            Valor = MonedaReporte == MonedaRegistro ? IgvDetalle * -1 : MonedaReporte == (int)Currency.Soles ? (IgvDetalle * TipoCambio) * -1 : (IgvDetalle / TipoCambio) * -1;
                        }
                        else
                        {
                            Valor = MonedaReporte == MonedaRegistro ? IgvDetalle : MonedaReporte == (int)Currency.Soles ? IgvDetalle * TipoCambio : IgvDetalle / TipoCambio;
                        }
                    }
                    else
                    {
                        Valor = 0;
                    }
                    break;


                case "E":

                    if (TipoOperacionCabecera == (int)TipoOperacionNueva.Exonerado)
                    {

                        if (_objDocumentoBL.DocumentoEsInverso(idTipoDocumento))
                        {   //Aca no hay anticipo
                            Valor = MonedaReporte == MonedaRegistro ? ValorVenta * -1 : MonedaReporte == (int)Currency.Soles ? (ValorVenta * TipoCambio) * -1 : (ValorVenta / TipoCambio) * -1;
                        }
                        else
                        { // Aca si se considera Anticipo

                            Valor = MonedaReporte == MonedaRegistro ? ValorVenta : MonedaReporte == (int)Currency.Soles ? (ValorVenta * TipoCambio) : (ValorVenta / TipoCambio);
                        }
                    }
                    else if (TipoOperacionCabecera == (int)TipoOperacionNueva.Mixta)
                    {
                        //Se debe restar los otros tributos , ya que se están considerando en la fila de otros tributos
                        var Detalles = ListaReporte.Where(x => x.IdCabecera == idCabecera && x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Exonerado).ToList();
                        decimal ValorExonerada = Detalles.Where(x => x.IdCabecera == idCabecera && x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Exonerado).Sum(x => x.ValorVentaDetalle);
                        decimal OtrosTributosE = Detalles.Where(x => x.IdCabecera == idCabecera && x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Exonerado && x.EsOtrosTributos == true).Sum(x => x.ValorVentaDetalle);
                        decimal ValorExoneradaAnticipio = Detalles.Where(x => x.IdCabecera == idCabecera && x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Exonerado && x.AnticipioDetalle == 1).Sum(x => x.ValorVentaDetalle) * -1 + Detalles.Where(x => x.IdCabecera == idCabecera && x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Exonerado && x.AnticipioDetalle == 0).Sum(x => x.ValorVentaDetalle);
                        if (Globals.ClientSession.v_RucEmpresa == Constants.RucAgrofergic)
                        {
                            if (_objDocumentoBL.DocumentoEsInverso(idTipoDocumento))
                            {   //Aca no hay anticipo
                                Valor = MonedaReporte == MonedaRegistro ? (ValorExonerada - OtrosTributosE) * -1 : MonedaReporte == (int)Currency.Soles ? ((ValorExonerada - OtrosTributosE) * TipoCambio) * -1 : ((ValorExonerada - OtrosTributosE) / TipoCambio) * -1;

                            }
                            else
                            { // Aca si se considera Anticipo

                                Valor = MonedaReporte == MonedaRegistro ? (ValorExoneradaAnticipio - OtrosTributosE) : MonedaReporte == (int)Currency.Soles ? ((ValorExoneradaAnticipio - OtrosTributosE) * TipoCambio) : ((ValorExoneradaAnticipio - OtrosTributosE) / TipoCambio);

                            }
                        }
                        else
                        {
                            if (_objDocumentoBL.DocumentoEsInverso(idTipoDocumento))
                            {   //Aca no hay anticipo
                                Valor = MonedaReporte == MonedaRegistro ? (ValorExonerada) * -1 : MonedaReporte == (int)Currency.Soles ? ((ValorExonerada) * TipoCambio) * -1 : ((ValorExonerada) / TipoCambio) * -1;

                            }
                            else
                            { // Aca si se considera Anticipo

                                Valor = MonedaReporte == MonedaRegistro ? (ValorExoneradaAnticipio) : MonedaReporte == (int)Currency.Soles ? ((ValorExoneradaAnticipio) * TipoCambio) : ((ValorExoneradaAnticipio) / TipoCambio);

                            }

                        }

                    }
                    else if ((TipoOperacionCabecera > 20 && TipoOperacionCabecera < 30))
                    {
                        var detalles = ListaReporte.Where(x => x.IdCabecera == idCabecera);
                        decimal ExoneradaDetalle = detalles.Where(x => x.IdCabecera == idCabecera).Sum(y => y.ValorVentaDetalle);

                        if (_objDocumentoBL.DocumentoEsInverso(idTipoDocumento))
                        {
                            Valor = MonedaReporte == MonedaRegistro ? ExoneradaDetalle * -1 : MonedaReporte == (int)Currency.Soles ? (ExoneradaDetalle * TipoCambio) * -1 : (ExoneradaDetalle / TipoCambio) * -1;
                        }
                        else
                        {
                            Valor = MonedaReporte == MonedaRegistro ? ExoneradaDetalle : MonedaReporte == (int)Currency.Soles ? ExoneradaDetalle * TipoCambio : ExoneradaDetalle / TipoCambio;
                        }
                    }

                    else
                    {
                        Valor = 0;
                    }

                    break;
                case "I":

                    if (TipoOperacionCabecera == (int)TipoOperacionNueva.Inafecto)
                    {

                        if (_objDocumentoBL.DocumentoEsInverso(idTipoDocumento))
                        {   //Aca no hay anticipo
                            Valor = MonedaReporte == MonedaRegistro ? ValorVenta * -1 : MonedaReporte == (int)Currency.Soles ? (ValorVenta * TipoCambio) * -1 : (ValorVenta / TipoCambio) * -1;
                        }
                        else
                        { // Aca si se considera Anticipo

                            Valor = MonedaReporte == MonedaRegistro ? ValorVenta : MonedaReporte == (int)Currency.Soles ? (ValorVenta * TipoCambio) : (ValorVenta / TipoCambio);
                        }
                    }
                    else if (TipoOperacionCabecera == (int)TipoOperacionNueva.Mixta)
                    {
                        var detalles = ListaReporte.Where(x => x.IdCabecera == idCabecera && x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Inafecto).ToList();
                        decimal ValorInafecta = detalles.Where(x => x.IdCabecera == idCabecera && x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Inafecto).Sum(x => x.ValorVentaDetalle);
                        decimal OtrosTributosI = detalles.Where(x => x.IdCabecera == idCabecera && x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Inafecto && x.EsOtrosTributos == true).Sum(x => x.ValorVentaDetalle);
                        decimal ValorInafectaAnticipio = detalles.Where(x => x.IdCabecera == idCabecera && x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Inafecto && x.AnticipioDetalle == 1).Sum(x => x.ValorVentaDetalle) * -1 + detalles.Where(x => x.IdCabecera == idCabecera && x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Inafecto && x.AnticipioDetalle == 0).Sum(x => x.ValorVentaDetalle);

                        if (Globals.ClientSession.v_RucEmpresa == Constants.RucAgrofergic)
                        {
                            if (_objDocumentoBL.DocumentoEsInverso(idTipoDocumento))
                            {   //Aca no hay anticipo
                                Valor = MonedaReporte == MonedaRegistro ? (ValorInafecta - OtrosTributosI) * -1 : MonedaReporte == (int)Currency.Soles ? ((ValorInafecta - OtrosTributosI) * TipoCambio) * -1 : ((ValorInafecta - OtrosTributosI) / TipoCambio) * -1;
                            }
                            else
                            { // Aca si se considera Anticipo

                                Valor = MonedaReporte == MonedaRegistro ? (ValorInafectaAnticipio - OtrosTributosI) : MonedaReporte == (int)Currency.Soles ? ((ValorInafectaAnticipio - OtrosTributosI) * TipoCambio) : ((ValorInafectaAnticipio - OtrosTributosI) / TipoCambio);
                            }
                        }
                        else
                        {
                            if (_objDocumentoBL.DocumentoEsInverso(idTipoDocumento))
                            {   //Aca no hay anticipo
                                Valor = MonedaReporte == MonedaRegistro ? (ValorInafecta) * -1 : MonedaReporte == (int)Currency.Soles ? ((ValorInafecta) * TipoCambio) * -1 : ((ValorInafecta) / TipoCambio) * -1;
                            }
                            else
                            { // Aca si se considera Anticipo

                                Valor = MonedaReporte == MonedaRegistro ? (ValorInafectaAnticipio) : MonedaReporte == (int)Currency.Soles ? ((ValorInafectaAnticipio) * TipoCambio) : ((ValorInafectaAnticipio) / TipoCambio);
                            }
                        }


                    }
                    else if ((TipoOperacionCabecera > 30 && TipoOperacionCabecera < 40))
                    {
                        var detalles = ListaReporte.Where(x => x.IdCabecera == idCabecera);
                        decimal InafectoDetalle = detalles.Where(x => x.IdCabecera == idCabecera).Sum(y => y.ValorVentaDetalle);

                        if (_objDocumentoBL.DocumentoEsInverso(idTipoDocumento))
                        {
                            Valor = MonedaReporte == MonedaRegistro ? InafectoDetalle * -1 : MonedaReporte == (int)Currency.Soles ? (InafectoDetalle * TipoCambio) * -1 : (InafectoDetalle / TipoCambio) * -1;
                        }
                        else
                        {
                            Valor = MonedaReporte == MonedaRegistro ? InafectoDetalle : MonedaReporte == (int)Currency.Soles ? InafectoDetalle * TipoCambio : InafectoDetalle / TipoCambio;
                        }
                    }
                    else
                    {
                        Valor = 0;
                    }

                    break;

            }
            return Utils.Windows.DevuelveValorRedondeado(Valor, 2);
        }



        private decimal CalcularValoresVentasSunat2017(string TipoCalculo, int TipoVentas, int TipoOperacionCabecera, int TipoOperacionGrilla, decimal IgvCabecera, int idTipoDocumento, decimal ValorVenta, decimal TipoCambio, int MReporte, int MonedaRegistro, List<ReporteRegistroVentaContable> ListaReporte, string idCabecera)
        {
            decimal Valor = 0;
            OperationResult objOperationResult = new OperationResult();

            List<ReporteRegistroVentaContable> detalles = ListaReporte.Where(x => x.IdCabecera == idCabecera).ToList();
            switch (TipoCalculo)
            {
                case "VE":

                    if (TipoOperacionCabecera == (int)TipoOperacionNueva.Exportacion)
                    {

                        if (_objDocumentoBL.DocumentoEsInverso(idTipoDocumento))
                        {

                            Valor = MReporte == MonedaRegistro ? ValorVenta * -1 : CalcularTotalesOtraMonedaVenta(ref objOperationResult, detalles, MReporte, TipoCalculo) * -1;/// MonedaReporte == (int)Currency.Soles ? (ValorVenta * TipoCambio) * -1 : (ValorVenta / TipoCambio) * -1;
                        }
                        else
                        {
                            Valor = MReporte == MonedaRegistro ? ValorVenta : CalcularTotalesOtraMonedaVenta(ref objOperationResult, detalles, MReporte, TipoCalculo);
                        }
                    }
                    else if (TipoOperacionCabecera == (int)TipoOperacionNueva.Mixta)
                    {

                        //Tomar en cuenta Anticipo por Tipo Operacion  ... porque es Mixta
                        if (_objDocumentoBL.DocumentoEsInverso(idTipoDocumento))
                        {   //Aca no hay anticipo
                            if (MReporte == MonedaRegistro)
                            {
                                decimal ValorDetalleGravada = detalles.Where(x => x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Exportacion).Sum(y => y.ValorVentaDetalle);     // ListaReporte.Where(x => x.IdCabecera == idCabecera && x.TipoOperacionGrilla == (int)TipoOperacionNueva.Gravada).Sum(y => y.ValorVentaDetalle);
                                Valor = ValorDetalleGravada * -1;
                            }
                            else
                            {
                                var DetallesM = detalles.Where(x => x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Exportacion).ToList();
                                var Detalles = ListaValoresOtraMoneda(ref objOperationResult, DetallesM, MReporte);
                                var ValorDetalleGravada = Detalles.Where(x => x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Exportacion).Sum(y => y.ValorVentaOM);
                                Valor = ValorDetalleGravada * -1;
                            }

                        }
                        else
                        { // Aca si se considera Anticipo

                            if (MReporte == MonedaRegistro)
                            {
                                decimal ValorDetalleGravadaAnticipo = detalles.Where(x => x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Exportacion && x.AnticipioDetalle == 1).Sum(u => u.ValorVentaDetalle) * -1 + detalles.Where(x => x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Exportacion && x.AnticipioDetalle == 0).Sum(u => u.ValorVentaDetalle);
                                Valor = ValorDetalleGravadaAnticipo;
                            }
                            else
                            {
                                var DetallesM = detalles.Where(x => x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Exportacion).ToList();
                                var Detalles = ListaValoresOtraMoneda(ref objOperationResult, DetallesM, MReporte);
                                Valor = Detalles.Where(x => x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Exportacion && x.AnticipioDetalle == 1).Sum(u => u.ValorVentaOM) * -1 + Detalles.Where(x => x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Exportacion && x.AnticipioDetalle == 0).Sum(u => u.ValorVentaOM);      //ListaReporte.Where(x => x.IdCabecera == idCabecera && x.TipoOperacionGrilla == (int)TipoOperacionNueva.Gravada && x.AnticipioDetalle == 1).Sum(u => u.ValorVentaDetalle) * -1 + ListaReporte.Where(x => x.IdCabecera == idCabecera && x.TipoOperacionGrilla == (int)TipoOperacionNueva.Gravada && x.AnticipioDetalle == 0).Sum(u => u.ValorVentaDetalle);
                            }

                        }

                    }
                    else
                    {
                        Valor = 0;
                    }
                    break;
                case "BI":

                    if (TipoOperacionCabecera == (int)TipoOperacionNueva.Gravada)
                    {
                        if (_objDocumentoBL.DocumentoEsInverso(idTipoDocumento))
                        {
                            Valor = MReporte == MonedaRegistro ? ValorVenta * -1 : CalcularTotalesOtraMonedaVenta(ref objOperationResult, detalles, MReporte, TipoCalculo) * -1;
                        }
                        else
                        {
                            Valor = MReporte == MonedaRegistro ? ValorVenta : CalcularTotalesOtraMonedaVenta(ref objOperationResult, detalles, MReporte, TipoCalculo);
                        }

                    }

                    else if (TipoOperacionCabecera == (int)TipoOperacionNueva.Mixta)
                    {
                        //Tomar en cuenta Anticipo por Tipo Operacion  ... porque es Mixta
                        if (_objDocumentoBL.DocumentoEsInverso(idTipoDocumento))
                        {   //Aca no hay anticipo

                            if (MReporte == MonedaRegistro)
                            {
                                decimal ValorDetalleGravada = detalles.Where(x => x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Gravada).Sum(y => y.ValorVentaDetalle);
                                Valor = ValorDetalleGravada * -1;
                            }
                            else
                            {
                                var DetallesM = detalles.Where(x => x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Gravada).ToList();
                                var Detalles = ListaValoresOtraMoneda(ref  objOperationResult, DetallesM, MReporte);
                                Valor = Detalles.Where(x => x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Gravada).Sum(o => o.ValorVentaOM) * -1;
                            }

                        }
                        else
                        { // Aca si se considera Anticipo
                            decimal ValorDetalleGravadaAnticipo = detalles.Where(x => x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Gravada && x.AnticipioDetalle == 1).Sum(u => u.ValorVentaDetalle) * -1 + detalles.Where(x => x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Gravada && x.AnticipioDetalle == 0).Sum(u => u.ValorVentaDetalle);
                            if (MReporte == MonedaRegistro)
                            {
                                Valor = ValorDetalleGravadaAnticipo;
                            }
                            else
                            {
                                var DetallesM = detalles.Where(o => o.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Gravada).ToList();
                                var Detalles = ListaValoresOtraMoneda(ref objOperationResult, DetallesM, MReporte);
                                Valor = Detalles.Where(x => x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Gravada && x.AnticipioDetalle == 1).Sum(u => u.ValorVentaOM) * -1 + Detalles.Where(x => x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Gravada && x.AnticipioDetalle == 0).Sum(u => u.ValorVentaOM);
                            }

                        }

                    }
                    else if (TipoOperacionCabecera > 10 && TipoOperacionCabecera <= 19)
                    {
                        decimal ValoresBI = detalles.Sum(y => y.ValorVentaDetalle);
                        if (_objDocumentoBL.DocumentoEsInverso(idTipoDocumento))
                        {
                            Valor = MReporte == MonedaRegistro ? ValoresBI * -1 : MReporte == (int)Currency.Soles ? (ValoresBI * TipoCambio) * -1 : (ValoresBI / TipoCambio) * -1;
                        }
                        else
                        {
                            Valor = MReporte == MonedaRegistro ? ValoresBI : MReporte == (int)Currency.Soles ? ValoresBI * TipoCambio : ValoresBI / TipoCambio;
                        }
                    }
                    else
                    {

                        Valor = 0;
                    }
                    break;
                case "OT":
                    var ListaOtrosTributos = detalles.Where(x => x.EsOtrosTributos == true).ToList();
                    var OT = ListaReporte.FirstOrDefault().OtrosTributosC;
                    if (_objDocumentoBL.DocumentoEsInverso(idTipoDocumento))
                    {
                        if (Globals.ClientSession.v_RucEmpresa == Constants.RucAgrofergic)
                        {


                            if (MReporte == MonedaRegistro)
                            {
                                Valor = ListaOtrosTributos.Any() ? ListaOtrosTributos.Sum(o => o.ValorVentaDetalle) * -1 : 0;
                            }
                            else
                            {

                                Valor = ListaOtrosTributos.Any() ? ListaValoresOtraMoneda(ref objOperationResult, ListaOtrosTributos, MReporte).Sum(o => o.ValorVentaOM) * -1 : 0;
                            }

                        }
                        else
                        {

                            Valor = MReporte == MonedaRegistro ? OT * -1 : CalcularTotalesOtraMonedaVenta(ref objOperationResult, detalles, MReporte, TipoCalculo) * -1;
                        }
                    }
                    else
                    {
                        if (Globals.ClientSession.v_RucEmpresa == Constants.RucAgrofergic)
                        {

                            if (MReporte == MonedaRegistro)
                            {
                                Valor = ListaOtrosTributos.Any() ? ListaOtrosTributos.Sum(o => o.ValorVentaDetalle) : 0;
                            }
                            else
                            {
                                Valor = ListaOtrosTributos.Any() ? ListaValoresOtraMoneda(ref objOperationResult, ListaOtrosTributos, MReporte).Sum(o => o.ValorVentaOM) : 0;
                            }
                        }
                        else
                        {
                            Valor = MReporte == MonedaRegistro ? OT : MReporte == (int)Currency.Soles ? (OT * TipoCambio) : (OT / TipoCambio);
                        }
                    }
                    break;

                case "ISC":

                    decimal Isc = detalles.FirstOrDefault().ISC;

                    if (_objDocumentoBL.DocumentoEsInverso(idTipoDocumento))
                    {

                        Valor = MReporte == MonedaRegistro ? Isc * -1 : CalcularTotalesOtraMonedaVenta(ref objOperationResult, detalles, MReporte, TipoCalculo) * -1;// MonedaReporte == (int)Currency.Soles ? (Isc * TipoCambio) * -1 : (Isc / TipoCambio) * -1;
                    }
                    else
                    {
                        Valor = MReporte == MonedaRegistro ? Isc : CalcularTotalesOtraMonedaVenta(ref objOperationResult, detalles, MReporte, TipoCalculo);
                    }

                    break;

                case "IGV":


                    if ((TipoOperacionCabecera == (int)TipoOperacionNueva.Gravada || TipoOperacionCabecera == (int)TipoOperacionNueva.Exonerado || TipoOperacionCabecera == (int)TipoOperacionNueva.Inafecto))
                    {
                        decimal Igv = detalles.FirstOrDefault().IgvCabecera;
                        if (_objDocumentoBL.DocumentoEsInverso(idTipoDocumento))
                        {

                            Valor = MReporte == MonedaRegistro ? Igv * -1 : CalcularTotalesOtraMonedaVenta(ref  objOperationResult, detalles, MReporte, TipoCalculo) * -1;   //MonedaReporte == (int)Currency.Soles ? (Igv * TipoCambio) * -1 : (Igv / TipoCambio) * -1;
                        }
                        else
                        {
                            Valor = MReporte == MonedaRegistro ? Igv : CalcularTotalesOtraMonedaVenta(ref  objOperationResult, detalles, MReporte, TipoCalculo);   //MonedaReporte == (int)Currency.Soles ? Igv * TipoCambio : Igv / TipoCambio;
                        }

                    }
                    else if (TipoOperacionCabecera == (int)TipoOperacionNueva.Mixta)
                    {
                        if (_objDocumentoBL.DocumentoEsInverso(idTipoDocumento))
                        {   //Aca no hay anticipo
                            if (MReporte == MonedaRegistro)
                            {
                                decimal IgvDetalleGravada = detalles.Where(x => x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Gravada).Sum(y => y.IgvDetalle);
                                Valor = IgvDetalleGravada * -1;
                            }
                            else
                            {
                                var DetallesM = detalles.Where(x => x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Gravada).ToList();
                                var Detalles = ListaValoresOtraMoneda(ref  objOperationResult, DetallesM, MReporte);
                                Valor = Detalles.Where(x => x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Gravada).Sum(o => o.IgvOM) * -1;
                            }

                        }
                        else
                        { // Aca si se considera Anticipo
                            if (MReporte == MonedaRegistro)
                            {
                                decimal IgvDetalleGravadaAnticipo = detalles.Where(x => x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Gravada && x.AnticipioDetalle == 1).Sum(u => u.IgvDetalle) * -1 + detalles.Where(x => x.IdCabecera == idCabecera && x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Gravada && x.AnticipioDetalle == 0).Sum(u => u.IgvDetalle);
                                Valor = IgvDetalleGravadaAnticipo;

                            }
                            else
                            {
                                var DetallesM = detalles.Where(o => o.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Gravada).ToList();
                                var Detalles = ListaValoresOtraMoneda(ref objOperationResult, DetallesM, MReporte);
                                Valor = Detalles.Where(x => x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Gravada && x.AnticipioDetalle == 1).Sum(u => u.IgvOM) * -1 + Detalles.Where(x => x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Gravada && x.AnticipioDetalle == 0).Sum(u => u.IgvOM);
                            }

                        }

                    }
                    else if ((TipoOperacionCabecera > 10 && TipoOperacionCabecera <= 19) || (TipoOperacionCabecera > 20 && TipoOperacionCabecera < 30) || (TipoOperacionCabecera > 30 && TipoOperacionCabecera < 40))
                    {

                        decimal IgvDetalle = detalles.Where(x => x.IdCabecera == idCabecera).Sum(y => y.IgvDetalle);
                        if (_objDocumentoBL.DocumentoEsInverso(idTipoDocumento))
                        {
                            Valor = MReporte == MonedaRegistro ? IgvDetalle * -1 : MReporte == (int)Currency.Soles ? (IgvDetalle * TipoCambio) * -1 : (IgvDetalle / TipoCambio) * -1;
                        }
                        else
                        {
                            Valor = MReporte == MonedaRegistro ? IgvDetalle : MReporte == (int)Currency.Soles ? IgvDetalle * TipoCambio : IgvDetalle / TipoCambio;
                        }
                    }
                    else
                    {
                        Valor = 0;
                    }
                    break;


                case "E":

                    if (TipoOperacionCabecera == (int)TipoOperacionNueva.Exonerado)
                    {

                        if (_objDocumentoBL.DocumentoEsInverso(idTipoDocumento))
                        {   //Aca no hay anticipo

                            Valor = MReporte == MonedaRegistro ? ValorVenta * -1 : CalcularTotalesOtraMonedaVenta(ref objOperationResult, detalles, MReporte, TipoCalculo) * -1; //MonedaReporte == (int)Currency.Soles ? (ValorVenta * TipoCambio) * -1 : (ValorVenta / TipoCambio) * -1;
                        }
                        else
                        { // Aca si se considera Anticipo

                            Valor = MReporte == MonedaRegistro ? ValorVenta : CalcularTotalesOtraMonedaVenta(ref objOperationResult, detalles, MReporte, TipoCalculo);
                        }
                    }
                    else if (TipoOperacionCabecera == (int)TipoOperacionNueva.Mixta)
                    {
                        //Se debe restar los otros tributos , ya que se están considerando en la fila de otros tributos

                        if (Globals.ClientSession.v_RucEmpresa == Constants.RucAgrofergic)
                        {
                            if (_objDocumentoBL.DocumentoEsInverso(idTipoDocumento))
                            {   //Aca no hay anticipo
                                var Detalles = detalles.Where(x => x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Exonerado).ToList();
                                if (MReporte == MonedaRegistro)
                                {

                                    decimal OtrosTributosE = Detalles.Where(x => x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Exonerado && x.EsOtrosTributos == true).Sum(x => x.ValorVentaDetalle);
                                    decimal ValorExonerada = Detalles.Where(x => x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Exonerado).Sum(x => x.ValorVentaDetalle);
                                    Valor = (ValorExonerada - OtrosTributosE) * -1;

                                }
                                else
                                {
                                    var DetallesOT = Detalles.Where(x => x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Exonerado && x.EsOtrosTributos == true).ToList();
                                    var ListaOT = ListaValoresOtraMoneda(ref objOperationResult, DetallesOT, MReporte);
                                    var ListaExonerada = ListaValoresOtraMoneda(ref objOperationResult, Detalles, MReporte);
                                    decimal ValorExonerada = ListaExonerada.ToList().Sum(x => x.ValorVentaOM);
                                    decimal OtrosTributosE = ListaOT.Sum(x => x.ValorVentaOM);
                                    Valor = (ValorExonerada - OtrosTributosE) * -1;

                                }


                            }
                            else
                            { // Aca si se considera Anticipo

                                var Detalles = detalles.Where(x => x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Exonerado).ToList();
                                if (MReporte == MonedaRegistro)
                                {
                                    var ValorExoneradaAnticipio = detalles.Where(x => x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Exonerado && x.AnticipioDetalle == 1).Sum(x => x.ValorVentaDetalle) * -1 + detalles.Where(x => x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Exonerado && x.AnticipioDetalle == 0).Sum(x => x.ValorVentaDetalle);
                                    decimal OtrosTributosE = detalles.Where(x => x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Exonerado && x.EsOtrosTributos == true).Sum(x => x.ValorVentaDetalle);
                                    Valor = ValorExoneradaAnticipio - OtrosTributosE;
                                }
                                else
                                {

                                    var DetallesOT = Detalles.Where(x => x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Exonerado && x.EsOtrosTributos == true).ToList();
                                    var ListaOT = ListaValoresOtraMoneda(ref objOperationResult, DetallesOT, MReporte);
                                    var ListaExonerada = ListaValoresOtraMoneda(ref objOperationResult, Detalles, MReporte);
                                    decimal ValorExonerada = ListaExonerada.Where(o => o.AnticipioDetalle == 1).Sum(x => x.ValorVentaOM) * -1 + ListaExonerada.Where(o => o.AnticipioDetalle == 0).Sum(x => x.ValorVentaOM);
                                    decimal OtrosTributosE = ListaOT.Sum(x => x.ValorVentaOM);
                                    Valor = (ValorExonerada - OtrosTributosE);
                                }


                            }
                        }
                        else
                        {
                            var Detalles = detalles.Where(x => x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Exonerado).ToList();
                            var ListaExonerada = ListaValoresOtraMoneda(ref objOperationResult, Detalles, MReporte);
                            if (_objDocumentoBL.DocumentoEsInverso(idTipoDocumento))
                            {   //Aca no hay anticipo
                                if (MonedaRegistro == MReporte)
                                {
                                    decimal ValorExonerada = Detalles.Where(x => x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Exonerado).Sum(x => x.ValorVentaDetalle);
                                    Valor = (ValorExonerada) * -1;
                                }
                                else
                                {
                                    decimal ValorExonerada = ListaExonerada.Sum(o => o.ValorVentaOM);
                                    Valor = ValorExonerada * -1;

                                }
                            }
                            else
                            { // Aca si se considera Anticipo

                                if (MReporte == MonedaRegistro)
                                {
                                    Valor = Detalles.Where(o => o.AnticipioDetalle == 1).Sum(o => o.ValorVentaDetalle) * -1 + Detalles.Where(o => o.AnticipioDetalle == 0).Sum(o => o.ValorVentaDetalle);
                                }
                                else
                                {

                                    Valor = ListaExonerada.Where(o => o.AnticipioDetalle == 1).Sum(o => o.ValorVentaOM) * -1 + ListaExonerada.Where(o => o.AnticipioDetalle == 0).Sum(o => o.ValorVentaOM);
                                }
                                //  Valor = MonedaReporte == MonedaRegistro ? (ValorExoneradaAnticipio) : MonedaReporte == (int)Currency.Soles ? ((ValorExoneradaAnticipio) * TipoCambio) : ((ValorExoneradaAnticipio) / TipoCambio);

                            }

                        }

                    }
                    else if ((TipoOperacionCabecera > 20 && TipoOperacionCabecera < 30))
                    {
                        //var detalles = ListaReporte.Where(x => x.IdCabecera == idCabecera);
                        decimal ExoneradaDetalle = detalles.Where(x => x.IdCabecera == idCabecera).Sum(y => y.ValorVentaDetalle);

                        if (_objDocumentoBL.DocumentoEsInverso(idTipoDocumento))
                        {
                            Valor = MReporte == MonedaRegistro ? ExoneradaDetalle * -1 : MReporte == (int)Currency.Soles ? (ExoneradaDetalle * TipoCambio) * -1 : (ExoneradaDetalle / TipoCambio) * -1;
                        }
                        else
                        {
                            Valor = MReporte == MonedaRegistro ? ExoneradaDetalle : MReporte == (int)Currency.Soles ? ExoneradaDetalle * TipoCambio : ExoneradaDetalle / TipoCambio;
                        }
                    }

                    else
                    {
                        Valor = 0;
                    }

                    break;
                case "I":

                    if (TipoOperacionCabecera == (int)TipoOperacionNueva.Inafecto)
                    {

                        if (_objDocumentoBL.DocumentoEsInverso(idTipoDocumento))
                        {   //Aca no hay anticipo
                            Valor = MReporte == MonedaRegistro ? ValorVenta * -1 : CalcularTotalesOtraMonedaVenta(ref objOperationResult, detalles, MReporte, TipoCalculo) * -1;// MonedaReporte == (int)Currency.Soles ? (ValorVenta * TipoCambio) * -1 : (ValorVenta / TipoCambio) * -1;
                        }
                        else
                        { // Aca si se considera Anticipo

                            Valor = MReporte == MonedaRegistro ? ValorVenta : CalcularTotalesOtraMonedaVenta(ref objOperationResult, detalles, MReporte, TipoCalculo);//MonedaReporte == (int)Currency.Soles ? (ValorVenta * TipoCambio) : (ValorVenta / TipoCambio);
                        }
                    }
                    else if (TipoOperacionCabecera == (int)TipoOperacionNueva.Mixta)
                    {
                        var Detalles = detalles.Where(x => x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Inafecto).ToList();
                        decimal ValorInafecta = Detalles.Where(x => x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Inafecto).Sum(x => x.ValorVentaDetalle);
                        decimal OtrosTributosI = detalles.Where(x => x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Inafecto && x.EsOtrosTributos == true).Sum(x => x.ValorVentaDetalle);


                        if (Globals.ClientSession.v_RucEmpresa == Constants.RucAgrofergic)
                        {



                            if (_objDocumentoBL.DocumentoEsInverso(idTipoDocumento))
                            {   //Aca no hay anticipo



                                if (MReporte == MonedaRegistro)
                                {

                                    decimal OtrosTributosE = Detalles.Where(x => x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Inafecto && x.EsOtrosTributos == true).Sum(x => x.ValorVentaDetalle);
                                    decimal ValorExonerada = Detalles.Where(x => x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Inafecto).Sum(x => x.ValorVentaDetalle);
                                    Valor = (ValorExonerada - OtrosTributosE) * -1;

                                }
                                else
                                {
                                    var DetallesOT = Detalles.Where(x => x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Inafecto && x.EsOtrosTributos == true).ToList();
                                    var ListaOT = ListaValoresOtraMoneda(ref objOperationResult, DetallesOT, MReporte);
                                    var ListaExonerada = ListaValoresOtraMoneda(ref objOperationResult, Detalles, MReporte);
                                    decimal ValorExonerada = ListaExonerada.Sum(x => x.ValorVentaOM);
                                    decimal OtrosTributosE = ListaOT.Sum(x => x.ValorVentaOM);
                                    Valor = (ValorExonerada - OtrosTributosE) * -1;

                                }
                                //Valor = MonedaReporte == MonedaRegistro ? : MonedaReporte == (int)Currency.Soles ? ((ValorExonerada - OtrosTributosE) * TipoCambio) * -1 : ((ValorExonerada - OtrosTributosE) / TipoCambio) * -1;

                            }
                            else
                            { // Aca si se considera Anticipo


                                if (MReporte == MonedaRegistro)
                                {
                                    var ValorExoneradaAnticipio = Detalles.Where(x => x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Inafecto && x.AnticipioDetalle == 1).Sum(x => x.ValorVentaDetalle) * -1 + Detalles.Where(x => x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Inafecto && x.AnticipioDetalle == 0).Sum(x => x.ValorVentaDetalle);
                                    decimal OtrosTributosE = Detalles.Where(x => x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Inafecto && x.EsOtrosTributos == true).Sum(x => x.ValorVentaDetalle);
                                    Valor = ValorExoneradaAnticipio - OtrosTributosE;
                                }
                                else
                                {

                                    var DetallesOT = Detalles.Where(x => x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Inafecto && x.EsOtrosTributos == true).ToList();
                                    var ListaOT = ListaValoresOtraMoneda(ref objOperationResult, DetallesOT, MReporte);
                                    var ListaExonerada = ListaValoresOtraMoneda(ref objOperationResult, Detalles, MReporte);
                                    decimal ValorExonerada = ListaExonerada.Where(o => o.AnticipioDetalle == 1).Sum(x => x.ValorVentaOM) * -1 + ListaExonerada.Where(o => o.AnticipioDetalle == 0).Sum(x => x.ValorVentaOM);
                                    decimal OtrosTributosE = ListaOT.Sum(x => x.ValorVentaOM);
                                    Valor = (ValorExonerada - OtrosTributosE);



                                }


                            }

                        }
                        else
                        {

                            if (_objDocumentoBL.DocumentoEsInverso(idTipoDocumento))
                            {   //Aca no hay anticipo
                                Valor = MReporte == MonedaRegistro ? (ValorInafecta) * -1 : ListaValoresOtraMoneda(ref objOperationResult, Detalles, MReporte).Sum(o => o.ValorVentaOM) * -1; //MonedaReporte == (int)Currency.Soles ? ((ValorInafecta) * TipoCambio) * -1 : ((ValorInafecta) / TipoCambio) * -1;
                            }
                            else
                            { // Aca si se considera Anticipo
                                decimal ValorInafectaAnticipio = Detalles.Where(x => x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Inafecto && x.AnticipioDetalle == 1).Sum(x => x.ValorVentaDetalle) * -1 + Detalles.Where(x => x.TipoOperacionGrilla2Dig == (int)TipoOperacion1Digito.Inafecto && x.AnticipioDetalle == 0).Sum(x => x.ValorVentaDetalle);
                                if (MReporte == MonedaRegistro)
                                {
                                    Valor = ValorInafectaAnticipio;
                                }
                                else
                                {
                                    var ListaInafecta = ListaValoresOtraMoneda(ref objOperationResult, Detalles, MReporte);
                                    Valor = ListaInafecta.Where(o => o.AnticipioDetalle == 1).Sum(o => o.ValorVentaOM) * -1 + ListaInafecta.Where(o => o.AnticipioDetalle == 0).Sum(o => o.ValorVentaOM);

                                }//MonedaReporte == (int)Currency.Soles ? ((ValorInafectaAnticipio) * TipoCambio) : ((ValorInafectaAnticipio) / TipoCambio);
                            }
                        }


                    }
                    else if ((TipoOperacionCabecera > 30 && TipoOperacionCabecera < 40))
                    {
                        //var detalles = ListaReporte.Where(x => x.IdCabecera == idCabecera);
                        decimal InafectoDetalle = detalles.Where(x => x.IdCabecera == idCabecera).Sum(y => y.ValorVentaDetalle);

                        if (_objDocumentoBL.DocumentoEsInverso(idTipoDocumento))
                        {
                            Valor = MReporte == MonedaRegistro ? InafectoDetalle * -1 : MReporte == (int)Currency.Soles ? (InafectoDetalle * TipoCambio) * -1 : (InafectoDetalle / TipoCambio) * -1;
                        }
                        else
                        {
                            Valor = MReporte == MonedaRegistro ? InafectoDetalle : MReporte == (int)Currency.Soles ? InafectoDetalle * TipoCambio : InafectoDetalle / TipoCambio;
                        }
                    }
                    else
                    {
                        Valor = 0;
                    }

                    break;

            }
            return Utils.Windows.DevuelveValorRedondeado(Valor, 2);
        }



        private decimal CalcularTotalesOtraMonedaVenta(ref  OperationResult objOperationResult, List<ReporteRegistroVentaContable> ListaDetalles, int MonedaReporte, string TipoCalculo)
        {
            try
            {
                List<CalculosVenta> ListaCalculos = new List<CalculosVenta>();
                CalculosVenta objCalculos = new CalculosVenta();
                objOperationResult.Success = 1;
                foreach (var item in ListaDetalles)
                {
                    objCalculos = new CalculosVenta();
                    objCalculos = CalcularValoresFilaOtraMoneda(ref objOperationResult, MonedaReporte, item.AfectoIgv, item.PrecioIncluyeIgv, item.TipoCambio, item);
                    if (objOperationResult.Success == 0)
                    {
                        return 0;
                    }
                    ListaCalculos.Add(objCalculos);
                }
                if (ListaCalculos.Any())
                {
                    decimal SumAntValVenta = 0, SumAntIgv = 0, SumAntTotal = 0, SumAntISC = 0, SumAntOT = 0;
                    decimal SumValVenta = 0, SumIgv = 0, SumTotal = 0, SumISC = 0, SumOT = 0;

                    foreach (CalculosVenta Fila in ListaCalculos)
                    {

                        switch (Fila.AnticipioDetalle)
                        {
                            case 1:
                                SumAntValVenta = SumAntValVenta + Fila.ValorVentaOM;//  Fila.VA decimal.Parse(Fila.Cells["d_ValorVenta"].Value.ToString());
                                SumAntIgv = SumAntIgv + Fila.IgvOM;//  decimal.Parse(Fila.Cells["d_Igv"].Value.ToString());
                                SumAntTotal = SumAntTotal + Fila.PrecioVentaOM;//  decimal.Parse(Fila.Cells["d_PrecioVenta"].Value.ToString());
                                SumAntISC = SumAntISC + Fila.IscOM;//  decimal.Parse(Fila.Cells["d_isc"].Value.ToString());
                                SumAntOT = SumAntOT + Fila.OtrosTributosOM;//  decimal.Parse(Fila.Cells["d_otrostributos"].Value.ToString());
                                break;
                            case 0:
                                SumValVenta = SumValVenta + Fila.ValorVentaOM;   // decimal.Parse(Fila.Cells["d_ValorVenta"].Value.ToString());
                                SumIgv = SumIgv + Fila.IgvOM;   // decimal.Parse(Fila.Cells["d_Igv"].Value.ToString());
                                SumTotal = SumTotal + Fila.PrecioVentaOM;//  // decimal.Parse(Fila.Cells["d_PrecioVenta"].Value.ToString());
                                SumISC = SumISC + Fila.IscOM;// // decimal.Parse(Fila.Cells["d_isc"].Value.ToString());
                                SumOT = SumOT + Fila.OtrosTributosOM;//    decimal.Parse(Fila.Cells["d_otrostributos"].Value.ToString());
                                break;
                        }


                    }



                    if (TipoCalculo.StartsWith("VE"))
                    {
                        return Utils.Windows.DevuelveValorRedondeado(SumValVenta - SumAntValVenta, 2);
                    }
                    else if (TipoCalculo.StartsWith("BI"))
                    {
                        return Utils.Windows.DevuelveValorRedondeado(SumValVenta - SumAntValVenta, 2);
                    }
                    else if (TipoCalculo.StartsWith("IGV"))
                    {

                        return Utils.Windows.DevuelveValorRedondeado(SumIgv - SumAntIgv, 2);
                    }
                    else if (TipoCalculo.StartsWith("E"))
                    {
                        return Utils.Windows.DevuelveValorRedondeado(SumValVenta - SumAntValVenta, 2);
                    }
                    else if (TipoCalculo.StartsWith("ISC"))
                    {
                        return Utils.Windows.DevuelveValorRedondeado(SumISC - SumAntISC, 2);
                    }
                    else if (TipoCalculo.StartsWith("I"))
                    {
                        return Utils.Windows.DevuelveValorRedondeado(SumValVenta - SumAntValVenta, 2);
                    }
                    else if (TipoCalculo.StartsWith("T"))
                    {

                        return Utils.Windows.DevuelveValorRedondeado(SumTotal - SumAntTotal, 2);
                    }


                    return 0;
                }

                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                objOperationResult.Success = 0;
                return 0;

            }

        }


        private CalculosVenta CalcularValoresFilaOtraMoneda(ref OperationResult objOperationResult, int MonedaReporte, bool AfectoIgv, bool PrecioIncluyeIgv, decimal TipoCambio, ReporteRegistroVentaContable DetalleVenta)
        {
            try
            {


                objOperationResult.Success = 1;
                CalculosVenta objCalculados = new CalculosVenta();
                decimal d_ValorVentaOM = 0;
                decimal d_IgvOM = 0;
                decimal d_PrecioVentaOM = 0;
                decimal d_OtrosTributosOM = MonedaReporte == (int)Currency.Soles ? Utils.Windows.DevuelveValorRedondeado(DetalleVenta.OtrosTributosC * TipoCambio, 2) : Utils.Windows.DevuelveValorRedondeado(DetalleVenta.OtrosTributosC / TipoCambio, 2);
                decimal d_IscOM = MonedaReporte == (int)Currency.Soles ? Utils.Windows.DevuelveValorRedondeado(DetalleVenta.ISC * TipoCambio, 2) : Utils.Windows.DevuelveValorRedondeado(DetalleVenta.ISC / TipoCambio, 2);

                if (!AfectoIgv)
                {
                    d_ValorVentaOM = MonedaReporte == (int)Currency.Soles ? Utils.Windows.DevuelveValorRedondeado(DetalleVenta.ValorVentaDetalle * TipoCambio, 2) : Utils.Windows.DevuelveValorRedondeado(DetalleVenta.ValorVentaDetalle / TipoCambio, 2);
                    d_IgvOM = 0;
                    d_PrecioVentaOM = MonedaReporte == (int)Currency.Soles ? Utils.Windows.DevuelveValorRedondeado(DetalleVenta.PrecioVentaDetalle * TipoCambio, 2) : Utils.Windows.DevuelveValorRedondeado(DetalleVenta.PrecioVentaDetalle / TipoCambio, 2);

                }
                else if (AfectoIgv && !PrecioIncluyeIgv)
                {
                    if (MonedaReporte == (int)Currency.Soles)
                    {
                        d_ValorVentaOM = Utils.Windows.DevuelveValorRedondeado(DetalleVenta.ValorVentaDetalle * TipoCambio, 2);
                        d_IgvOM = Utils.Windows.DevuelveValorRedondeado(DetalleVenta.IgvDetalle * TipoCambio, 2);
                        d_PrecioVentaOM = d_ValorVentaOM + d_IgvOM;
                    }
                    else
                    {
                        d_ValorVentaOM = Utils.Windows.DevuelveValorRedondeado(DetalleVenta.ValorVentaDetalle / TipoCambio, 2);
                        d_IgvOM = Utils.Windows.DevuelveValorRedondeado(DetalleVenta.IgvDetalle / TipoCambio, 2);
                        d_PrecioVentaOM = d_ValorVentaOM + d_IgvOM;
                    }


                }
                else if (AfectoIgv && PrecioIncluyeIgv)
                {
                    d_ValorVentaOM = MonedaReporte == (int)Currency.Soles ? Utils.Windows.DevuelveValorRedondeado(DetalleVenta.ValorVentaDetalle * TipoCambio, 2) : Utils.Windows.DevuelveValorRedondeado(DetalleVenta.ValorVentaDetalle / TipoCambio, 2);
                    d_PrecioVentaOM = MonedaReporte == (int)Currency.Soles ? Utils.Windows.DevuelveValorRedondeado(DetalleVenta.PrecioVentaDetalle * TipoCambio, 2) : Utils.Windows.DevuelveValorRedondeado(DetalleVenta.PrecioVentaDetalle / TipoCambio, 2);
                    d_IgvOM = d_PrecioVentaOM - d_ValorVentaOM;
                }


                objCalculados.AnticipioDetalle = DetalleVenta.AnticipioDetalle;
                objCalculados.ValorVentaOM = d_ValorVentaOM;
                objCalculados.PrecioVentaOM = d_PrecioVentaOM;
                objCalculados.IscOM = d_IscOM;
                objCalculados.OtrosTributosOM = d_OtrosTributosOM;
                objCalculados.IgvOM = d_IgvOM;
                objCalculados.TipoOperacionGrilla2Dig = DetalleVenta.TipoOperacionGrilla2Dig;// DetalleVenta
                return objCalculados;


            }
            catch (Exception ex)
            {
                objOperationResult.Success = 0;
                return null;
            }
        }


        private List<CalculosVenta> ListaValoresOtraMoneda(ref  OperationResult objOperationResult, List<ReporteRegistroVentaContable> ListaDetalles, int MonedaReporte)
        {
            List<CalculosVenta> ListaCalculosVenta = new List<CalculosVenta>();
            CalculosVenta objCalculosVenta = new CalculosVenta();
            objOperationResult.Success = 1;
            foreach (var item in ListaDetalles)
            {
                objCalculosVenta = new CalculosVenta();
                objCalculosVenta = CalcularValoresFilaOtraMoneda(ref objOperationResult, MonedaReporte, item.AfectoIgv, item.PrecioIncluyeIgv, item.TipoCambio, item);
                if (objOperationResult.Success == 0)
                {
                    return null;
                }
                ListaCalculosVenta.Add(objCalculosVenta);
            }
            return ListaCalculosVenta;


        }


        public List<ReporteRegistroVentaClienteAnalitico> ReporteRegistroVentaClienteAnalitico(ref OperationResult objOperationResult, int pstri_IdEstablecimiento, DateTime? pstrt_FechaRegistroIni, DateTime? pstrt_FechaRegistroFin, int pintMonedaId, string pstrt_IdCliente, string pstrt_Orden, string pstr_grupollave, string pstr_Nombregrupollave, int ConsideraDocContables)
        {
            //mon.IsActive = true;
            try
            {
                SAMBHSEntitiesModelWin dbContext = new SAMBHSEntitiesModelWin();
                objOperationResult.Success = 1;
                #region Query

                List<ReporteRegistroVentaClienteAnalitico> query = new List<ReporteRegistroVentaClienteAnalitico>();

                List<ReporteRegistroVentaClienteAnalitico> Ventas =
                           (from A in dbContext.venta
                            join B in dbContext.cliente on new { C = A.v_IdCliente, eliminado = 0 } equals new { C = B.v_IdCliente, eliminado = B.i_Eliminado.Value } into B_join
                            from B in B_join.DefaultIfEmpty()
                            join C in dbContext.documento on new { T = A.i_IdTipoDocumento.Value, eliminado = 0 } equals new { T = C.i_CodigoDocumento, eliminado = C.i_Eliminado.Value } into C_join
                            from C in C_join.DefaultIfEmpty()
                            join D in dbContext.vendedor on new { v = A.v_IdVendedor, eliminado = 0 } equals new { v = D.v_IdVendedor, eliminado = D.i_Eliminado.Value } into D_join
                            from D in D_join.DefaultIfEmpty()
                            join E in dbContext.documento on new { e = A.i_IdTipoDocumento.Value, eliminado = 0 } equals new { e = E.i_CodigoDocumento, eliminado = E.i_Eliminado.Value } into E_join
                            from E in E_join.DefaultIfEmpty()
                            join F in dbContext.datahierarchy on new { m = A.i_IdMoneda.Value, Grupo = 18, eliminado = 0 } equals new { m = F.i_ItemId, Grupo = F.i_GroupId, eliminado = F.i_IsDeleted.Value } into F_join
                            from F in F_join.DefaultIfEmpty()
                            join I in dbContext.ventadetalle on new { v_IdVenta = A.v_IdVenta, eliminado = 0 }
                                        equals new { v_IdVenta = I.v_IdVenta, eliminado = I.i_Eliminado.Value } into I_join
                            from I in I_join.DefaultIfEmpty()
                            join J in dbContext.productodetalle on new { Prod = I.v_IdProductoDetalle, eliminado = 0 } equals new { Prod = J.v_IdProductoDetalle, eliminado = J.i_Eliminado.Value } into J_join
                            from J in J_join.DefaultIfEmpty()
                            join K in dbContext.producto on new { v_IdProducto = J.v_IdProducto, eliminado = 0 }
                                                           equals new { v_IdProducto = K.v_IdProducto, eliminado = K.i_Eliminado.Value } into K_join
                            from K in K_join.DefaultIfEmpty()

                            join M in dbContext.datahierarchy on new { Grupo = 23, eliminado = 0, item = A.i_IdCondicionPago.Value } equals new { Grupo = M.i_GroupId, eliminado = M.i_IsDeleted.Value, item = M.i_ItemId } into M_join
                            from M in M_join.DefaultIfEmpty()

                            where (A.i_Eliminado == 0 && A.i_IdEstado == 1 && I.i_Eliminado == 0)
                             && (A.t_FechaRegistro >= pstrt_FechaRegistroIni
                            && A.t_FechaRegistro <= pstrt_FechaRegistroFin)
                            && (B.v_CodCliente == pstrt_IdCliente || pstrt_IdCliente == "")
                            && A.i_IdEstablecimiento == Globals.ClientSession.i_IdEstablecimiento.Value

                            select new ReporteRegistroVentaClienteAnalitico
                            {

                                NombreMoneda = F == null ? "" : F.v_Value2,
                                IdMoneda = A.i_IdMoneda.Value,
                                NombreAlmacen = "",
                                NombreCliente = A.v_NombreClienteTemporal == "" ? B == null ? "** CLIENTE NO EXISTE **" : "CLIENTE :" + (B.v_PrimerNombre + " " + B.v_ApePaterno + " " + B.v_ApeMaterno + " " + B.v_RazonSocial).Trim() : B == null ? "** CLIENTE NO EXISTE **" : "CLIENTE :" + (B.v_PrimerNombre + " " + B.v_ApePaterno + " " + B.v_ApeMaterno + " " + A.v_NombreClienteTemporal).Trim(),
                                NroDocCliente = B.v_NroDocIdentificacion,
                                FechaRegistro = A.t_FechaRegistro.Value,
                                TipoDocumento = C == null ? "" : C.v_Siglas,
                                Documento = (A.v_SerieDocumento.Trim() + "-" + A.v_CorrelativoDocumento.Trim()),
                                NombreVendedor = D == null ? "**NO EXISTE VENDEDOR**" : D.v_NombreCompleto,
                                IdVendedor = D == null ? "" : D.v_IdVendedor,
                                IdProducto = K == null ? "" : K.v_CodInterno.Trim() + " " + K.v_Descripcion.Trim(),
                                NombreProducto = K == null ? I.i_Anticipio == 1 ? "ANTICIPIO" : "**NO EXISTE PRODUCTO**" : K.v_Descripcion,
                                CantidadDetalle = I == null ? 0 : I.d_Cantidad ?? 0,
                                PrecioDetalle = I == null ? 0 : I.d_Precio ?? 0,
                                ValorDetalle = I == null ? 0 : I.d_Valor ?? 0,
                                ValorVentaDetalle = I == null ? 0 : I.d_ValorVenta ?? 0,
                                DescuentoDetalle = I == null ? 0 : I.d_Descuento ?? 0,
                                PrecioVentaDetalle = I == null ? 0 : I.d_PrecioVenta ?? 0,
                                UnidadMedida = "",
                                IdTipoDocumento = A.i_IdTipoDocumento.Value,
                                TipoCambio = A.d_TipoCambio ?? 0,
                                IgvDetalle = I == null ? 0 : I.d_Igv ?? 0,
                                CorrelativoDocumento = C.v_Siglas + " " + A.v_SerieDocumento + " " + A.v_CorrelativoDocumento,
                                Grupollave = pstr_grupollave == "NOMBREPRODUCTO" ? K == null ? "** " + pstr_Nombregrupollave + " NO EXISTE **" : pstr_Nombregrupollave + " : " + K.v_CodInterno + " / " + K.v_Descripcion : "",
                                i_Anticipio = I.i_Anticipio == null ? 0 : I.i_Anticipio.Value,
                                CondicionVenta = M == null ? "" : M.v_Value1,
                                DocumentoContable = C.i_UsadoDocumentoContable == 1 ? "CONTABLE" : "NO CONTABLE",



                            }).ToList();


                List<ReporteRegistroVentaClienteAnalitico> Guias =
                                   (from A in dbContext.guiaremision
                                    join B in dbContext.cliente on new { C = A.v_IdCliente, eliminado = 0 } equals new { C = B.v_IdCliente, eliminado = B.i_Eliminado.Value } into B_join
                                    from B in B_join.DefaultIfEmpty()
                                    join C in dbContext.documento on new { T = A.i_IdTipoGuia.Value, eliminado = 0 } equals new { T = C.i_CodigoDocumento, eliminado = C.i_Eliminado.Value } into C_join
                                    from C in C_join.DefaultIfEmpty()

                                    join E in dbContext.documento on new { e = A.i_IdTipoGuia.Value, eliminado = 0 } equals new { e = E.i_CodigoDocumento, eliminado = E.i_Eliminado.Value } into E_join
                                    from E in E_join.DefaultIfEmpty()
                                    join F in dbContext.datahierarchy on new { m = A.i_IdMoneda.Value, Grupo = 18, eliminado = 0 } equals new { m = F.i_ItemId, Grupo = F.i_GroupId, eliminado = F.i_IsDeleted.Value } into F_join
                                    from F in F_join.DefaultIfEmpty()
                                    join I in dbContext.guiaremisiondetalle on new { v_IdVenta = A.v_IdGuiaRemision, eliminado = 0 }
                                                equals new { v_IdVenta = I.v_IdGuiaRemision, eliminado = I.i_Eliminado.Value } into I_join
                                    from I in I_join.DefaultIfEmpty()
                                    join J in dbContext.productodetalle on new { Prod = I.v_IdProductoDetalle, eliminado = 0 } equals new { Prod = J.v_IdProductoDetalle, eliminado = J.i_Eliminado.Value } into J_join
                                    from J in J_join.DefaultIfEmpty()
                                    join K in dbContext.producto on new { v_IdProducto = J.v_IdProducto, eliminado = 0 }
                                                                   equals new { v_IdProducto = K.v_IdProducto, eliminado = K.i_Eliminado.Value } into K_join
                                    from K in K_join.DefaultIfEmpty()

                                    where (A.i_Eliminado == 0 && A.i_IdEstado == 1 && I.i_Eliminado == 0)
                                     && (A.t_FechaEmision >= pstrt_FechaRegistroIni
                                    && A.t_FechaEmision <= pstrt_FechaRegistroFin)
                                    && (B.v_CodCliente == pstrt_IdCliente || pstrt_IdCliente == "")

                                    && (A.i_IdTipoGuia == (int)TiposDocumentos.GuiaInterna)


                                    select new ReporteRegistroVentaClienteAnalitico
                                    {

                                        NombreMoneda = F == null ? "" : F.v_Value2,
                                        IdMoneda = A.i_IdMoneda.Value,
                                        NombreAlmacen = "",
                                        NombreCliente = A.i_IdEstado == 0 ? "A N U L A D O" : B == null ? "** CLIENTE NO EXISTE **" : "CLIENTE :" + (B.v_PrimerNombre + " " + B.v_ApePaterno + " " + B.v_ApeMaterno + " " + B.v_RazonSocial).Trim(),
                                        NroDocCliente = B.v_NroDocIdentificacion,
                                        FechaRegistro = A.t_FechaEmision.Value,
                                        TipoDocumento = C == null ? "" : C.v_Siglas,
                                        Documento = A.v_SerieGuiaRemision == null || A.v_NumeroGuiaRemision == null ? "" : (A.v_SerieGuiaRemision.Trim() + "-" + A.v_NumeroGuiaRemision.Trim()),
                                        NombreVendedor = "",
                                        IdVendedor = null,
                                        IdProducto = K == null ? "" : K.v_CodInterno.Trim() + " " + K.v_Descripcion.Trim(),
                                        NombreProducto = K == null ? "" : K.v_Descripcion,
                                        CantidadDetalle = I == null ? 0 : I.d_Cantidad ?? 0,
                                        PrecioDetalle = I == null ? 0 : I.d_Precio ?? 0,
                                        ValorDetalle = I == null ? 0 : I.d_Valor ?? 0,
                                        ValorVentaDetalle = I == null ? 0 : I.d_ValorVenta ?? 0,
                                        DescuentoDetalle = I == null ? 0 : I.d_Descuento ?? 0,
                                        PrecioVentaDetalle = I == null ? 0 : I.d_Total ?? 0,
                                        UnidadMedida = "",
                                        IdTipoDocumento = A.i_IdTipoGuia.Value,
                                        TipoCambio = A.d_TipoCambio.Value,
                                        IgvDetalle = I == null ? 0 : I.d_Igv ?? 0,
                                        CorrelativoDocumento = C.v_Siglas + " " + A.v_SerieGuiaRemision + " " + A.v_NumeroGuiaRemision,
                                        Grupollave = pstr_grupollave == "NOMBREPRODUCTO" ? K == null ? "** " + pstr_Nombregrupollave + " NO EXISTE **" : pstr_Nombregrupollave + " : " + K.v_CodInterno + " / " + K.v_Descripcion : "",
                                        i_Anticipio = 0,
                                        CondicionVenta = "",
                                        DocumentoContable = C.i_UsadoDocumentoContable == 1 ? "CONTABLE" : "NO CONTABLE",
                                    }).ToList();

                var VG = Ventas.Concat(Guias).ToList();
                //if (ConsideraDocContables == 0)
                //{
                //    query = VG.ToList().Where(x => _objDocumentoBL.DocumentoEsContable(x.IdTipoDocumento)).AsQueryable().ToList();

                //}
                //else
                //{
                //    query = VG.ToList();
                //}
                query = ConsideraDocContables == -1 ? VG.ToList() : ConsideraDocContables == 1 ? query = VG.ToList().Where(x => _objDocumentoBL.DocumentoEsContable(x.IdTipoDocumento)).ToList() : VG.ToList().Where(x => !_objDocumentoBL.DocumentoEsContable(x.IdTipoDocumento)).ToList();

                var query1 = (from A in query.ToList()
                              let ValorVenta = CalcularVentaDetalle(A.IdTipoDocumento, A.PrecioDetalle, A.ValorDetalle, A.ValorVentaDetalle, A.DescuentoDetalle, A.PrecioVentaDetalle, A.IgvDetalle, A.TipoCambio, A.IdMoneda)
                              select new ReporteRegistroVentaClienteAnalitico
                              {
                                  NombreMoneda = A.NombreMoneda,
                                  IdMoneda = A.IdMoneda,
                                  NombreAlmacen = "",
                                  NombreCliente = A.NombreCliente,
                                  NroDocCliente = A.NroDocCliente,
                                  FechaRegistro = A.FechaRegistro,
                                  TipoDocumento = A.TipoDocumento,
                                  Documento = A.Documento,
                                  NombreVendedor = A.NombreVendedor,
                                  IdVendedor = A.IdVendedor,
                                  IdProducto = A.IdProducto,
                                  NombreProducto = A.NombreProducto,
                                  CantidadDetalle = _objDocumentoBL.DocumentoEsInverso(A.IdTipoDocumento) ? A.CantidadDetalle * -1 : A.CantidadDetalle,
                                  PrecioDetalle = A.i_Anticipio == 1 ? ValorVenta.PrecioDetalleSoles * -1 : ValorVenta.PrecioDetalleSoles,
                                  ValorDetalle = A.i_Anticipio == 1 ? ValorVenta.ValorDetalleSoles * -1 : ValorVenta.ValorDetalleSoles,
                                  ValorVentaDetalle = A.i_Anticipio == 1 ? ValorVenta.ValorVentaDetalleSoles * -1 : ValorVenta.ValorVentaDetalleSoles,
                                  DescuentoDetalle = A.i_Anticipio == 1 ? ValorVenta.DescuentoDetalleSoles * -1 : ValorVenta.DescuentoDetalleSoles,
                                  PrecioVentaDetalle = A.i_Anticipio == 1 ? ValorVenta.PrecioVentaDetalleSoles * -1 : ValorVenta.PrecioVentaDetalleSoles,
                                  UnidadMedida = "",
                                  IdTipoDocumento = A.IdTipoDocumento,
                                  TipoCambio = A.TipoCambio,
                                  IgvDetalle = A.i_Anticipio == 1 ? ValorVenta.IgvDetalleSoles * -1 : ValorVenta.IgvDetalleSoles,
                                  PrecioDetalleD = A.i_Anticipio == 1 ? ValorVenta.PrecioDetalleDolares : ValorVenta.PrecioDetalleDolares,
                                  ValorDetalleD = A.i_Anticipio == 1 ? ValorVenta.ValorDetalleDolares * -1 : ValorVenta.ValorDetalleDolares,
                                  ValorVentaDetalleD = A.i_Anticipio == 1 ? ValorVenta.ValorVentaDetalleDolares * -1 : ValorVenta.ValorVentaDetalleDolares,
                                  DescuentoDetalleD = A.i_Anticipio == 1 ? ValorVenta.DescuentoDetalleDolares * -1 : ValorVenta.DescuentoDetalleDolares,
                                  PrecioVentaDetalleD = A.i_Anticipio == 1 ? ValorVenta.PrecioVentaDetalleDolares * -1 : ValorVenta.PrecioVentaDetalleDolares,
                                  IgvDetalleD = A.i_Anticipio == 1 ? ValorVenta.IgvDetalleDolares * -1 : ValorVenta.IgvDetalleDolares,
                                  CorrelativoDocumento = A.CorrelativoDocumento,
                                  Grupollave = A.Grupollave,
                                  CondicionVenta = A.CondicionVenta,
                                  DocumentoContable = A.DocumentoContable,

                              });

                #endregion

                return query1.ToList().AsQueryable().OrderBy(pstrt_Orden).ToList();
            }
            catch (Exception ex)
            {

                objOperationResult.Success = 0;
                return null;
            }
        }

        public List<ReporteRegistroVentaClienteResumen> ReporteRegistroVentaClienteResumen_(string pstrv_Periodo, int pstri_IdEstablecimiento, DateTime? pstrt_FechaRegistroIni, DateTime? pstrt_FechaRegistroFin, int pintIdMoneda, string pstrt_IdCliente, string pstrt_Orden)
        {
            //mon.IsActive = true;
            try
            {
                SAMBHSEntitiesModelWin dbContext = new SAMBHSEntitiesModelWin();

                #region Query
                var query =
                        (from A in dbContext.venta
                         join B in dbContext.cliente on A.v_IdCliente equals B.v_IdCliente
                         join D in dbContext.vendedor on A.v_IdVendedor equals D.v_IdVendedor
                         join F in dbContext.datahierarchy on A.i_IdMoneda equals F.i_ItemId
                         where F.i_GroupId == 18

                         where A.i_Eliminado == 0 && B.i_Eliminado == 0 && D.i_Eliminado == 0 && A.i_IdEstado == 1
                         && A.v_Periodo == pstrv_Periodo && (A.t_FechaRegistro >= pstrt_FechaRegistroIni
                         && A.t_FechaRegistro <= pstrt_FechaRegistroFin)
                         && (B.v_CodCliente == pstrt_IdCliente || pstrt_IdCliente == "")
                         && A.i_IdEstablecimiento == Globals.ClientSession.i_IdEstablecimiento.Value

                         select new ReporteRegistroVentaClienteResumen
                         {
                             IdCliente = A.v_IdCliente,
                             NombreCliente = A.v_NombreClienteTemporal == "" ? (B.v_PrimerNombre + " " + B.v_ApePaterno + " " + B.v_ApeMaterno + " " + B.v_RazonSocial).Trim() : (B.v_PrimerNombre + " " + B.v_ApePaterno + " " + B.v_ApeMaterno + " " + A.v_NombreClienteTemporal).Trim(),
                             NroDocCliente = B.v_NroDocIdentificacion,
                             Total = A.d_Total.Value,
                             Descuento = A.d_Descuento.Value,
                             IdTipoDocumento = A.i_IdTipoDocumento.Value,
                             TipoCambio = A.d_TipoCambio.Value,
                             IdMoneda = A.i_IdMoneda.Value,
                             NombreEmpresaPropietaria = "",
                             RucEmpresaPropietaria = ""

                         });

                switch (pstrt_Orden)
                {
                    case "Total":
                        query = query.OrderBy("Total DESC");
                        break;

                    case "NombreCliente":
                        query = query.OrderBy("NombreCliente ASC");
                        break;
                }
                var query1 = (from A in query.ToList()
                              let ValorVenta = CalcularVenta(A.IdTipoDocumento, 1, 1, A.Total, A.Descuento, A.TipoCambio, A.IdMoneda)

                              select new ReporteRegistroVentaClienteResumen
                              {
                                  IdCliente = A.IdCliente,
                                  NombreCliente = A.NombreCliente,
                                  NroDocCliente = A.NroDocCliente,
                                  Total = ValorVenta.TotalSoles,
                                  Descuento = ValorVenta.DescuentoSoles,
                                  TotalD = ValorVenta.TotalDolares,
                                  DescuentoD = ValorVenta.DescuentoDolares,
                                  IdTipoDocumento = A.IdTipoDocumento,
                                  TipoCambio = A.TipoCambio,
                                  IdMoneda = A.IdMoneda,
                                  NombreEmpresaPropietaria = DevolverNombreEmpresaPropietaria()[0],
                                  RucEmpresaPropietaria = DevolverNombreEmpresaPropietaria()[1],

                              });

                #endregion


                return query1.ToList();
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public List<ReporteRegistroVentaClienteResumen> ReporteRegistroVentaClienteResumen(ref OperationResult objOperationResult, int pstri_IdEstablecimiento, DateTime? pstrt_FechaRegistroIni, DateTime? pstrt_FechaRegistroFin, int pintIdMoneda, string pstrt_IdCliente, string pstrt_Orden, int ConsideraDocContables)
        {
            //mon.IsActive = true;
            try
            {
                SAMBHSEntitiesModelWin dbContext = new SAMBHSEntitiesModelWin();
                objOperationResult.Success = 1;
                List<ReporteRegistroVentaClienteResumen> ListaReporte = new List<ReporteRegistroVentaClienteResumen>();
                //1. query para obtener toda la data filtrada por los parametros
                #region Query
                var queryventas =
                        (from A in dbContext.venta
                         join B in dbContext.cliente on A.v_IdCliente equals B.v_IdCliente
                         join D in dbContext.vendedor on A.v_IdVendedor equals D.v_IdVendedor
                         join F in dbContext.datahierarchy on A.i_IdMoneda equals F.i_ItemId
                         where (F.i_GroupId == 18 && F.i_IsDeleted == 0)
                         where (A.i_Eliminado == 0 && A.i_IdEstado == 1) && B.i_Eliminado == 0 && D.i_Eliminado == 0
                         && (A.t_FechaRegistro >= pstrt_FechaRegistroIni
                         && A.t_FechaRegistro <= pstrt_FechaRegistroFin)
                         && (B.v_CodCliente == pstrt_IdCliente || pstrt_IdCliente == "")
                         && A.i_IdEstablecimiento == Globals.ClientSession.i_IdEstablecimiento.Value

                         select new ReporteRegistroVentaClienteResumen
                         {
                             IdCliente = B.v_CodCliente,
                             NombreCliente = A.v_NombreClienteTemporal == "" ? (B.v_PrimerNombre + " " + B.v_ApePaterno + " " + B.v_ApeMaterno + " " + B.v_RazonSocial).Trim() : (B.v_PrimerNombre + " " + B.v_ApePaterno + " " + B.v_ApeMaterno + " " + A.v_NombreClienteTemporal).Trim(),
                             NroDocCliente = B.v_NroDocIdentificacion,
                             Total = A.d_Total.Value,
                             //  Total = A.d_ValorVenta.Value  ,
                             Descuento = A.d_Descuento.Value,
                             IdTipoDocumento = A.i_IdTipoDocumento.Value,
                             TipoCambio = A.d_TipoCambio.Value,
                             IdMoneda = A.i_IdMoneda.Value,

                         }).ToList().Select(n => new ReporteRegistroVentaClienteResumen
                         {
                             IdCliente = n.IdCliente,
                             NombreCliente = n.NombreCliente,
                             NroDocCliente = n.NroDocCliente,
                             Total = pintIdMoneda == (int)Currency.Soles && n.IdMoneda == (int)Currency.Soles ? _objDocumentoBL.DocumentoEsInverso(n.IdTipoDocumento) ? n.Total * -1 : n.Total :
                                     pintIdMoneda == (int)Currency.Soles && n.IdMoneda == (int)Currency.Dolares ? _objDocumentoBL.DocumentoEsInverso(n.IdTipoDocumento) ? (n.Total * -1) * n.TipoCambio : n.Total * n.TipoCambio :
                                     pintIdMoneda == (int)Currency.Dolares && n.IdMoneda == (int)Currency.Soles ? _objDocumentoBL.DocumentoEsInverso(n.IdTipoDocumento) ? (n.Total * -1) * n.TipoCambio : n.Total * n.TipoCambio :
                                    pintIdMoneda == (int)Currency.Dolares && n.IdMoneda == (int)Currency.Dolares ? _objDocumentoBL.DocumentoEsInverso(n.IdTipoDocumento) ? (n.Total * -1) * n.TipoCambio : n.Total * n.TipoCambio : 0,

                             TotalD = pintIdMoneda == (int)Currency.Dolares && n.IdMoneda == (int)Currency.Dolares ? _objDocumentoBL.DocumentoEsInverso(n.IdTipoDocumento) ? n.Total * -1 : n.Total :
                              pintIdMoneda == (int)Currency.Dolares && n.IdMoneda == (int)Currency.Soles ? _objDocumentoBL.DocumentoEsInverso(n.IdTipoDocumento) ? (n.Total * -1) / n.TipoCambio : n.Total / n.TipoCambio :
                              pintIdMoneda == (int)Currency.Soles && n.IdMoneda == (int)Currency.Dolares ? _objDocumentoBL.DocumentoEsInverso(n.IdTipoDocumento) ? (n.Total * -1) * n.TipoCambio : n.Total * n.TipoCambio :
                             pintIdMoneda == (int)Currency.Soles && n.IdMoneda == (int)Currency.Soles ? _objDocumentoBL.DocumentoEsInverso(n.IdTipoDocumento) ? (n.Total * -1) / n.TipoCambio : n.Total / n.TipoCambio : 0,


                             Descuento = pintIdMoneda == (int)Currency.Soles ? _objDocumentoBL.DocumentoEsInverso(n.IdTipoDocumento) ? n.Descuento * -1 : n.Descuento : _objDocumentoBL.DocumentoEsInverso(n.IdTipoDocumento) ? (n.Descuento * -1) * n.TipoCambio : n.Descuento * n.TipoCambio,
                             DescuentoD = pintIdMoneda == (int)Currency.Dolares ? _objDocumentoBL.DocumentoEsInverso(n.IdTipoDocumento) ? n.Descuento * -1 : n.Descuento : _objDocumentoBL.DocumentoEsInverso(n.IdTipoDocumento) ? (n.Descuento * -1) / n.TipoCambio : n.Descuento / n.TipoCambio,
                             IdTipoDocumento = n.IdTipoDocumento,
                             TipoCambio = n.TipoCambio,
                             IdMoneda = n.IdMoneda,
                         });



                var queryGuiasInternas = (from A in dbContext.guiaremision
                                          join B in dbContext.cliente on A.v_IdCliente equals B.v_IdCliente into B_join
                                          from B in B_join.DefaultIfEmpty()

                                          join F in dbContext.datahierarchy on A.i_IdMoneda equals F.i_ItemId into F_join
                                          from F in F_join.DefaultIfEmpty()
                                          where (F.i_GroupId == 18 && F.i_IsDeleted == 0)
                                          where (A.i_Eliminado == 0 && A.i_IdEstado == 1) && B.i_Eliminado == 0
                                          && (A.t_FechaEmision >= pstrt_FechaRegistroIni
                                          && A.t_FechaEmision <= pstrt_FechaRegistroFin)
                                          && (B.v_CodCliente == pstrt_IdCliente || pstrt_IdCliente == "")
                                          && A.i_IdTipoGuia == (int)TiposDocumentos.GuiaInterna
                                          select new ReporteRegistroVentaClienteResumen
                                          {
                                              IdCliente = B.v_CodCliente,
                                              NombreCliente = B == null ? "" : (B.v_PrimerNombre + " " + B.v_ApePaterno + " " + B.v_ApeMaterno + " " + B.v_RazonSocial).Trim(),
                                              NroDocCliente = B.v_NroDocIdentificacion,
                                              Total = A.d_Total.Value,
                                              //Total = A.d_Total.Value ,
                                              Descuento = 0,
                                              IdTipoDocumento = A.i_IdTipoDocumento.Value,
                                              TipoCambio = A.d_TipoCambio.Value,
                                              IdMoneda = A.i_IdMoneda.Value,

                                          }).ToList().Select(n => new ReporteRegistroVentaClienteResumen
                                          {
                                              IdCliente = n.IdCliente,
                                              NombreCliente = n.NombreCliente,
                                              NroDocCliente = n.NroDocCliente,
                                              Total = pintIdMoneda == (int)Currency.Soles && n.IdMoneda == (int)Currency.Soles ? _objDocumentoBL.DocumentoEsInverso(n.IdTipoDocumento) ? n.Total * -1 : n.Total :
                                                      pintIdMoneda == (int)Currency.Soles && n.IdMoneda == (int)Currency.Dolares ? _objDocumentoBL.DocumentoEsInverso(n.IdTipoDocumento) ? (n.Total * -1) * n.TipoCambio : n.Total * n.TipoCambio :
                                                      pintIdMoneda == (int)Currency.Dolares && n.IdMoneda == (int)Currency.Soles ? _objDocumentoBL.DocumentoEsInverso(n.IdTipoDocumento) ? (n.Total * -1) * n.TipoCambio : n.Total * n.TipoCambio :
                                                     pintIdMoneda == (int)Currency.Dolares && n.IdMoneda == (int)Currency.Dolares ? _objDocumentoBL.DocumentoEsInverso(n.IdTipoDocumento) ? (n.Total * -1) * n.TipoCambio : n.Total * n.TipoCambio : 0,

                                              TotalD = pintIdMoneda == (int)Currency.Dolares && n.IdMoneda == (int)Currency.Dolares ? _objDocumentoBL.DocumentoEsInverso(n.IdTipoDocumento) ? n.Total * -1 : n.Total :
                                               pintIdMoneda == (int)Currency.Dolares && n.IdMoneda == (int)Currency.Soles ? _objDocumentoBL.DocumentoEsInverso(n.IdTipoDocumento) ? (n.Total * -1) / n.TipoCambio : n.Total / n.TipoCambio :
                                               pintIdMoneda == (int)Currency.Soles && n.IdMoneda == (int)Currency.Dolares ? _objDocumentoBL.DocumentoEsInverso(n.IdTipoDocumento) ? (n.Total * -1) * n.TipoCambio : n.Total * n.TipoCambio :
                                              pintIdMoneda == (int)Currency.Soles && n.IdMoneda == (int)Currency.Soles ? _objDocumentoBL.DocumentoEsInverso(n.IdTipoDocumento) ? (n.Total * -1) / n.TipoCambio : n.Total / n.TipoCambio : 0,


                                              Descuento = pintIdMoneda == (int)Currency.Soles ? _objDocumentoBL.DocumentoEsInverso(n.IdTipoDocumento) ? n.Descuento * -1 : n.Descuento : _objDocumentoBL.DocumentoEsInverso(n.IdTipoDocumento) ? (n.Descuento * -1) * n.TipoCambio : n.Descuento * n.TipoCambio,
                                              DescuentoD = pintIdMoneda == (int)Currency.Dolares ? _objDocumentoBL.DocumentoEsInverso(n.IdTipoDocumento) ? n.Descuento * -1 : n.Descuento : _objDocumentoBL.DocumentoEsInverso(n.IdTipoDocumento) ? (n.Descuento * -1) / n.TipoCambio : n.Descuento / n.TipoCambio,
                                              IdTipoDocumento = n.IdTipoDocumento,
                                              TipoCambio = n.TipoCambio,
                                              IdMoneda = n.IdMoneda,
                                          });

                var queryGV = queryventas.Concat(queryGuiasInternas).ToList();
                //if (ConsideraDocContables == 0)
                //{
                //    queryGV = queryGV.Where(x => _objDocumentoBL.DocumentoEsContable(x.IdTipoDocumento)).ToList();

                //}
                queryGV = ConsideraDocContables == -1 ? queryGV : ConsideraDocContables == 1 ? queryGV.Where(x => _objDocumentoBL.DocumentoEsContable(x.IdTipoDocumento)).ToList() : queryGV.Where(x => !_objDocumentoBL.DocumentoEsContable(x.IdTipoDocumento)).ToList();

                // 2.- Query para agrupary ordenar 

                var objData = new List<ReporteRegistroVentaClienteResumen>();
                switch (pstrt_Orden)
                {
                    case "TOTAL":
                        objData = queryGV.GroupBy(x => new { x.IdCliente })
                                                    .Select(group => group.First())

                                                    .OrderByDescending(o => o.Total).ToList();
                        break;
                    case "NOMBRECLIENTE":

                        objData = queryGV.GroupBy(x => new { x.IdCliente })
                                                    .Select(group => group.First())

                                                    .OrderBy(o => o.NombreCliente).ToList();
                        break;
                }

                #endregion
                ReporteRegistroVentaClienteResumen objReporte = new ReporteRegistroVentaClienteResumen();
                foreach (var item in objData)
                {

                    objReporte = new ReporteRegistroVentaClienteResumen();
                    objReporte.IdCliente = item.IdCliente;
                    objReporte.NombreCliente = item.NombreCliente;

                    var ListaVentaCliente = queryGV.ToList().Where(x => x.IdCliente == item.IdCliente).ToList();
                    objReporte.Total = ListaVentaCliente.Sum(x => x.Total);
                    objReporte.TotalD = ListaVentaCliente.Sum(x => x.TotalD);
                    objReporte.Descuento = ListaVentaCliente.Sum(x => x.Descuento);
                    objReporte.DescuentoD = ListaVentaCliente.Sum(x => x.DescuentoD);
                    objReporte.TipoCambio = item.TipoCambio;
                    objReporte.IdMoneda = item.IdMoneda;
                    ListaReporte.Add(objReporte);
                }

                //2.- Query para hacer càculos en memoria 


                return ListaReporte;
            }
            catch (Exception ex)
            {
                objOperationResult.Success = 0;
                return null;
            }
        }

        private valoresRegistroVenta CalcularVenta(int pintTipoDocumento, decimal pdecValorVenta, decimal pdecIgv, decimal pdecTotal, decimal pdecDescuento, decimal pdecTipoCambio, int pintMonedaId)
        {

            valoresRegistroVenta objvaloresRegistroVenta = new valoresRegistroVenta();
            if (pdecTipoCambio == 0 || pdecTipoCambio == null)
            {
                pdecTipoCambio = 1;
            }
            if (_objDocumentoBL.DocumentoEsInverso(pintTipoDocumento))
            {
                if (pintMonedaId == (int)Currency.Soles)
                {
                    objvaloresRegistroVenta.ValorVentaSoles = pdecValorVenta * -1;
                    objvaloresRegistroVenta.ValorVentaDolares = (pdecValorVenta * -1) / pdecTipoCambio;

                    objvaloresRegistroVenta.IgvSoles = pdecIgv * -1;
                    objvaloresRegistroVenta.IgvDolares = (pdecIgv * -1) / pdecTipoCambio;

                    objvaloresRegistroVenta.TotalSoles = pdecTotal * -1;
                    objvaloresRegistroVenta.TotalDolares = (pdecTotal * -1) / pdecTipoCambio;

                    objvaloresRegistroVenta.DescuentoSoles = pdecDescuento * -1;
                    objvaloresRegistroVenta.DescuentoDolares = (pdecDescuento * -1) / pdecTipoCambio;

                }
                else if (pintMonedaId == (int)Currency.Dolares)
                {
                    objvaloresRegistroVenta.ValorVentaSoles = pdecValorVenta * -1 * pdecTipoCambio;
                    objvaloresRegistroVenta.ValorVentaDolares = (pdecValorVenta * -1);

                    objvaloresRegistroVenta.IgvSoles = pdecIgv * -1 * pdecTipoCambio;
                    objvaloresRegistroVenta.IgvDolares = (pdecIgv * -1);

                    objvaloresRegistroVenta.TotalSoles = pdecTotal * -1 * pdecTipoCambio;
                    objvaloresRegistroVenta.TotalDolares = (pdecTotal * -1);

                    objvaloresRegistroVenta.DescuentoSoles = pdecDescuento * -1 * pdecTipoCambio;
                    objvaloresRegistroVenta.DescuentoDolares = (pdecDescuento * -1);
                }

            }
            else
            {
                if (pintMonedaId == (int)Currency.Soles)
                {
                    objvaloresRegistroVenta.ValorVentaSoles = pdecValorVenta;
                    objvaloresRegistroVenta.ValorVentaDolares = (pdecValorVenta) / pdecTipoCambio;

                    objvaloresRegistroVenta.IgvSoles = pdecIgv;
                    objvaloresRegistroVenta.IgvDolares = (pdecIgv) / pdecTipoCambio;

                    objvaloresRegistroVenta.TotalSoles = pdecTotal;
                    objvaloresRegistroVenta.TotalDolares = (pdecTotal) / pdecTipoCambio;

                    objvaloresRegistroVenta.DescuentoSoles = pdecDescuento;
                    objvaloresRegistroVenta.DescuentoDolares = (pdecDescuento) / pdecTipoCambio;

                }
                else if (pintMonedaId == (int)Currency.Dolares)
                {
                    objvaloresRegistroVenta.ValorVentaSoles = pdecValorVenta * pdecTipoCambio;
                    objvaloresRegistroVenta.ValorVentaDolares = (pdecValorVenta);

                    objvaloresRegistroVenta.IgvSoles = pdecIgv * pdecTipoCambio;
                    objvaloresRegistroVenta.IgvDolares = (pdecIgv);

                    objvaloresRegistroVenta.TotalSoles = pdecTotal * pdecTipoCambio;
                    objvaloresRegistroVenta.TotalDolares = (pdecTotal);

                    objvaloresRegistroVenta.DescuentoSoles = pdecDescuento * pdecTipoCambio;
                    objvaloresRegistroVenta.DescuentoDolares = (pdecDescuento);
                }
            }
            return objvaloresRegistroVenta;

        }


        /*   private valoresRegistroVenta CalcularVentaAnaliticoDAOT(int pintTipoDocumento, decimal pdecValorVenta, decimal pdecIgv, decimal pdecTotal, decimal pdecDescuento, decimal pdecTipoCambio, int pintMonedaId)
           {

               valoresRegistroVenta objvaloresRegistroVenta = new valoresRegistroVenta();
               if (pdecTipoCambio == 0 || pdecTipoCambio == null)
               {
                   pdecTipoCambio = 1;
               }
               if (_objDocumentoBL.DocumentoEsInverso(pintTipoDocumento))
               {
                   if (pintMonedaId == (int)Currency.Soles)
                   {
                       objvaloresRegistroVenta.ValorVentaSoles = pdecValorVenta * -1;
                       objvaloresRegistroVenta.ValorVentaDolares = (pdecValorVenta * -1) / pdecTipoCambio;

                       objvaloresRegistroVenta.IgvSoles = pdecIgv * -1;
                       objvaloresRegistroVenta.IgvDolares = (pdecIgv * -1) / pdecTipoCambio;

                       objvaloresRegistroVenta.TotalSoles = pdecTotal * -1;
                       objvaloresRegistroVenta.TotalDolares = (pdecTotal * -1) / pdecTipoCambio;

                       objvaloresRegistroVenta.DescuentoSoles = pdecDescuento * -1;
                       objvaloresRegistroVenta.DescuentoDolares = (pdecDescuento * -1) / pdecTipoCambio;

                   }
                   else if (pintMonedaId == (int)Currency.Dolares)
                   {
                       objvaloresRegistroVenta.ValorVentaSoles = pdecValorVenta * -1 * pdecTipoCambio;
                       objvaloresRegistroVenta.ValorVentaDolares = (pdecValorVenta * -1);

                       objvaloresRegistroVenta.IgvSoles = pdecIgv * -1 * pdecTipoCambio;
                       objvaloresRegistroVenta.IgvDolares = (pdecIgv * -1);

                       objvaloresRegistroVenta.TotalSoles = pdecTotal * -1 * pdecTipoCambio;
                       objvaloresRegistroVenta.TotalDolares = (pdecTotal * -1);

                       objvaloresRegistroVenta.DescuentoSoles = pdecDescuento * -1 * pdecTipoCambio;
                       objvaloresRegistroVenta.DescuentoDolares = (pdecDescuento * -1);
                   }

               }
               else
               {
                   if (pintMonedaId == (int)Currency.Soles)
                   {
                       objvaloresRegistroVenta.ValorVentaSoles = pdecValorVenta;
                       objvaloresRegistroVenta.ValorVentaDolares = (pdecValorVenta) / pdecTipoCambio;

                       objvaloresRegistroVenta.IgvSoles = pdecIgv;
                       objvaloresRegistroVenta.IgvDolares = (pdecIgv) / pdecTipoCambio;

                       objvaloresRegistroVenta.TotalSoles = pdecTotal;
                       objvaloresRegistroVenta.TotalDolares = (pdecTotal) / pdecTipoCambio;

                       objvaloresRegistroVenta.DescuentoSoles = pdecDescuento;
                       objvaloresRegistroVenta.DescuentoDolares = (pdecDescuento) / pdecTipoCambio;

                   }
                   else if (pintMonedaId == (int)Currency.Dolares)
                   {
                       objvaloresRegistroVenta.ValorVentaSoles = pdecValorVenta * pdecTipoCambio;
                       objvaloresRegistroVenta.ValorVentaDolares = (pdecValorVenta);

                       objvaloresRegistroVenta.IgvSoles = pdecIgv * pdecTipoCambio;
                       objvaloresRegistroVenta.IgvDolares = (pdecIgv);

                       objvaloresRegistroVenta.TotalSoles = pdecTotal * pdecTipoCambio;
                       objvaloresRegistroVenta.TotalDolares = (pdecTotal);

                       objvaloresRegistroVenta.DescuentoSoles = pdecDescuento * pdecTipoCambio;
                       objvaloresRegistroVenta.DescuentoDolares = (pdecDescuento);
                   }
               }
               return objvaloresRegistroVenta;

           }

           */


        private valoresRegistroVenta CalcularVentaDetalleMensual(int pintTipoDocumento, decimal pdecPrecioDetalle, decimal pdecValorDetalle, decimal pdecValorVentaDetalle, decimal pdecDescuentoDetalle, decimal pdecPrecioVentaDetalle, decimal pdecIgvDetalle, decimal pdecTipoCambio, int pintMonedaId, decimal T_Enero, decimal T_Febrero, decimal T_Marzo, decimal T_Abril, decimal T_Mayo, decimal T_Junio, decimal T_Julio, decimal T_Agosto, decimal T_Setiembre, decimal T_Octubre, decimal T_Noviembre, decimal T_Diciembre, decimal C_Enero, decimal C_Febrero, decimal C_Marzo, decimal C_Abril, decimal C_Mayo, decimal C_Junio, decimal C_Julio, decimal C_Agosto, decimal C_Setiembre, decimal C_Octubre, decimal C_Noviembre, decimal C_Diciembre)
        {

            valoresRegistroVenta objvaloresRegistroVenta = new valoresRegistroVenta();
            if (pdecTipoCambio == 0 || pdecTipoCambio == null)
            {
                pdecTipoCambio = 1;
            }
            if (_objDocumentoBL.DocumentoEsInverso(pintTipoDocumento))
            {
                if (pintMonedaId == (int)Currency.Soles)
                {
                    objvaloresRegistroVenta.PrecioDetalleSoles = pdecPrecioDetalle * -1;
                    objvaloresRegistroVenta.PrecioDetalleDolares = (pdecPrecioDetalle * -1) / pdecTipoCambio;

                    objvaloresRegistroVenta.ValorDetalleSoles = pdecValorDetalle * -1;
                    objvaloresRegistroVenta.ValorDetalleDolares = (pdecValorDetalle * -1) / pdecTipoCambio;

                    objvaloresRegistroVenta.ValorVentaDetalleSoles = pdecValorVentaDetalle * -1;
                    objvaloresRegistroVenta.ValorVentaDetalleDolares = (pdecValorVentaDetalle * -1) / pdecTipoCambio;

                    objvaloresRegistroVenta.DescuentoDetalleSoles = pdecDescuentoDetalle * -1;
                    objvaloresRegistroVenta.DescuentoDetalleDolares = (pdecDescuentoDetalle * -1) / pdecTipoCambio;

                    objvaloresRegistroVenta.PrecioVentaDetalleSoles = pdecPrecioVentaDetalle * -1;
                    objvaloresRegistroVenta.PrecioVentaDetalleDolares = (pdecPrecioVentaDetalle * -1) / pdecTipoCambio;

                    objvaloresRegistroVenta.IgvDetalleSoles = pdecIgvDetalle * -1;
                    objvaloresRegistroVenta.IgvDetalleDolares = (pdecIgvDetalle * -1) / pdecTipoCambio;
                    objvaloresRegistroVenta.Enero = T_Enero * -1;
                    objvaloresRegistroVenta.Febrero = T_Febrero * -1;
                    objvaloresRegistroVenta.Marzo = T_Marzo * -1;
                    objvaloresRegistroVenta.Abril = T_Abril * -1;
                    objvaloresRegistroVenta.Mayo = T_Mayo * -1;
                    objvaloresRegistroVenta.Junio = T_Junio * -1;
                    objvaloresRegistroVenta.Julio = T_Julio * -1;
                    objvaloresRegistroVenta.Agosto = T_Agosto * -1;
                    objvaloresRegistroVenta.Setiembre = T_Setiembre * -1;
                    objvaloresRegistroVenta.Octubre = T_Octubre * -1;
                    objvaloresRegistroVenta.Noviembre = T_Noviembre * -1;
                    objvaloresRegistroVenta.Diciembre = T_Diciembre * -1;






                }
                else if (pintMonedaId == (int)Currency.Dolares)
                {



                    objvaloresRegistroVenta.PrecioDetalleSoles = pdecPrecioDetalle * -1 * pdecTipoCambio;
                    objvaloresRegistroVenta.PrecioDetalleDolares = (pdecPrecioDetalle * -1);

                    objvaloresRegistroVenta.ValorDetalleSoles = pdecValorDetalle * -1 * pdecTipoCambio;
                    objvaloresRegistroVenta.ValorDetalleDolares = (pdecValorDetalle * -1);

                    objvaloresRegistroVenta.ValorVentaDetalleSoles = pdecValorVentaDetalle * -1 * pdecTipoCambio;
                    objvaloresRegistroVenta.ValorVentaDetalleDolares = (pdecValorVentaDetalle * -1);

                    objvaloresRegistroVenta.DescuentoDetalleSoles = pdecDescuentoDetalle * -1 * pdecTipoCambio;
                    objvaloresRegistroVenta.DescuentoDetalleDolares = (pdecDescuentoDetalle * -1);

                    objvaloresRegistroVenta.PrecioVentaDetalleSoles = pdecPrecioVentaDetalle * -1 * pdecTipoCambio;
                    objvaloresRegistroVenta.PrecioVentaDetalleDolares = (pdecPrecioVentaDetalle * -1);

                    objvaloresRegistroVenta.IgvDetalleSoles = pdecIgvDetalle * -1 * pdecTipoCambio;
                    objvaloresRegistroVenta.IgvDetalleDolares = (pdecIgvDetalle * -1);

                    objvaloresRegistroVenta.Enero = (T_Enero * -1) / pdecTipoCambio;
                    objvaloresRegistroVenta.Febrero = (T_Febrero * -1) / pdecTipoCambio;
                    objvaloresRegistroVenta.Marzo = (T_Marzo * -1) / pdecTipoCambio;
                    objvaloresRegistroVenta.Abril = (T_Abril * -1) / pdecTipoCambio;
                    objvaloresRegistroVenta.Mayo = (T_Mayo * -1) / pdecTipoCambio;
                    objvaloresRegistroVenta.Junio = (T_Junio * -1) / pdecTipoCambio;
                    objvaloresRegistroVenta.Julio = (T_Julio * -1) / pdecTipoCambio;
                    objvaloresRegistroVenta.Agosto = (T_Agosto * -1) / pdecTipoCambio;
                    objvaloresRegistroVenta.Setiembre = (T_Setiembre * -1) / pdecTipoCambio;
                    objvaloresRegistroVenta.Octubre = (T_Octubre * -1) / pdecTipoCambio;
                    objvaloresRegistroVenta.Noviembre = (T_Noviembre * -1) / pdecTipoCambio;
                    objvaloresRegistroVenta.Diciembre = (T_Diciembre * -1) / pdecTipoCambio;
                }

            }
            else
            {
                if (pintMonedaId == (int)Currency.Soles)
                {
                    objvaloresRegistroVenta.PrecioDetalleSoles = pdecPrecioDetalle;
                    objvaloresRegistroVenta.PrecioDetalleDolares = (pdecPrecioDetalle) / pdecTipoCambio;

                    objvaloresRegistroVenta.ValorDetalleSoles = pdecValorDetalle;
                    objvaloresRegistroVenta.ValorDetalleDolares = (pdecValorDetalle) / pdecTipoCambio;

                    objvaloresRegistroVenta.ValorVentaDetalleSoles = pdecValorVentaDetalle;
                    objvaloresRegistroVenta.ValorVentaDetalleDolares = (pdecValorVentaDetalle) / pdecTipoCambio;

                    objvaloresRegistroVenta.DescuentoDetalleSoles = pdecDescuentoDetalle;
                    objvaloresRegistroVenta.DescuentoDetalleDolares = (pdecDescuentoDetalle) / pdecTipoCambio;

                    objvaloresRegistroVenta.PrecioVentaDetalleSoles = pdecPrecioVentaDetalle;
                    objvaloresRegistroVenta.PrecioVentaDetalleDolares = (pdecPrecioVentaDetalle) / pdecTipoCambio;

                    objvaloresRegistroVenta.IgvDetalleSoles = pdecIgvDetalle;
                    objvaloresRegistroVenta.IgvDetalleDolares = (pdecIgvDetalle) / pdecTipoCambio;

                    objvaloresRegistroVenta.Enero = T_Enero;
                    objvaloresRegistroVenta.Febrero = T_Febrero;
                    objvaloresRegistroVenta.Marzo = T_Marzo;
                    objvaloresRegistroVenta.Abril = T_Abril;
                    objvaloresRegistroVenta.Mayo = T_Mayo;
                    objvaloresRegistroVenta.Junio = T_Junio;
                    objvaloresRegistroVenta.Julio = T_Julio;
                    objvaloresRegistroVenta.Agosto = T_Agosto;
                    objvaloresRegistroVenta.Setiembre = T_Setiembre;
                    objvaloresRegistroVenta.Octubre = T_Octubre;
                    objvaloresRegistroVenta.Noviembre = T_Noviembre;
                    objvaloresRegistroVenta.Diciembre = T_Diciembre;


                }
                else if (pintMonedaId == (int)Currency.Dolares)
                {
                    objvaloresRegistroVenta.PrecioDetalleSoles = pdecPrecioDetalle * pdecTipoCambio;
                    objvaloresRegistroVenta.PrecioDetalleDolares = (pdecPrecioDetalle);

                    objvaloresRegistroVenta.ValorDetalleSoles = pdecValorDetalle * pdecTipoCambio;
                    objvaloresRegistroVenta.ValorDetalleDolares = (pdecValorDetalle);

                    objvaloresRegistroVenta.ValorVentaDetalleSoles = pdecValorVentaDetalle * pdecTipoCambio;
                    objvaloresRegistroVenta.ValorVentaDetalleDolares = (pdecValorVentaDetalle);

                    objvaloresRegistroVenta.DescuentoDetalleSoles = pdecDescuentoDetalle * pdecTipoCambio;
                    objvaloresRegistroVenta.DescuentoDetalleDolares = (pdecDescuentoDetalle);

                    objvaloresRegistroVenta.PrecioVentaDetalleSoles = pdecPrecioVentaDetalle * pdecTipoCambio;
                    objvaloresRegistroVenta.PrecioVentaDetalleDolares = (pdecPrecioVentaDetalle);

                    objvaloresRegistroVenta.IgvDetalleSoles = pdecIgvDetalle * pdecTipoCambio;
                    objvaloresRegistroVenta.IgvDetalleDolares = (pdecIgvDetalle);

                    objvaloresRegistroVenta.Enero = T_Enero * pdecTipoCambio;
                    objvaloresRegistroVenta.Febrero = T_Febrero * pdecTipoCambio;
                    objvaloresRegistroVenta.Marzo = T_Marzo * pdecTipoCambio;
                    objvaloresRegistroVenta.Enero = T_Abril * pdecTipoCambio;
                    objvaloresRegistroVenta.Febrero = T_Mayo * pdecTipoCambio;
                    objvaloresRegistroVenta.Marzo = T_Junio * pdecTipoCambio;
                    objvaloresRegistroVenta.Enero = T_Julio * pdecTipoCambio;
                    objvaloresRegistroVenta.Febrero = T_Agosto * pdecTipoCambio;
                    objvaloresRegistroVenta.Marzo = T_Setiembre * pdecTipoCambio;
                    objvaloresRegistroVenta.Enero = T_Octubre * pdecTipoCambio;
                    objvaloresRegistroVenta.Febrero = T_Noviembre * pdecTipoCambio;
                    objvaloresRegistroVenta.Marzo = T_Diciembre * pdecTipoCambio;


                }
            }
            return objvaloresRegistroVenta;

        }

        public List<ReporteRegistroVentaProductoResumen> ReporteRegistroVentaProductoResumen_(string pstrv_Periodo, int pstri_IdEstablecimiento, DateTime? pstrt_FechaRegistroIni, DateTime? pstrt_FechaRegistroFin, int pintTipoDocumentoId, string pstrt_IdCliente, string pstr_CodInterno, string pstrt_Orden)
        {
            //mon.IsActive = true;
            try
            {
                SAMBHSEntitiesModelWin dbContext = new SAMBHSEntitiesModelWin();

                #region Query
                var query =
                        (from A in dbContext.venta
                         join B in dbContext.cliente on A.v_IdCliente equals B.v_IdCliente
                         join F in dbContext.datahierarchy on A.i_IdMoneda equals F.i_ItemId
                         join I in dbContext.ventadetalle on A.v_IdVenta equals I.v_IdVenta
                         join J in dbContext.productodetalle on I.v_IdProductoDetalle equals J.v_IdProductoDetalle
                         join K in dbContext.producto on J.v_IdProducto equals K.v_IdProducto
                         where F.i_GroupId == 18

                         where A.i_Eliminado == 0 && A.i_IdEstado == 1
                         && A.v_Periodo == pstrv_Periodo && (A.t_FechaRegistro >= pstrt_FechaRegistroIni
                         && A.t_FechaRegistro <= pstrt_FechaRegistroFin)
                         && (B.v_CodCliente == pstrt_IdCliente || pstrt_IdCliente == "")
                         && (K.v_CodInterno == pstr_CodInterno || pstr_CodInterno == "")
                         && A.i_IdEstablecimiento == Globals.ClientSession.i_IdEstablecimiento.Value
                         //IGrouping <>
                         //                     IGrouping<string, query>> v_IdProducto =
                         //query.GroupBy(p => p.v_IdProducto);
                         //            IEnumerable<IGrouping<string, string>> productNamesByCategory =
                         //                products.GroupBy(p => p.Category, p => p.Name);
                         orderby I.v_IdProductoDetalle
                         //group by I.v_IdProductoDetalle
                         select new ReporteRegistroVentaProductoResumen
                         {
                             NombreEmpresaPropietaria = "",
                             RucEmpresaPropietaria = "",
                             NombreMoneda = F.v_Value2,
                             IdMoneda = A.i_IdMoneda.Value,
                             IdProducto = K.v_CodInterno,
                             NombreProducto = K.v_Descripcion,
                             CantidadDetalle = A.i_IdTipoDocumento.Value == (int)DocumentType.NotaCredito ? I.d_Cantidad.Value * -1 : I.d_Cantidad.Value,
                             ValorVentaDetalle = I.d_ValorVenta.Value,
                             PrecioVentaDetalle = I.d_PrecioVenta.Value,
                             IdTipoDocumento = A.i_IdTipoDocumento.Value,
                             TipoCambio = A.d_TipoCambio.Value,


                         });

                switch (pstrt_Orden)
                {
                    //case "ValorVentaDetalle":
                    //    query = query.OrderBy("ValorVentaDetalle DESC");
                    //    break;

                    //case "CantidadDetalle":
                    //    query = query.OrderBy("CantidadDetalle DESC");
                    //    break;
                    //case "TipoDocumento":
                    //    query = query.OrderBy("TipoDocumento ASC");
                    //    break;

                }
                var query1 = (from A in query.ToList()
                              let ValorVenta = CalcularVentaDetalle(A.IdTipoDocumento, 1, 1, A.ValorVentaDetalle, 1, A.PrecioVentaDetalle, 1, A.TipoCambio, A.IdMoneda)

                              select new ReporteRegistroVentaProductoResumen
                              {
                                  NombreEmpresaPropietaria = DevolverNombreEmpresaPropietaria()[0],
                                  RucEmpresaPropietaria = DevolverNombreEmpresaPropietaria()[1],
                                  NombreMoneda = A.NombreMoneda,
                                  IdMoneda = A.IdMoneda,
                                  IdProducto = A.IdProducto,
                                  NombreProducto = A.NombreProducto,
                                  CantidadDetalle = A.CantidadDetalle,
                                  ValorVentaDetalle = ValorVenta.ValorVentaDetalleSoles,
                                  PrecioVentaDetalle = ValorVenta.PrecioVentaDetalleSoles,
                                  ValorVentaDetalleD = ValorVenta.ValorVentaDetalleDolares,
                                  PrecioVentaDetalleD = ValorVenta.PrecioVentaDetalleDolares,
                                  IdTipoDocumento = A.IdTipoDocumento,
                                  TipoCambio = A.TipoCambio,


                              }).ToList();
                //query1= query1.AsEnumerable<IGrouping<int,string>> HOLA = query1.GroupBy(n => A.IdProducto);

                #endregion

                //var query2 = query1.GroupBy(x => new { x.IdProducto, x.CantidadDetalle }).ToList();

                return query1.ToList();
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public List<ReporteRegistroVentaProductoAnalitico> ReporteRegistroVentaProductoAnalitico(ref OperationResult objOperationResult, int pstri_IdEstablecimiento, DateTime? pstrt_FechaRegistroIni, DateTime? pstrt_FechaRegistroFin, string pstrt_IdCliente, string pstr_CodInterno, string pstrt_Orden, string pstr_grupollave, string pstr_Nombregrupollave, string pstrLinea, string pstrIdMarca, int ConsideraDocContables)
        {
            //mon.IsActive = true;
            try
            {
                using (var dbContext = new SAMBHSEntitiesModelWin())
                {
                    #region Query
                    var queryVentas =
                             (from A in dbContext.ventadetalle
                              join B in dbContext.productodetalle on new { C = A.v_IdProductoDetalle, eliminado = 0 } equals new { C = B.v_IdProductoDetalle, eliminado = B.i_Eliminado.Value } into B_join
                              from B in B_join.DefaultIfEmpty()
                              join C in dbContext.producto on new { A = B.v_IdProducto, eliminado = 0 } equals new { A = C.v_IdProducto, eliminado = C.i_Eliminado.Value } into C_join
                              from C in C_join.DefaultIfEmpty()

                              join D in dbContext.linea on new { Linea = C.v_IdLinea, eliminado = 0 } equals new { Linea = D.v_IdLinea, eliminado = D.i_Eliminado.Value } into D_join
                              from D in D_join.DefaultIfEmpty()

                              join I in dbContext.marca on new { m = C.v_IdMarca, eliminado = 0 } equals new { m = I.v_IdMarca, eliminado = I.i_Eliminado.Value } into I_join
                              from I in I_join.DefaultIfEmpty()

                              join E in dbContext.venta on new { v = A.v_IdVenta, eliminado = 0 } equals new { v = E.v_IdVenta, eliminado = E.i_Eliminado.Value } into E_join
                              from E in E_join.DefaultIfEmpty()

                              join F in dbContext.datahierarchy on new { m = E.i_IdMoneda.Value, Grupo = 18, eliminado = 0 } equals new { m = F.i_ItemId, Grupo = F.i_GroupId, eliminado = F.i_IsDeleted.Value } into F_join
                              from F in F_join.DefaultIfEmpty()


                              join G in dbContext.datahierarchy on new { um = A.i_IdUnidadMedida.Value, Grupo = 17, eliminado = 0 } equals new { um = G.i_ItemId, Grupo = G.i_GroupId, eliminado = G.i_IsDeleted.Value } into G_join
                              from G in G_join.DefaultIfEmpty()


                              join H in dbContext.cliente on new { c = E.v_IdCliente } equals new { c = H.v_IdCliente } into H_join
                              from H in H_join.DefaultIfEmpty()

                              join J in dbContext.documento on new { doc = E.i_IdTipoDocumento.Value } equals new { doc = J.i_CodigoDocumento } into J_join
                              from J in J_join.DefaultIfEmpty()

                              where (A.i_Eliminado == 0 && E.i_IdEstado == 1)
                              && (E.t_FechaRegistro >= pstrt_FechaRegistroIni
                              && E.t_FechaRegistro <= pstrt_FechaRegistroFin)
                              && (H.v_CodCliente == pstrt_IdCliente || pstrt_IdCliente == "")
                              && (C.v_CodInterno == pstr_CodInterno || pstr_CodInterno == "")
                              && (D.v_IdLinea == pstrLinea || pstrLinea == "-1")
                              && (I.v_IdMarca == pstrIdMarca || pstrIdMarca == "-1")
                              && (E.i_IdEstablecimiento == pstri_IdEstablecimiento || pstri_IdEstablecimiento == -1)
                              && A.v_IdProductoDetalle != null
                              && C != null && B.producto.v_IdProducto != "N002-PD000000000" && B.producto != null
                              && B_join.Any(p => p.v_IdProductoDetalle == A.v_IdProductoDetalle)
                              && E_join.Any(P => P.v_IdVenta == A.v_IdVenta)
                              select new ReporteRegistroVentaProductoAnalitico
                              {
                                  NombreMoneda = F == null ? "" : F.v_Value2,
                                  IdMoneda = E.i_IdMoneda.Value,
                                  IdProducto = C == null ? "** NO EXISTE PRODUCTO ** " : C.v_CodInterno,
                                  NombreProducto = C == null ? "** NO EXISTE PRODUCTO ** " : "PRODUCTO : " + C.v_CodInterno + " " + C.v_Descripcion,
                                  FechaRegistro = E.t_FechaRegistro.Value,
                                  IdTipoDocumento = E.i_IdTipoDocumento.Value,
                                  TipoDocumento = J == null ? "" : J.v_Siglas,
                                  Documento = (E.v_SerieDocumento.Trim() + "-" + E.v_CorrelativoDocumento.Trim()),
                                  CantidadDetalle = A == null ? 0 : A.d_Cantidad.Value == null ? 0 : J.i_UsadoDocumentoInverso != null && J.i_UsadoDocumentoInverso == 1 ? A.d_Cantidad.Value * -1 : A.d_Cantidad.Value,
                                  UnidadMedida = G == null ? "" : G.v_Field,
                                  Grupollave = C == null ? "PRODUCTO NO EXISTE" : C.v_CodInterno + " " + C.v_Descripcion,
                                  NombreCliente = E.v_NombreClienteTemporal == "" ? B == null ? "** NO EXISTE CLIENTE **" : (H.v_PrimerNombre + " " + H.v_ApePaterno + " " + H.v_ApeMaterno + " " + H.v_RazonSocial).Trim() : B == null ? "** CLIENTE NO EXISTE **" : (H.v_PrimerNombre + " " + H.v_ApePaterno + " " + H.v_ApeMaterno + " " + E.v_NombreClienteTemporal).Trim(),
                                  NroDocCliente = H == null ? "" : H.v_NroDocIdentificacion,
                                  NombreLinea = D == null || D.v_Nombre == null ? "** LINEA NO EXISTE**" : D.v_Nombre.Trim(),
                                  GrupoLlave2 = pstr_grupollave == "NOMBRECLIENTE" ? H.v_CodCliente == null ? "** " + pstr_Nombregrupollave + " NO EXISTE **" : "CLIENTE :  " + (H.v_CodCliente + " / " + H.v_RazonSocial + " " + H.v_PrimerNombre + " " + H.v_ApePaterno + " " + H.v_ApeMaterno + " / " + H.v_NroDocIdentificacion).Trim() : "",// pstr_grupollave == "NOMBRELINEA" ? H == null || H.v_Nombre == null ? " ** LINEA NO EXISTE ** " : "LINEA :" + H.v_Nombre : pstr_grupollave == "NOMBREPRODUCTO" ? K == null ? "** PRODUCTO NO EXISTE **" : "PRODUCTO :" + (K.v_CodInterno + " " + K.v_Descripcion).Trim() :
                                  TGrupollave = pstr_grupollave == "NOMBRECLIENTE" ? H.v_CodCliente == null ? "** " + pstr_Nombregrupollave + " NO EXISTE **" : "CLIENTE" : pstr_grupollave == "NOMBRELINEA" ? H == null || D.v_Nombre == null ? " ** LINEA NO EXISTE ** " : D.v_Nombre.Trim() : pstr_grupollave == "NOMBREPRODUCTO" ? C == null ? "** PRODUCTO NO EXISTE **" : C.v_Descripcion.Trim() :
                                                       pstr_grupollave == "LINEA/CLIENTE" ? H == null ? "** LINEA NO EXISTE **" : D.v_Nombre.Trim() : pstr_grupollave == "PRODUCTO/CLIENTE" ? C == null ? "** PRODUCTO NO EXISTE**" : C.v_Descripcion.Trim() : "",
                                  TGrupoLlave2 = pstr_grupollave == "NOMBRECLIENTE" || pstr_grupollave == "NOMBRELINEA" || pstr_grupollave == "NOMBREPRODUCTO" ? "" : pstr_grupollave == "LINEA/CLIENTE" || pstr_grupollave == "PRODUCTO/CLIENTE" ? B == null ? "** CLIENTE  NO EXISTE CLIENTE **" : "CLIENTE " : "",
                                  CodLinea = H == null ? "" : D.v_CodLinea + " " + D.v_Nombre,
                                  DocEsContable = J == null || J.i_UsadoDocumentoContable == null ? 0 : J.i_UsadoDocumentoContable.Value,
                                  PrecioDetalle = E.i_IdMoneda == (int)Currency.Soles ? A.d_Precio.Value : A.d_Precio.Value * E.d_TipoCambio.Value,  //ValorVenta.PrecioDetalleSoles,
                                  ValorVentaDetalle = E.i_IdMoneda == (int)Currency.Soles ? J.i_UsadoDocumentoInverso == 1 ? A.d_ValorVenta.Value * -1 : A.d_ValorVenta.Value : J.i_UsadoDocumentoInverso == 1 ? (A.d_ValorVenta.Value * -1) * E.d_TipoCambio.Value : A.d_ValorVenta.Value * E.d_TipoCambio.Value,
                                  ValorVentaDetalleD = E.i_IdMoneda == (int)Currency.Dolares ? J.i_UsadoDocumentoInverso == 1 ? A.d_ValorVenta.Value * -1 : A.d_ValorVenta.Value : J.i_UsadoDocumentoInverso == 1 ? (A.d_ValorVenta.Value * -1) / E.d_TipoCambio.Value : A.d_ValorVenta.Value / E.d_TipoCambio.Value,
                                  PrecioVenta = E.i_IdMoneda == (int)Currency.Soles ? J.i_UsadoDocumentoInverso == 1 ? A.d_PrecioVenta.Value * -1 : A.d_PrecioVenta.Value : J.i_UsadoDocumentoInverso == 1 ? (A.d_PrecioVenta.Value * -1) * E.d_TipoCambio.Value : A.d_PrecioVenta.Value * E.d_TipoCambio.Value,
                                  DocumentoContable = J.i_UsadoDocumentoContable == 1 ? "CONTABLE" : "NO CONTABLE",
                              }).ToList();

                    var queryGuiasInternas = (from A in dbContext.guiaremision
                                              join B in dbContext.cliente on new { C = A.v_IdCliente, eliminado = 0 } equals new { C = B.v_IdCliente, eliminado = B.i_Eliminado.Value } into B_join
                                              from B in B_join.DefaultIfEmpty()
                                              join C in dbContext.documento on new { A = A.i_IdTipoGuia.Value, eliminado = 0 } equals new { A = C.i_CodigoDocumento, eliminado = C.i_Eliminado.Value } into C_join
                                              from C in C_join.DefaultIfEmpty()
                                              join F in dbContext.datahierarchy on new { m = A.i_IdMoneda.Value, Grupo = 18, eliminado = 0 } equals new { m = F.i_ItemId, Grupo = F.i_GroupId, eliminado = F.i_IsDeleted.Value } into F_join
                                              from F in F_join.DefaultIfEmpty()
                                              join I in dbContext.guiaremisiondetalle on new { v_IdVenta = A.v_IdGuiaRemision, eliminado = 0 }
                                                                                 equals new { v_IdVenta = I.v_IdGuiaRemision, eliminado = I.i_Eliminado.Value } into I_join
                                              from I in I_join.DefaultIfEmpty()
                                              join J in dbContext.productodetalle on new { Pd = I.v_IdProductoDetalle, eliminado = 0 } equals new { Pd = J.v_IdProductoDetalle, eliminado = J.i_Eliminado.Value } into J_join
                                              from J in J_join.DefaultIfEmpty()
                                              join K in dbContext.producto on new { J.v_IdProducto, eliminado = 0 }
                                                                             equals new { K.v_IdProducto, eliminado = K.i_Eliminado.Value } into K_join
                                              from K in K_join.DefaultIfEmpty()
                                              join G in dbContext.datahierarchy on new { um = I.i_IdUnidadMedida.Value, Grupo = 17, eliminado = 0 } equals new { um = G.i_ItemId, Grupo = G.i_GroupId, eliminado = G.i_IsDeleted.Value } into G_join
                                              from G in G_join.DefaultIfEmpty()

                                              join H in dbContext.linea on new { Linea = K.v_IdLinea, eliminado = 0 } equals new { Linea = H.v_IdLinea, eliminado = H.i_Eliminado.Value } into H_join
                                              from H in H_join.DefaultIfEmpty()
                                              where (A.i_Eliminado == 0 && A.i_IdEstado == 1)
                                              && (A.t_FechaEmision >= pstrt_FechaRegistroIni
                                              && A.t_FechaEmision <= pstrt_FechaRegistroFin)
                                              && (B.v_CodCliente == pstrt_IdCliente || pstrt_IdCliente == "")
                                              && (K.v_CodInterno == pstr_CodInterno || pstr_CodInterno == "")
                                              && (H.v_IdLinea == pstrLinea || pstrLinea == "-1")
                                              && I_join.Any(x => x.v_IdProductoDetalle == J.v_IdProductoDetalle)
                                              && (K.v_IdMarca == pstrIdMarca || pstrIdMarca == "-1")
                                              && (A.i_IdTipoGuia == (int)TiposDocumentos.GuiaInterna)

                                              && A.i_IdEstablecimiento == pstri_IdEstablecimiento
                                              select new ReporteRegistroVentaProductoAnalitico
                                              {

                                                  NombreMoneda = F == null ? "" : F.v_Value2,
                                                  IdMoneda = A.i_IdMoneda.Value,
                                                  IdProducto = K == null ? "** NO EXISTE PRODUCTO ** " : K.v_CodInterno,
                                                  NombreProducto = K == null ? "** NO EXISTE PRODUCTO ** " : "PRODUCTO : " + K.v_CodInterno + " " + K.v_Descripcion,
                                                  FechaRegistro = A.t_FechaEmision.Value,
                                                  IdTipoDocumento = A.i_IdTipoDocumento.Value,
                                                  TipoDocumento = C == null ? "" : C.v_Siglas,
                                                  Documento = (A.v_SerieGuiaRemision.Trim() + "-" + A.v_NumeroGuiaRemision.Trim()),
                                                  CantidadDetalle = I == null ? 0 : I.d_Cantidad.Value == null ? 0 : C.i_UsadoDocumentoInverso != null && C.i_UsadoDocumentoInverso == 1 ? I.d_Cantidad.Value * -1 : I.d_Cantidad.Value,
                                                  UnidadMedida = G == null ? "" : G.v_Field,
                                                  PrecioDetalle = I == null ? 0 : I.d_Precio.Value,
                                                  ValorVentaDetalle = I == null ? 0 : I.d_ValorVenta.Value,
                                                  PrecioVenta = I == null ? 0 : I.d_Total.Value,
                                                  TipoCambio = A.d_TipoCambio.Value,
                                                  Grupollave = pstr_grupollave == "NOMBRECLIENTE" ? B.v_CodCliente == null ? "** " + pstr_Nombregrupollave + " NO EXISTE **" : "CLIENTE :  " + (B.v_CodCliente + " / " + B.v_RazonSocial + " " + B.v_PrimerNombre + " " + B.v_ApePaterno + " " + B.v_ApeMaterno + " / " + B.v_NroDocIdentificacion).Trim() : pstr_grupollave == "NOMBRELINEA" ? H == null || H.v_Nombre == null ? " ** LINEA NO EXISTE ** " : "LINEA :" + H.v_Nombre : pstr_grupollave == "NOMBREPRODUCTO" ? K == null ? "** PRODUCTO NO EXISTE **" : "PRODUCTO :" + (K.v_CodInterno + " " + K.v_Descripcion).Trim() :
                                                   pstr_grupollave == "LINEA/CLIENTE" ? H == null ? "** LINEA NO EXISTE **" : "LINEA : " + H.v_Nombre : pstr_grupollave == "PRODUCTO/CLIENTE" ? K == null ? "** PRODUCTO NO EXISTE**" : "PRODUCTO :" + K.v_CodInterno + " " + K.v_Descripcion : "",
                                                  IdCliente = A.v_IdCliente,
                                                  NombreCliente = B == null ? "** NO EXISTE CLIENTE **" : (B.v_PrimerNombre + " " + B.v_ApePaterno + " " + B.v_ApeMaterno + " " + B.v_RazonSocial).Trim(),
                                                  NroDocCliente = B.v_NroDocIdentificacion,
                                                  NombreLinea = H == null || H.v_Nombre == null ? "** LINEA NO EXISTE**" : H.v_Nombre.Trim(),
                                                  GrupoLlave2 = pstr_grupollave == "NOMBRECLIENTE" || pstr_grupollave == "NOMBRELINEA" || pstr_grupollave == "NOMBREPRODUCTO" ? "" : pstr_grupollave == "LINEA/CLIENTE" || pstr_grupollave == "PRODUCTO/CLIENTE" ? B == null ? "** CLIENTE  NO EXISTE CLIENTE **" : "CLIENTE : " + (B.v_PrimerNombre + " " + B.v_ApePaterno + " " + B.v_ApeMaterno + " " + B.v_RazonSocial).Trim() : "",
                                                  TGrupollave = pstr_grupollave == "NOMBRECLIENTE" ? B.v_CodCliente == null ? "** " + pstr_Nombregrupollave + " NO EXISTE **" : "CLIENTE" : pstr_grupollave == "NOMBRELINEA" ? H == null || H.v_Nombre == null ? " ** LINEA NO EXISTE ** " : H.v_Nombre.Trim() : pstr_grupollave == "NOMBREPRODUCTO" ? K == null ? "** PRODUCTO NO EXISTE **" : K.v_Descripcion.Trim() :
                                                                       pstr_grupollave == "LINEA/CLIENTE" ? H == null ? "** LINEA NO EXISTE **" : H.v_Nombre.Trim() : pstr_grupollave == "PRODUCTO/CLIENTE" ? K == null ? "** PRODUCTO NO EXISTE**" : K.v_Descripcion.Trim() : "",
                                                  TGrupoLlave2 = pstr_grupollave == "NOMBRECLIENTE" || pstr_grupollave == "NOMBRELINEA" || pstr_grupollave == "NOMBREPRODUCTO" ? "" : pstr_grupollave == "LINEA/CLIENTE" || pstr_grupollave == "PRODUCTO/CLIENTE" ? B == null ? "** CLIENTE  NO EXISTE CLIENTE **" : "CLIENTE " : "",
                                                  CodLinea = H == null ? "" : H.v_CodLinea + " " + H.v_Nombre,
                                                  DocEsContable = C == null || C.i_UsadoDocumentoContable == null ? 0 : C.i_UsadoDocumentoContable.Value,
                                                  DocumentoContable = C.i_UsadoDocumentoContable == 1 ? "CONTABLE" : "NO CONTABLE",
                                              }).ToList();


                    var queryGuiasInternasF = (from A in queryGuiasInternas.ToList()
                                               let ValorVenta = CalcularVentaDetalle(A.IdTipoDocumento, A.PrecioDetalle, 1, A.ValorVentaDetalle, 1, 1, 1, A.TipoCambio, A.IdMoneda)

                                               select new ReporteRegistroVentaProductoAnalitico
                                               {

                                                   NombreMoneda = A.NombreMoneda,
                                                   IdMoneda = A.IdMoneda,
                                                   IdProducto = A.IdProducto,
                                                   NombreProducto = A.NombreProducto,
                                                   FechaRegistro = A.FechaRegistro,
                                                   IdTipoDocumento = A.IdTipoDocumento,
                                                   TipoDocumento = A.TipoDocumento,
                                                   Documento = A.Documento,
                                                   CantidadDetalle = A.CantidadDetalle,
                                                   UnidadMedida = A.UnidadMedida,
                                                   PrecioDetalle = ValorVenta.PrecioDetalleSoles,
                                                   ValorVentaDetalle = A.IdMoneda == (int)Currency.Soles ? ValorVenta.ValorVentaDetalleSoles : ValorVenta.ValorVentaDetalleDolares * A.TipoCambio,
                                                   PrecioDetalleD = A.IdMoneda == (int)Currency.Dolares ? ValorVenta.ValorVentaDetalleDolares : 0,
                                                   ValorVentaDetalleD = A.IdMoneda == (int)Currency.Dolares ? ValorVenta.ValorVentaDetalleDolares : ValorVenta.ValorVentaDetalleSoles / A.TipoCambio,
                                                   PrecioVenta = A.IdMoneda == (int)Currency.Soles ? A.PrecioVenta : A.PrecioVenta * A.TipoCambio,
                                                   TipoCambio = A.TipoCambio,
                                                   Grupollave = A.Grupollave,
                                                   IdCliente = A.IdCliente,
                                                   NombreCliente = A.NombreCliente,
                                                   NroDocCliente = A.NroDocCliente,
                                                   GrupoLlave2 = A.GrupoLlave2,
                                                   TotalLetrasGrupoLlave = "TOTAL " + A.TGrupollave + " : ",
                                                   TotalLetrasGrupoLlave2 = "SUB TOTAL " + A.TGrupoLlave2 + " : ",
                                                   CodLinea = A.CodLinea,
                                                   DocEsContable = A.DocEsContable,
                                                   DocumentoContable = A.DocumentoContable,

                                               }).ToList();
                    #endregion

                    objOperationResult.Success = 1;
                    //  return ConsideraDocInternos == 1 ? queryVentas.Concat(queryGuiasInternasF).ToList() : queryVentas.Concat(queryGuiasInternasF).Where(p => p.DocEsContable == 1).ToList();
                    return ConsideraDocContables == -1 ? queryVentas.Concat(queryGuiasInternasF).ToList() : ConsideraDocContables == 1 ? queryVentas.Concat(queryGuiasInternasF).Where(p => p.DocEsContable == 1).ToList() : queryVentas.Concat(queryGuiasInternasF).Where(p => p.DocEsContable == 0).ToList();
                }
            }
            catch (Exception ex)
            {
                objOperationResult.Success = 0;
                objOperationResult.AdditionalInformation = "VentaBL.ReporteRegistroVentaProductoAnalitico()\nLinea:" +
                                                            ex.StackTrace.Substring(ex.StackTrace.LastIndexOf(' '));
                objOperationResult.ErrorMessage = ex.Message;
                objOperationResult.ExceptionMessage = ex.InnerException != null
                    ? ex.InnerException.Message
                    : string.Empty;
                Utils.ExceptionToLog(Globals.ClientSession.i_SystemUserId, objOperationResult);
                return null;
            }
        }




        public List<ReporteVentaProductoSegunda> ReporteRegistroVentaProductosSegunda(ref OperationResult objOperationResult, int i_IdEstablecimiento, DateTime? pstrt_FechaRegistroIni, DateTime? pstrt_FechaRegistroFin, string pstr_CodInterno, int TipoDocumento, int TipoProducto, int EstadoCobranza, int Almacen)
        {
            //mon.IsActive = true;
            try
            {
                using (var dbContext = new SAMBHSEntitiesModelWin())
                {
                    objOperationResult.Success = 1;
                    var Ventas = (from a in dbContext.ventadetalle

                                  join b in dbContext.productodetalle on new { pd = a.v_IdProductoDetalle, eliminado = 0 } equals new { pd = b.v_IdProductoDetalle, eliminado = b.i_Eliminado.Value } into b_join
                                  from b in b_join.DefaultIfEmpty()

                                  join c in dbContext.venta on new { v = a.v_IdVenta, eliminado = 0 } equals new { v = c.v_IdVenta, eliminado = c.i_Eliminado.Value } into c_join
                                  from c in c_join.DefaultIfEmpty()
                                  join d in dbContext.documento on new { doc = c.i_IdTipoDocumento.Value, eliminado = 0 } equals new { doc = d.i_CodigoDocumento, eliminado = d.i_Eliminado.Value } into d_join
                                  from d in d_join.DefaultIfEmpty()

                                  join e in dbContext.cobranzapendiente on new { cp = c.v_IdVenta, eliminado = 0 } equals new { cp = e.v_IdVenta, eliminado = e.i_Eliminado.Value } into e_join
                                  from e in e_join.DefaultIfEmpty()


                                  where a.i_Eliminado == 0 && c.i_IdEstado == 1 && c.i_IdEstablecimiento == i_IdEstablecimiento
                                 && (c.t_FechaRegistro >= pstrt_FechaRegistroIni && c.t_FechaRegistro <= pstrt_FechaRegistroFin)
                                 && (b.producto.i_IdTipoProducto == TipoProducto || TipoProducto == -1)

                                && (d.i_UsadoDocumentoContable == TipoDocumento || TipoDocumento == -1)
                                && (b.producto != null && b.producto.v_CodInterno == pstr_CodInterno || pstr_CodInterno == "")

                                && (a.i_IdAlmacen == Almacen)

                                  select new ReporteVentaProductoSegunda
                                  {
                                      IdProducto = b != null && b.producto != null ? b.producto.v_IdProducto : null,
                                      CodigoProducto = b != null && b.producto != null ? b.producto.v_CodInterno : null,
                                      Producto = b != null && b.producto != null ? b.producto.v_Descripcion : null,
                                      Cantidad = d.i_UsadoDocumentoInverso == 1 ? a.d_CantidadEmpaque.Value * -1 : a.d_CantidadEmpaque.Value,
                                      MontoVendido = c.i_IdMoneda == (int)Currency.Soles ? a.d_PrecioVenta.Value : a.d_PrecioVenta.Value * c.d_TipoCambio.Value,
                                      Acuenta = e.d_Acuenta.Value,
                                      Saldo = e.d_Saldo.Value,


                                  }).ToList().GroupBy(l => l.IdProducto).Select(p =>
                                  {
                                      var k = p.FirstOrDefault();
                                      k.Cantidad = p.Sum(o => o.Cantidad);
                                      k.MontoVendido = p.Sum(o => o.MontoVendido);
                                      k.Acuenta = p.Sum(o => o.Acuenta);
                                      k.Saldo = p.Sum(o => o.Saldo);
                                      return k;

                                  }).ToList();


                    if (EstadoCobranza == 1)//Cancelados
                    {

                        return Ventas = Ventas.Where(o => o.Saldo == 0).ToList();
                    }
                    else if (EstadoCobranza == 0)
                    {
                        return Ventas = Ventas.Where(o => o.Saldo != 0).ToList();
                    }
                    else
                    {
                        return Ventas;
                    }
                }
            }
            catch (Exception ex)
            {
                objOperationResult.Success = 0;
                objOperationResult.AdditionalInformation = "VentaBL.ReporteRegistroVentaProductosSegunda()\nLinea:" +
                                                            ex.StackTrace.Substring(ex.StackTrace.LastIndexOf(' '));
                objOperationResult.ErrorMessage = ex.Message;
                objOperationResult.ExceptionMessage = ex.InnerException != null
                    ? ex.InnerException.Message
                    : string.Empty;
                Utils.ExceptionToLog(Globals.ClientSession.i_SystemUserId, objOperationResult);
                return null;
            }
        }



        public List<ReporteRegistroVentaProductoResumen> ReporteRegistroVentaProductoResumen(ref OperationResult objOperationResult, int pstri_IdEstablecimiento, DateTime? pstrt_FechaRegistroIni, DateTime? pstrt_FechaRegistroFin, int pintMoneda, string pstrt_IdCliente, string pstr_CodInterno, string pstrt_Orden, int pIntEstablecimiento, string pstrAlmacenes, int ConsideraDocInternos, string pstrLlave, string IdLinea, string IdMarca)
        {
            //mon.IsActive = true;
            try
            {
                using (var dbContext = new SAMBHSEntitiesModelWin())
                {
                    ReporteRegistroVentaProductoResumen objReporte = new ReporteRegistroVentaProductoResumen();
                    List<ReporteRegistroVentaProductoResumen> ReporteFinal = new List<ReporteRegistroVentaProductoResumen>();

                    #region Query

                    //1. query para obtener toda la data filtrada por los parametros
                    var queryVentas =
                            (from A in dbContext.venta
                             join B in dbContext.cliente on new { idCliente = A.v_IdCliente, eliminado = 0, flag = "C" } equals new { idCliente = B.v_IdCliente, eliminado = 0, flag = B.v_FlagPantalla } into B_join
                             from B in B_join.DefaultIfEmpty()
                             join F in dbContext.datahierarchy on new { m = A.i_IdMoneda.Value, Grupo = 18, eliminado = 0 } equals new { m = F.i_ItemId, Grupo = F.i_GroupId, eliminado = F.i_IsDeleted.Value } into F_join
                             from F in F_join.DefaultIfEmpty()
                             join I in dbContext.ventadetalle on new { v = A.v_IdVenta, eliminado = 0 } equals new { v = I.v_IdVenta, eliminado = I.i_Eliminado.Value } into I_join
                             from I in I_join.DefaultIfEmpty()
                             join J in dbContext.productodetalle on new { pd = I.v_IdProductoDetalle, eliminado = 0 } equals new { pd = J.v_IdProductoDetalle, eliminado = J.i_Eliminado.Value } into J_join
                             from J in J_join.DefaultIfEmpty()
                             join K in dbContext.producto on new { p = J.v_IdProducto, eliminado = 0 } equals new { p = K.v_IdProducto, eliminado = K.i_Eliminado.Value } into K_join
                             from K in K_join.DefaultIfEmpty()
                             join M in dbContext.almacen on new { idalmcen = I.i_IdAlmacen.Value, eliminado = 0 } equals new { idalmcen = M.i_IdAlmacen, eliminado = M.i_Eliminado.Value } into M_join

                             from M in M_join.DefaultIfEmpty()

                             join N in dbContext.documento on new { Doc = A.i_IdTipoDocumento.Value, eliminado = 0 } equals new { Doc = N.i_CodigoDocumento, eliminado = 0 } into N_join

                             from N in N_join.DefaultIfEmpty()

                             join O in dbContext.linea on new { Linea = K.v_IdLinea, eliminado = 0 } equals new { Linea = O.v_IdLinea, eliminado = O.i_Eliminado.Value } into O_join
                             from O in O_join.DefaultIfEmpty()

                             where (A.i_Eliminado == 0 && A.i_IdEstado == 1)
                              && (A.t_FechaRegistro >= pstrt_FechaRegistroIni
                             && A.t_FechaRegistro <= pstrt_FechaRegistroFin)
                             && (B.v_CodCliente == pstrt_IdCliente || pstrt_IdCliente == "")
                             && (K.v_CodInterno == pstr_CodInterno || pstr_CodInterno == "")
                             && A.i_IdEstablecimiento == pIntEstablecimiento
                             && (O.v_IdLinea == IdLinea || IdLinea == "-1")
                             && (K.v_IdMarca == IdMarca || IdMarca == "-1")
                             && I_join.Any(x => x.v_IdProductoDetalle == J.v_IdProductoDetalle)
                             && A.i_IdEstablecimiento == Globals.ClientSession.i_IdEstablecimiento.Value
                             orderby I.v_IdProductoDetalle
                             select new ReporteRegistroVentaProductoResumen
                             {
                                 NombreMoneda = F == null ? "" : F.v_Value2,
                                 IdMoneda = A.i_IdMoneda.Value,
                                 IdProducto = K == null ? I.i_Anticipio == 1 ? "ANTICIPIO" : "PRODUCTO NO EXISTE" : K.v_CodInterno,
                                 NombreProducto = K == null ? "" : K.v_Descripcion,
                                 CantidadDetalle = I == null ? 0 : I.i_Anticipio == 1 ? I.d_Cantidad.Value * -1 : N.i_UsadoDocumentoInverso != null && N.i_UsadoDocumentoInverso == 1 ? I.d_Cantidad.Value * -1 : I.d_Cantidad.Value,
                                 ValorVentaDetalle = I == null ? 0 : pintMoneda == (int)Currency.Soles && A.i_IdMoneda == (int)Currency.Soles ? (N.i_UsadoDocumentoInverso != null && N.i_UsadoDocumentoInverso == 1) || I.i_Anticipio == 1 ? I.d_ValorVenta.Value * -1 : I.d_ValorVenta.Value :
                                                                     pintMoneda == (int)Currency.Soles && A.i_IdMoneda == (int)Currency.Dolares ? (N.i_UsadoDocumentoInverso != null && N.i_UsadoDocumentoInverso == 1) || I.i_Anticipio == 1 ? (I.d_ValorVenta.Value * A.d_TipoCambio.Value) * -1 : (I.d_ValorVenta.Value * A.d_TipoCambio.Value) : 0,

                                 PrecioVentaDetalle = I == null ? 0 : pintMoneda == (int)Currency.Soles && A.i_IdMoneda == (int)Currency.Soles ? (N.i_UsadoDocumentoInverso != null && N.i_UsadoDocumentoInverso == 1) || I.i_Anticipio == 1 ? I.d_Valor.Value * -1 : I.d_Valor.Value :
                                                                     pintMoneda == (int)Currency.Soles && A.i_IdMoneda == (int)Currency.Dolares ? (N.i_UsadoDocumentoInverso != null && N.i_UsadoDocumentoInverso == 1) || I.i_Anticipio == 1 ? (I.d_Valor.Value * A.d_TipoCambio.Value) * -1 : (I.d_Valor.Value * A.d_TipoCambio.Value) : 0,

                                 ValorVentaDetalleD = I == null ? 0 : pintMoneda == (int)Currency.Dolares && A.i_IdMoneda == (int)Currency.Dolares ? (N.i_UsadoDocumentoInverso != null && N.i_UsadoDocumentoInverso == 1) || I.i_Anticipio == 1 ? I.d_ValorVenta.Value * -1 : I.d_ValorVenta.Value :
                                                                      pintMoneda == (int)Currency.Dolares && A.i_IdMoneda == (int)Currency.Soles ? (N.i_UsadoDocumentoInverso != null && N.i_UsadoDocumentoInverso == 1) || I.i_Anticipio == 1 ? (I.d_ValorVenta.Value / A.d_TipoCambio.Value) * -1 : I.d_ValorVenta.Value / A.d_TipoCambio.Value : 0,

                                 PrecioVentaDetalleD = I == null ? 0 : pintMoneda == (int)Currency.Dolares && A.i_IdMoneda == (int)Currency.Dolares ? (N.i_UsadoDocumentoInverso != null && N.i_UsadoDocumentoInverso == 1) || I.i_Anticipio == 1 ? I.d_Valor.Value * -1 : I.d_Valor.Value :
                                  pintMoneda == (int)Currency.Dolares && A.i_IdMoneda == (int)Currency.Soles ? (N.i_UsadoDocumentoInverso != null && N.i_UsadoDocumentoInverso == 1) || I.i_Anticipio == 1 ? (I.d_Valor.Value / A.d_TipoCambio.Value) * -1 : I.d_Valor.Value / A.d_TipoCambio.Value : 0,
                                 IdTipoDocumento = A.i_IdTipoDocumento.Value,
                                 TipoCambio = A.d_TipoCambio.Value,
                                 //OrdenLlave = 0,
                                 //pintAlmacen = I == null ? 0 : I.i_IdAlmacen.Value,
                                 v_Almacen = M == null ? "" : M.v_Nombre,
                                 Cliente = B == null ? "" : (B.v_CodCliente.Trim() + "-" + B.v_PrimerNombre + " " + B.v_SegundoNombre + " " + B.v_ApePaterno + " " + B.v_ApeMaterno + " " + B.v_RazonSocial).Trim(),
                                 GrupoLLave = pstrLlave == "LINEA" ? O == null ? "** LINEA NO EXISTE **" : "LINEA : " + O.v_Nombre : "",
                             }).ToList().AsQueryable();

                    var queryGuias =
                            (from A in dbContext.guiaremision
                             join B in dbContext.cliente on new { idCliente = A.v_IdCliente, eliminado = 0, flag = "C" } equals new { idCliente = B.v_IdCliente, eliminado = 0, flag = B.v_FlagPantalla } into B_join
                             from B in B_join.DefaultIfEmpty()
                             join F in dbContext.datahierarchy on new { m = A.i_IdMoneda.Value, Grupo = 18, eliminado = 0 } equals new { m = F.i_ItemId, Grupo = F.i_GroupId, eliminado = F.i_IsDeleted.Value } into F_join
                             from F in F_join.DefaultIfEmpty()
                             join I in dbContext.guiaremisiondetalle on new { v = A.v_IdGuiaRemision, eliminado = 0 } equals new { v = I.v_IdGuiaRemision, eliminado = I.i_Eliminado.Value } into I_join
                             from I in I_join.DefaultIfEmpty()
                             join J in dbContext.productodetalle on new { pd = I.v_IdProductoDetalle, eliminado = 0 } equals new { pd = J.v_IdProductoDetalle, eliminado = J.i_Eliminado.Value } into J_join
                             from J in J_join.DefaultIfEmpty()
                             join K in dbContext.producto on new { p = J.v_IdProducto, eliminado = 0 } equals new { p = K.v_IdProducto, eliminado = K.i_Eliminado.Value } into K_join
                             from K in K_join.DefaultIfEmpty()
                             join M in dbContext.almacen on new { idalmcen = I.i_IdAlmacen.Value, eliminado = 0 } equals new { idalmcen = M.i_IdAlmacen, eliminado = M.i_Eliminado.Value } into M_join

                             from M in M_join.DefaultIfEmpty()

                             join N in dbContext.documento on new { Doc = A.i_IdTipoDocumento.Value, eliminado = 0 } equals new { Doc = N.i_CodigoDocumento, eliminado = 0 } into N_join

                             from N in N_join.DefaultIfEmpty()

                             join O in dbContext.linea on new { Linea = K.v_IdLinea, eliminado = 0 } equals new { Linea = O.v_IdLinea, eliminado = O.i_Eliminado.Value } into O_join
                             from O in O_join.DefaultIfEmpty()

                             where (A.i_Eliminado == 0 && A.i_IdEstado == 1)
                              && (A.t_FechaEmision >= pstrt_FechaRegistroIni
                             && A.t_FechaEmision <= pstrt_FechaRegistroFin)
                             && (B.v_CodCliente == pstrt_IdCliente || pstrt_IdCliente == "")
                             && (K.v_CodInterno == pstr_CodInterno || pstr_CodInterno == "")
                             && A.i_IdEstablecimiento == pIntEstablecimiento
                             && (O.v_IdLinea == IdLinea || IdLinea == "-1")
                             && (K.v_IdMarca == IdMarca || IdMarca == "-1")
                             && I_join.Any(x => x.v_IdProductoDetalle == J.v_IdProductoDetalle)
                             && A.i_IdTipoGuia == (int)TiposDocumentos.GuiaInterna
                             orderby I.v_IdProductoDetalle
                             select new ReporteRegistroVentaProductoResumen
                             {
                                 NombreMoneda = F == null ? "" : F.v_Value2,
                                 IdMoneda = A.i_IdMoneda.Value,
                                 IdProducto = K == null ? "PRODUCTO NO EXISTE" : K.v_CodInterno,
                                 NombreProducto = K == null ? "" : K.v_Descripcion,
                                 CantidadDetalle = I == null ? 0 : N.i_UsadoDocumentoInverso != null && N.i_UsadoDocumentoInverso == 1 ? I.d_Cantidad.Value * -1 : I.d_Cantidad.Value,
                                 ValorVentaDetalle = I == null ? 0 : pintMoneda == (int)Currency.Soles && A.i_IdMoneda == (int)Currency.Soles ? N.i_UsadoDocumentoInverso != null && N.i_UsadoDocumentoInverso == 1 ? I.d_ValorVenta.Value * -1 : I.d_ValorVenta.Value :
                                                                     pintMoneda == (int)Currency.Soles && A.i_IdMoneda == (int)Currency.Dolares ? N.i_UsadoDocumentoInverso != null && N.i_UsadoDocumentoInverso == 1 ? (I.d_ValorVenta.Value * A.d_TipoCambio.Value) * -1 : (I.d_ValorVenta.Value * A.d_TipoCambio.Value) : 0,

                                 PrecioVentaDetalle = I == null ? 0 : pintMoneda == (int)Currency.Soles && A.i_IdMoneda == (int)Currency.Soles ? N.i_UsadoDocumentoInverso != null && N.i_UsadoDocumentoInverso == 1 ? I.d_Valor.Value * -1 : I.d_Valor.Value :
                                                                     pintMoneda == (int)Currency.Soles && A.i_IdMoneda == (int)Currency.Dolares ? N.i_UsadoDocumentoInverso != null && N.i_UsadoDocumentoInverso == 1 ? (I.d_Valor.Value * A.d_TipoCambio.Value) * -1 : (I.d_Valor.Value * A.d_TipoCambio.Value) : 0,

                                 ValorVentaDetalleD = I == null ? 0 : pintMoneda == (int)Currency.Dolares && A.i_IdMoneda == (int)Currency.Dolares ? N.i_UsadoDocumentoInverso != null && N.i_UsadoDocumentoInverso == 1 ? I.d_ValorVenta.Value * -1 : I.d_ValorVenta.Value :
                                                                      pintMoneda == (int)Currency.Dolares && A.i_IdMoneda == (int)Currency.Soles ? N.i_UsadoDocumentoInverso != null && N.i_UsadoDocumentoInverso == 1 ? (I.d_ValorVenta.Value / A.d_TipoCambio.Value) * -1 : I.d_ValorVenta.Value / A.d_TipoCambio.Value : 0,

                                 PrecioVentaDetalleD = I == null ? 0 : pintMoneda == (int)Currency.Dolares && A.i_IdMoneda == (int)Currency.Dolares ? N.i_UsadoDocumentoInverso != null && N.i_UsadoDocumentoInverso == 1 ? I.d_Valor.Value * -1 : I.d_Valor.Value :
                                  pintMoneda == (int)Currency.Dolares && A.i_IdMoneda == (int)Currency.Soles ? N.i_UsadoDocumentoInverso != null && N.i_UsadoDocumentoInverso == 1 ? (I.d_Valor.Value / A.d_TipoCambio.Value) * -1 : I.d_Valor.Value / A.d_TipoCambio.Value : 0,
                                 IdTipoDocumento = A.i_IdTipoDocumento.Value,
                                 TipoCambio = A.d_TipoCambio.Value,
                                 //OrdenLlave = 0,
                                 //pintAlmacen = I == null ? 0 : I.i_IdAlmacen.Value,
                                 v_Almacen = M == null ? "" : M.v_Nombre,
                                 Cliente = B == null ? "" : (B.v_CodCliente.Trim() + "-" + B.v_PrimerNombre + " " + B.v_SegundoNombre + " " + B.v_ApePaterno + " " + B.v_ApeMaterno + " " + B.v_RazonSocial).Trim(),
                                 GrupoLLave = pstrLlave == "LINEA" ? O == null ? "** LINEA NO EXISTE **" : "LINEA : " + O.v_Nombre : "",
                             }).ToList().AsQueryable();



                    var queryFinal = queryVentas.Concat(queryGuias).ToList().AsQueryable();

                    if (!string.IsNullOrEmpty(pstrAlmacenes))
                    {
                        queryFinal = queryFinal.Where(pstrAlmacenes);
                    }
                    List<ReporteRegistroVentaProductoResumen> ListaFiltrada = new List<ReporteRegistroVentaProductoResumen>();
                    if (ConsideraDocInternos == 0)
                    {
                        ListaFiltrada = queryFinal.ToList().Where(x => _objDocumentoBL.DocumentoEsContable(x.IdTipoDocumento)).ToList();
                    }
                    else
                    {

                        ListaFiltrada = queryFinal.ToList();
                    }
                    var ListaAux = ListaFiltrada;
                    ListaFiltrada = ListaFiltrada.GroupBy(x => new { x.IdProducto, x.v_Almacen }).Select(g => g.First()).OrderByDescending(o => o.OrdenLlave).ToList();
                    //2.- Query para hacer càculos en memoria 
                    foreach (var A in ListaFiltrada)
                    {
                        var ProductosxAlmacen = ListaAux.Where(x => x.v_Almacen == A.v_Almacen && x.IdProducto == A.IdProducto).ToList();
                        objReporte = A;
                        objReporte.CantidadDetalle = ProductosxAlmacen.Sum(x => x.CantidadDetalle);

                        objReporte.ValorVentaDetalle = ProductosxAlmacen.Sum(x => x.ValorVentaDetalle);
                        objReporte.PrecioVentaDetalle = ProductosxAlmacen.Sum(x => x.PrecioVentaDetalle);
                        objReporte.ValorVentaDetalleD = ProductosxAlmacen.Sum(x => x.ValorVentaDetalleD);
                        objReporte.PrecioVentaDetalleD = ProductosxAlmacen.Sum(x => x.PrecioVentaDetalleD);
                        ReporteFinal.Add(objReporte);
                    }

                    var objData = new List<ReporteRegistroVentaProductoResumen>();
                    objData = ReporteFinal.GroupBy(x => new { x.IdProducto, x.v_Almacen })
                                                .Select(group => group.First())
                                                .OrderByDescending(o => o.OrdenLlave).ToList();


                    #endregion

                    objOperationResult.Success = 1;
                    return objData.ToList().AsQueryable().OrderBy(pstrt_Orden).ToList();
                }
            }
            catch (Exception ex)
            {
                objOperationResult.Success = 0;
                return null;
            }
        }

        public List<ReporteRegistroVentaProductoResumen> ReporteRegistroVentaProductoResumenII(ref OperationResult objOperationResult, int pstri_IdEstablecimiento, DateTime? pstrt_FechaRegistroIni, DateTime? pstrt_FechaRegistroFin, int pintMoneda, string pstrt_IdCliente, string pstr_CodInterno, string pstrt_Orden, int pIntEstablecimiento, string pstrAlmacenes, int ConsideraDocContables, string pstrLlave, string IdLinea, string IdMarca)
        {
            //mon.IsActive = true;
            try
            {
                using (var dbContext = new SAMBHSEntitiesModelWin())
                {
                    dbContext.CommandTimeout = 0;
                    Stopwatch _timer = new Stopwatch();
                    _timer.Start();
                    #region Query

                    //1. query para obtener toda la data filtrada por los parametros
                    var queryVentas =
                            (from A in dbContext.ventadetalle

                             join B in dbContext.venta on new { v = A.v_IdVenta, eliminado = 0 } equals new { v = B.v_IdVenta, eliminado = B.i_Eliminado.Value } into B_join
                             from B in B_join.DefaultIfEmpty()


                             join C in dbContext.cliente on new { idCliente = B.v_IdCliente, eliminado = 0, flag = "C" } equals new { idCliente = C.v_IdCliente, eliminado = 0, flag = C.v_FlagPantalla } into C_join
                             from C in C_join.DefaultIfEmpty()


                             join D in dbContext.datahierarchy on new { m = B.i_IdMoneda.Value, Grupo = 18, eliminado = 0 } equals new { m = D.i_ItemId, Grupo = D.i_GroupId, eliminado = D.i_IsDeleted.Value } into D_join
                             from D in D_join.DefaultIfEmpty()


                             join E in dbContext.productodetalle on new { pd = A.v_IdProductoDetalle, eliminado = 0 } equals new { pd = E.v_IdProductoDetalle, eliminado = E.i_Eliminado.Value } into E_join
                             from E in E_join.DefaultIfEmpty()


                             join F in dbContext.producto on new { p = E.v_IdProducto, eliminado = 0 } equals new { p = F.v_IdProducto, eliminado = F.i_Eliminado.Value } into F_join
                             from F in F_join.DefaultIfEmpty()


                             join M in dbContext.almacen on new { idalmcen = A.i_IdAlmacen.Value, eliminado = 0 } equals new { idalmcen = M.i_IdAlmacen, eliminado = M.i_Eliminado.Value } into M_join

                             from M in M_join.DefaultIfEmpty()

                             join N in dbContext.documento on new { Doc = B.i_IdTipoDocumento.Value, eliminado = 0 } equals new { Doc = N.i_CodigoDocumento, eliminado = 0 } into N_join

                             from N in N_join.DefaultIfEmpty()

                             join O in dbContext.linea on new { Linea = F.v_IdLinea, eliminado = 0 } equals new { Linea = O.v_IdLinea, eliminado = O.i_Eliminado.Value } into O_join
                             from O in O_join.DefaultIfEmpty()

                             join P in dbContext.talla on new { talla = F.v_IdTalla, eliminado = 0 } equals new { talla = P.v_IdTalla, eliminado = P.i_Eliminado.Value } into P_join
                             from P in P_join.DefaultIfEmpty()

                             join Q in dbContext.color on new { color = F.v_IdColor, eliminado = 0 } equals new { color = Q.v_IdColor, eliminado = Q.i_Eliminado.Value } into Q_join
                             from Q in Q_join.DefaultIfEmpty()

                             join R in dbContext.datahierarchy on new { coleccion = F.i_IdColeccion.Value, eliminado = 0, Grupo = 15 } equals new { coleccion = R.i_ItemId, eliminado = R.i_IsDeleted.Value, Grupo = R.i_GroupId } into R_join
                             from R in R_join.DefaultIfEmpty()

                             join S in dbContext.marca on new { marca = F.v_IdMarca } equals new { marca = S.v_IdMarca } into S_join
                             from S in S_join.DefaultIfEmpty()

                             join T in dbContext.datahierarchy on new { temporada = 16, eliminado = 0, item = F.i_IdTemporada.Value } equals new { temporada = T.i_GroupId, eliminado = T.i_IsDeleted.Value, item = T.i_ItemId } into T_join
                             from T in T_join.DefaultIfEmpty()

                             where (B.i_Eliminado == 0 && B.i_IdEstado == 1)
                              && (B.t_FechaRegistro >= pstrt_FechaRegistroIni
                             && B.t_FechaRegistro <= pstrt_FechaRegistroFin)
                             && (C.v_CodCliente == pstrt_IdCliente || pstrt_IdCliente == "")
                             && (F.v_CodInterno == pstr_CodInterno || pstr_CodInterno == "")
                             && (B.i_IdEstablecimiento == pIntEstablecimiento || pIntEstablecimiento == -1 || pIntEstablecimiento == 99)
                             && (O.v_IdLinea == IdLinea || IdLinea == "-1")
                             && (F.v_IdMarca == IdMarca || IdMarca == "-1")
                             && A.v_IdProductoDetalle != null && F.v_IdProducto != "N002-PD000000000" && A.i_Eliminado == 0

                             orderby A.v_IdProductoDetalle
                             select new ReporteRegistroVentaProductoResumen
                             {
                                 NombreMoneda = D == null ? "" : D.v_Value2,
                                 IdMoneda = B.i_IdMoneda.Value,
                                 IdProducto = F == null ? A.i_Anticipio == 1 ? "ANTICIPIO" : "PRODUCTO NO EXISTE" : F.v_CodInterno,
                                 NombreProducto = F == null ? "" : F.v_Descripcion,
                                 CantidadDetalle = A == null ? 0 : A.i_Anticipio == 1 ? A.d_Cantidad.Value * -1 : N.i_UsadoDocumentoInverso != null && N.i_UsadoDocumentoInverso == 1 ? A.d_Cantidad.Value * -1 : A.d_Cantidad.Value,
                                 ValorVentaDetalle = A == null ? 0 : pintMoneda == (int)Currency.Soles && B.i_IdMoneda == (int)Currency.Soles ? (N.i_UsadoDocumentoInverso != null && N.i_UsadoDocumentoInverso == 1) || A.i_Anticipio == 1 ? A.d_ValorVenta.Value * -1 : A.d_ValorVenta.Value :
                                                                     pintMoneda == (int)Currency.Soles && B.i_IdMoneda == (int)Currency.Dolares ? (N.i_UsadoDocumentoInverso != null && N.i_UsadoDocumentoInverso == 1) || A.i_Anticipio == 1 ? (A.d_ValorVenta.Value * B.d_TipoCambio.Value) * -1 : (A.d_ValorVenta.Value * B.d_TipoCambio.Value) : 0,

                                 PrecioVentaDetalle = A == null ? 0 : pintMoneda == (int)Currency.Soles && B.i_IdMoneda == (int)Currency.Soles ? (N.i_UsadoDocumentoInverso != null && N.i_UsadoDocumentoInverso == 1) || A.i_Anticipio == 1 ? A.d_PrecioVenta.Value * -1 : A.d_PrecioVenta.Value :
                                                                     pintMoneda == (int)Currency.Soles && B.i_IdMoneda == (int)Currency.Dolares ? (N.i_UsadoDocumentoInverso != null && N.i_UsadoDocumentoInverso == 1) || A.i_Anticipio == 1 ? (A.d_PrecioVenta.Value * B.d_TipoCambio.Value) * -1 : (A.d_PrecioVenta.Value * B.d_TipoCambio.Value) : 0,
                                 ValorVentaDetalleD = A == null ? 0 : pintMoneda == (int)Currency.Dolares && B.i_IdMoneda == (int)Currency.Dolares ? (N.i_UsadoDocumentoInverso != null && N.i_UsadoDocumentoInverso == 1) || A.i_Anticipio == 1 ? A.d_ValorVenta.Value * -1 : A.d_ValorVenta.Value :
                                                                      pintMoneda == (int)Currency.Dolares && B.i_IdMoneda == (int)Currency.Soles ? (N.i_UsadoDocumentoInverso != null && N.i_UsadoDocumentoInverso == 1) || A.i_Anticipio == 1 ? (A.d_ValorVenta.Value / B.d_TipoCambio.Value) * -1 : A.d_ValorVenta.Value / B.d_TipoCambio.Value : 0,

                                 PrecioVentaDetalleD = A == null ? 0 : pintMoneda == (int)Currency.Dolares && B.i_IdMoneda == (int)Currency.Dolares ? (N.i_UsadoDocumentoInverso != null && N.i_UsadoDocumentoInverso == 1) || A.i_Anticipio == 1 ? A.d_PrecioVenta.Value * -1 : A.d_PrecioVenta.Value : pintMoneda == (int)Currency.Dolares && B.i_IdMoneda == (int)Currency.Soles ? (N.i_UsadoDocumentoInverso != null && N.i_UsadoDocumentoInverso == 1) || A.i_Anticipio == 1 ? (A.d_PrecioVenta.Value / B.d_TipoCambio.Value) * -1 : A.d_PrecioVenta.Value / B.d_TipoCambio.Value : 0,
                                 IdTipoDocumento = B.i_IdTipoDocumento.Value,
                                 TipoCambio = B.d_TipoCambio.Value,
                                 v_Almacen = M == null ? "" : pIntEstablecimiento == -1 ? "" : M.v_Nombre,
                                 Cliente = C == null ? "" : (C.v_CodCliente.Trim() + "-" + C.v_PrimerNombre + " " + C.v_SegundoNombre + " " + C.v_ApePaterno + " " + C.v_ApeMaterno + " " + C.v_RazonSocial).Trim(),
                                 GrupoLLave = pstrLlave == "LINEA" ? O == null ? "** LINEA NO EXISTE **" : "LINEA : " + O.v_Nombre : pstrLlave == "MODELO" ? F.v_CodInterno.Length > 8 ? "MODELO : " + F.v_CodInterno.Substring(0, 8) : "" : pstrLlave == "MODELO Y TALLA" ? F.v_CodInterno.Length > 8 ? "MODELO : " + F.v_CodInterno.Substring(5, 3) + " - TALLA : " + P.v_Nombre : "MODELO : TALLA :" : pstrLlave == "MODELO , TALLA Y COLOR" ? F.v_CodInterno.Length > 8 ? "MODELO :" + F.v_CodInterno.Substring(5, 3) + " - TALLA : " + P.v_Nombre + " - COLOR : " + Q.v_Nombre : "" : pstrLlave == "COLECCIÓN" ? R == null ? "COLECCIÓN NO EXISTE" : "COLECCIÓN : " + R.v_Value1 : pstrLlave == "MARCA" ? S != null ? "MARCA :" + S.v_Nombre : "MARCA NO EXISTE" : pstrLlave == "TEMPORADA" ? T == null ? "TEMPORADA NO EXISTE" : T.v_Value1 :

                                 pstrLlave == "LINEA ,MARCA , MODELO" ? "LINEA : " + O.v_Nombre + " - MARCA : " + S.v_Nombre + " - MODELO : " + F.v_CodInterno.Substring(0, 8) : pstrLlave == "LINEA ,MARCA , MODELO , TALLA   " ? "LINEA : " + O.v_Nombre + " - MARCA : " + S.v_Nombre + " - MODELO : " + F.v_CodInterno.Substring(5, 3) + " TALLA : " + P.v_Nombre : "",

                                 Documento = N.v_Siglas + " " + B.v_SerieDocumento + " " + B.v_CorrelativoDocumento,
                                 pintAlmacen = M == null ? 0 : pIntEstablecimiento == -1 ? 0 : M.i_IdAlmacen,
                                 DocumentoContable = N.i_UsadoDocumentoContable == 1 ? "CONTABLE" : "NO CONTABLE",
                                  CostoUnitario  = F.d_PrecioCosto ??0,
                                


                             }).ToList().Select(o =>
                             {
                                 var serCorr = o.NombreProducto.Split(' ');
                                 return new ReporteRegistroVentaProductoResumen
                                 {

                                     NombreMoneda = o.NombreMoneda,
                                     IdMoneda = o.IdMoneda,
                                     IdProducto = o.IdProducto,
                                     NombreProducto = o.NombreProducto,
                                     CantidadDetalle = o.CantidadDetalle,
                                     ValorVentaDetalle = o.ValorVentaDetalle,
                                     PrecioVentaDetalle = o.PrecioVentaDetalle,
                                     ValorVentaDetalleD = o.ValorVentaDetalleD,
                                     PrecioVentaDetalleD = o.PrecioVentaDetalleD,
                                     IdTipoDocumento = o.IdTipoDocumento,
                                     TipoCambio = o.TipoCambio,
                                     v_Almacen = o.v_Almacen,
                                     Cliente = o.Cliente,
                                     Documento = o.Documento,
                                     pintAlmacen = o.pintAlmacen,
                                     GrupoLLave = pstrLlave == "MODELO" ? serCorr != null && serCorr.Count() >= 3 ? o.GrupoLLave + " " + serCorr[0] + " " + serCorr[1] + " " + serCorr[2] : o.GrupoLLave : o.GrupoLLave,
                                     DocumentoContable = o.DocumentoContable,
                                     CostoUnitario = o.CostoUnitario ,
                                    
                                 };
                             }).ToList();
                    _timer.Stop();
                    var gg = _timer.Elapsed;

                    var queryGuias =
                            (from A in dbContext.guiaremision
                             join B in dbContext.cliente on new { idCliente = A.v_IdCliente, eliminado = 0, flag = "C" } equals new { idCliente = B.v_IdCliente, eliminado = 0, flag = B.v_FlagPantalla } into B_join
                             from B in B_join.DefaultIfEmpty()
                             join F in dbContext.datahierarchy on new { m = A.i_IdMoneda.Value, Grupo = 18, eliminado = 0 } equals new { m = F.i_ItemId, Grupo = F.i_GroupId, eliminado = F.i_IsDeleted.Value } into F_join
                             from F in F_join.DefaultIfEmpty()
                             join I in dbContext.guiaremisiondetalle on new { v = A.v_IdGuiaRemision, eliminado = 0 } equals new { v = I.v_IdGuiaRemision, eliminado = I.i_Eliminado.Value } into I_join
                             from I in I_join.DefaultIfEmpty()
                             join J in dbContext.productodetalle on new { pd = I.v_IdProductoDetalle, eliminado = 0 } equals new { pd = J.v_IdProductoDetalle, eliminado = J.i_Eliminado.Value } into J_join
                             from J in J_join.DefaultIfEmpty()
                             join K in dbContext.producto on new { p = J.v_IdProducto, eliminado = 0 } equals new { p = K.v_IdProducto, eliminado = K.i_Eliminado.Value } into K_join
                             from K in K_join.DefaultIfEmpty()
                             join M in dbContext.almacen on new { idalmcen = I.i_IdAlmacen.Value, eliminado = 0 } equals new { idalmcen = M.i_IdAlmacen, eliminado = M.i_Eliminado.Value } into M_join

                             from M in M_join.DefaultIfEmpty()

                             join N in dbContext.documento on new { Doc = A.i_IdTipoDocumento.Value, eliminado = 0 } equals new { Doc = N.i_CodigoDocumento, eliminado = 0 } into N_join

                             from N in N_join.DefaultIfEmpty()

                             join O in dbContext.linea on new { Linea = K.v_IdLinea, eliminado = 0 } equals new { Linea = O.v_IdLinea, eliminado = O.i_Eliminado.Value } into O_join
                             from O in O_join.DefaultIfEmpty()
                             where (A.i_Eliminado == 0 && A.i_IdEstado == 1)
                              && (A.t_FechaEmision >= pstrt_FechaRegistroIni
                             && A.t_FechaEmision <= pstrt_FechaRegistroFin)
                             && (B.v_CodCliente == pstrt_IdCliente || pstrt_IdCliente == "")
                             && (K.v_CodInterno == pstr_CodInterno || pstr_CodInterno == "")
                             && A.i_IdEstablecimiento == pIntEstablecimiento
                             && (O.v_IdLinea == IdLinea || IdLinea == "-1")
                             && (K.v_IdMarca == IdMarca || IdMarca == "-1")
                             && I_join.Any(x => x.v_IdProductoDetalle == J.v_IdProductoDetalle)
                             && A.i_IdTipoGuia == (int)TiposDocumentos.GuiaInterna

                              && I.v_IdProductoDetalle != null
                             orderby I.v_IdProductoDetalle
                             select new ReporteRegistroVentaProductoResumen
                             {
                                 NombreMoneda = F == null ? "" : F.v_Value2,
                                 IdMoneda = A.i_IdMoneda.Value,
                                 IdProducto = K == null ? "PRODUCTO NO EXISTE" : K.v_CodInterno,
                                 NombreProducto = K == null ? "" : K.v_Descripcion,
                                 CantidadDetalle = I == null ? 0 : N.i_UsadoDocumentoInverso != null && N.i_UsadoDocumentoInverso == 1 ? I.d_Cantidad.Value * -1 : I.d_Cantidad.Value,
                                 ValorVentaDetalle = I == null ? 0 : pintMoneda == (int)Currency.Soles && A.i_IdMoneda == (int)Currency.Soles ? N.i_UsadoDocumentoInverso != null && N.i_UsadoDocumentoInverso == 1 ? I.d_ValorVenta.Value * -1 : I.d_ValorVenta.Value :
                                                                     pintMoneda == (int)Currency.Soles && A.i_IdMoneda == (int)Currency.Dolares ? N.i_UsadoDocumentoInverso != null && N.i_UsadoDocumentoInverso == 1 ? (I.d_ValorVenta.Value * A.d_TipoCambio.Value) * -1 : (I.d_ValorVenta.Value * A.d_TipoCambio.Value) : 0,

                                 PrecioVentaDetalle = I == null ? 0 : pintMoneda == (int)Currency.Soles && A.i_IdMoneda == (int)Currency.Soles ? N.i_UsadoDocumentoInverso != null && N.i_UsadoDocumentoInverso == 1 ? I.d_Precio.Value * -1 : I.d_Precio.Value :
                                                                     pintMoneda == (int)Currency.Soles && A.i_IdMoneda == (int)Currency.Dolares ? N.i_UsadoDocumentoInverso != null && N.i_UsadoDocumentoInverso == 1 ? (I.d_Precio.Value * A.d_TipoCambio.Value) * -1 : (I.d_Precio.Value * A.d_TipoCambio.Value) : 0,

                                 ValorVentaDetalleD = I == null ? 0 : pintMoneda == (int)Currency.Dolares && A.i_IdMoneda == (int)Currency.Dolares ? N.i_UsadoDocumentoInverso != null && N.i_UsadoDocumentoInverso == 1 ? I.d_ValorVenta.Value * -1 : I.d_ValorVenta.Value :
                                                                      pintMoneda == (int)Currency.Dolares && A.i_IdMoneda == (int)Currency.Soles ? N.i_UsadoDocumentoInverso != null && N.i_UsadoDocumentoInverso == 1 ? (I.d_ValorVenta.Value / A.d_TipoCambio.Value) * -1 : I.d_ValorVenta.Value / A.d_TipoCambio.Value : 0,

                                 PrecioVentaDetalleD = I == null ? 0 : pintMoneda == (int)Currency.Dolares && A.i_IdMoneda == (int)Currency.Dolares ? N.i_UsadoDocumentoInverso != null && N.i_UsadoDocumentoInverso == 1 ? I.d_Precio.Value * -1 : I.d_Precio.Value :
                                  pintMoneda == (int)Currency.Dolares && A.i_IdMoneda == (int)Currency.Soles ? N.i_UsadoDocumentoInverso != null && N.i_UsadoDocumentoInverso == 1 ? (I.d_Precio.Value / A.d_TipoCambio.Value) * -1 : I.d_Precio.Value / A.d_TipoCambio.Value : 0,


                                 IdTipoDocumento = A.i_IdTipoDocumento.Value,
                                 TipoCambio = A.d_TipoCambio.Value,

                                 v_Almacen = M == null ? "" : M.v_Nombre,
                                 Cliente = B == null ? "" : (B.v_CodCliente.Trim() + "-" + B.v_PrimerNombre + " " + B.v_SegundoNombre + " " + B.v_ApePaterno + " " + B.v_ApeMaterno + " " + B.v_RazonSocial).Trim(),
                                 GrupoLLave = pstrLlave == "LINEA" ? O == null ? "** LINEA NO EXISTE **" : "LINEA : " + O.v_Nombre : "",
                                 pintAlmacen = pIntEstablecimiento == -1 ? 0 : I.i_IdAlmacen.Value,
                                 DocumentoContable = "NO CONTABLE"

                             }).ToList();

                    var queryFinal = queryVentas.Concat(queryGuias).ToList().AsQueryable();
                    if (!string.IsNullOrEmpty(pstrAlmacenes))
                    {
                        queryFinal = queryFinal.Where(pstrAlmacenes);
                    }
                    List<ReporteRegistroVentaProductoResumen> ListaFiltrada = new List<ReporteRegistroVentaProductoResumen>();
                    ListaFiltrada = ConsideraDocContables == -1 ? queryFinal.ToList() : ConsideraDocContables == 1 ? queryFinal.ToList().Where(x => _objDocumentoBL.DocumentoEsContable(x.IdTipoDocumento)).ToList() : queryFinal.ToList().Where(x => !_objDocumentoBL.DocumentoEsContable(x.IdTipoDocumento)).ToList();
                    List<ReporteRegistroVentaProductoResumen> ListaResumen = new List<ReporteRegistroVentaProductoResumen>();
                    if (pIntEstablecimiento == -1)
                    {

                        ListaResumen = ListaFiltrada.ToList().GroupBy(l => new { prod = l.IdProducto }).ToList().Select(p =>
                        {
                            var k = p.FirstOrDefault();
                            // var NombreAlmacen =new AlmacenBL().ReporteAlmacen(p.FirstOrDefault().pintAlmacen).FirstOrDefault();
                            //k.v_Almacen = NombreAlmacen != null ? NombreAlmacen.v_Nombre : "";
                            k.CantidadDetalle = p.Sum(l => l.CantidadDetalle);
                            k.ValorVentaDetalle =Utils.Windows.DevuelveValorRedondeado ( p.Sum(l => l.ValorVentaDetalle),2);
                            k.PrecioVentaDetalle = p.Sum(l => l.PrecioVentaDetalle);
                            k.PrecioVentaDetalleD = p.Sum(l => l.PrecioVentaDetalleD);
                            k.ValorVentaDetalleD = p.Sum(l => l.ValorVentaDetalleD);
                            
                            k.CostoTotal = k.CantidadDetalle * k.CostoUnitario;
                            k.Utilidad = k.ValorVentaDetalle - k.CostoTotal;
                            k.MargenContribucion = Utils.Windows.DevuelveValorRedondeado ( k.ValorVentaDetalle ==0 ?0:(k.Utilidad * 100) / k.ValorVentaDetalle,2);
                            k.PrecioVtaUnitarioPromedio =Utils.Windows.DevuelveValorRedondeado ( k.CantidadDetalle ==0 ?0 : (k.ValorVentaDetalle / k.CantidadDetalle) * decimal.Parse("1.18"),2);
                            return k;

                        }).ToList();
                    }
                    else
                    {
                        ListaResumen = ListaFiltrada.ToList().GroupBy(l => new { prod = l.IdProducto, almacen = l.pintAlmacen }).ToList().Select(p =>
                        {
                            var k = p.FirstOrDefault();
                            k.CantidadDetalle = p.Sum(l => l.CantidadDetalle);
                            k.ValorVentaDetalle =  Utils.Windows.DevuelveValorRedondeado ( p.Sum(l => l.ValorVentaDetalle),2);
                            k.PrecioVentaDetalle = p.Sum(l => l.PrecioVentaDetalle);
                            k.PrecioVentaDetalleD = p.Sum(l => l.PrecioVentaDetalleD);
                            k.ValorVentaDetalleD = p.Sum(l => l.ValorVentaDetalleD);
                            k.CostoTotal = k.CantidadDetalle * k.CostoUnitario;
                            k.Utilidad = k.ValorVentaDetalle - k.CostoTotal;
                            k.MargenContribucion = Utils .Windows.DevuelveValorRedondeado ( k.ValorVentaDetalle == 0 ? 0 : (k.Utilidad * 100) / k.ValorVentaDetalle ,2);
                            k.PrecioVtaUnitarioPromedio = Utils.Windows.DevuelveValorRedondeado ( k.CantidadDetalle == 0 ? 0 : (k.ValorVentaDetalle / k.CantidadDetalle) * decimal.Parse("1.18"),2);
                            return k;

                        }).ToList();
                    }

                    #endregion
                    objOperationResult.Success = 1;
                    return ListaResumen.ToList().AsQueryable().OrderBy(pstrt_Orden).ToList();
                }
            }
            catch (Exception ex)
            {

                objOperationResult.Success = 0;
                objOperationResult.AdditionalInformation = "VentaBL.ReporteRegistroVentaProductoResumen()\nLinea:" +
                                                            ex.StackTrace.Substring(ex.StackTrace.LastIndexOf(' '));
                objOperationResult.ErrorMessage = ex.Message;
                objOperationResult.ExceptionMessage = ex.InnerException != null
                    ? ex.InnerException.Message
                    : string.Empty;
                Utils.ExceptionToLog(Globals.ClientSession.i_SystemUserId, objOperationResult);
                return null;



            }
        }


        private List<decimal> CalcularSumaDetalle(List<ReporteRegistroVentaProductoResumen> Lista, string pstrIdProducto, int pIntAlmacen, int pIntDocumento, decimal TipoCambio, int pIntMoneda)
        {
            var objData = new valoresRegistroVenta();
            List<decimal> Retonar = new List<decimal>();
            decimal CantidadDetalle, ValorVentaDetalle, PrecioVentaDetalle;
            var xx = Lista.Where(p => p.IdProducto == pstrIdProducto && p.pintAlmacen == pIntAlmacen);
            CantidadDetalle = pstrIdProducto != "0000" ? xx.Sum(x => x.CantidadDetalle) : 0;
            ValorVentaDetalle = xx.Sum(x => x.ValorVentaDetalle);
            PrecioVentaDetalle = xx.Sum(x => x.PrecioVentaDetalle);
            objData = CalcularVentaDetalle(pIntDocumento, 1, 1, ValorVentaDetalle, 1, PrecioVentaDetalle, CantidadDetalle, TipoCambio, pIntMoneda);

            Retonar.Add(CantidadDetalle);
            Retonar.Add(objData.ValorVentaDetalleSoles);
            Retonar.Add(objData.ValorVentaDetalleDolares);
            Retonar.Add(objData.PrecioVentaDetalleSoles);
            Retonar.Add(objData.PrecioVentaDetalleDolares);
            return Retonar;
        }

        private valoresRegistroVenta CalcularVentaDetalle(int pintTipoDocumento, decimal pdecPrecioDetalle, decimal pdecValorDetalle, decimal pdecValorVentaDetalle, decimal pdecDescuentoDetalle, decimal pdecPrecioVentaDetalle, decimal pdecIgvDetalle, decimal pdecTipoCambio, int pintMonedaId)
        {
            valoresRegistroVenta objvaloresRegistroVenta = new valoresRegistroVenta();
            if (pdecTipoCambio == 0 || pdecTipoCambio == null)
            {
                pdecTipoCambio = 1;
            }
            if (_objDocumentoBL.DocumentoEsInverso(pintTipoDocumento))
            {
                if (pintMonedaId == (int)Currency.Soles)
                {
                    objvaloresRegistroVenta.PrecioDetalleSoles = pdecPrecioDetalle * -1;
                    objvaloresRegistroVenta.PrecioDetalleDolares = (pdecPrecioDetalle * -1) / pdecTipoCambio;

                    objvaloresRegistroVenta.ValorDetalleSoles = pdecValorDetalle * -1;
                    objvaloresRegistroVenta.ValorDetalleDolares = (pdecValorDetalle * -1) / pdecTipoCambio;

                    objvaloresRegistroVenta.ValorVentaDetalleSoles = pdecValorVentaDetalle * -1;
                    objvaloresRegistroVenta.ValorVentaDetalleDolares = (pdecValorVentaDetalle * -1) / pdecTipoCambio;

                    objvaloresRegistroVenta.DescuentoDetalleSoles = pdecDescuentoDetalle * -1;
                    objvaloresRegistroVenta.DescuentoDetalleDolares = (pdecDescuentoDetalle * -1) / pdecTipoCambio;

                    objvaloresRegistroVenta.PrecioVentaDetalleSoles = pdecPrecioVentaDetalle * -1;
                    objvaloresRegistroVenta.PrecioVentaDetalleDolares = (pdecPrecioVentaDetalle * -1) / pdecTipoCambio;

                    objvaloresRegistroVenta.IgvDetalleSoles = pdecIgvDetalle * -1;
                    objvaloresRegistroVenta.IgvDetalleDolares = (pdecIgvDetalle * -1) / pdecTipoCambio;



                }
                else if (pintMonedaId == (int)Currency.Dolares)
                {

                    objvaloresRegistroVenta.PrecioDetalleSoles = pdecPrecioDetalle * -1 * pdecTipoCambio;
                    objvaloresRegistroVenta.PrecioDetalleDolares = (pdecPrecioDetalle * -1);

                    objvaloresRegistroVenta.ValorDetalleSoles = pdecValorDetalle * -1 * pdecTipoCambio;
                    objvaloresRegistroVenta.ValorDetalleDolares = (pdecValorDetalle * -1);

                    objvaloresRegistroVenta.ValorVentaDetalleSoles = pdecValorVentaDetalle * -1 * pdecTipoCambio;
                    objvaloresRegistroVenta.ValorVentaDetalleDolares = (pdecValorVentaDetalle * -1);

                    objvaloresRegistroVenta.DescuentoDetalleSoles = pdecDescuentoDetalle * -1 * pdecTipoCambio;
                    objvaloresRegistroVenta.DescuentoDetalleDolares = (pdecDescuentoDetalle * -1);

                    objvaloresRegistroVenta.PrecioVentaDetalleSoles = pdecPrecioVentaDetalle * -1 * pdecTipoCambio;
                    objvaloresRegistroVenta.PrecioVentaDetalleDolares = (pdecPrecioVentaDetalle * -1);

                    objvaloresRegistroVenta.IgvDetalleSoles = pdecIgvDetalle * -1 * pdecTipoCambio;
                    objvaloresRegistroVenta.IgvDetalleDolares = (pdecIgvDetalle * -1);

                }

            }
            else
            {
                if (pintMonedaId == (int)Currency.Soles)
                {
                    objvaloresRegistroVenta.PrecioDetalleSoles = pdecPrecioDetalle;
                    objvaloresRegistroVenta.PrecioDetalleDolares = (pdecPrecioDetalle) / pdecTipoCambio;

                    objvaloresRegistroVenta.ValorDetalleSoles = pdecValorDetalle;
                    objvaloresRegistroVenta.ValorDetalleDolares = (pdecValorDetalle) / pdecTipoCambio;

                    objvaloresRegistroVenta.ValorVentaDetalleSoles = pdecValorVentaDetalle;
                    objvaloresRegistroVenta.ValorVentaDetalleDolares = (pdecValorVentaDetalle) / pdecTipoCambio;

                    objvaloresRegistroVenta.DescuentoDetalleSoles = pdecDescuentoDetalle;
                    objvaloresRegistroVenta.DescuentoDetalleDolares = (pdecDescuentoDetalle) / pdecTipoCambio;

                    objvaloresRegistroVenta.PrecioVentaDetalleSoles = pdecPrecioVentaDetalle;
                    objvaloresRegistroVenta.PrecioVentaDetalleDolares = (pdecPrecioVentaDetalle) / pdecTipoCambio;

                    objvaloresRegistroVenta.IgvDetalleSoles = pdecIgvDetalle;
                    objvaloresRegistroVenta.IgvDetalleDolares = (pdecIgvDetalle) / pdecTipoCambio;


                }
                else if (pintMonedaId == (int)Currency.Dolares)
                {
                    objvaloresRegistroVenta.PrecioDetalleSoles = pdecPrecioDetalle * pdecTipoCambio;
                    objvaloresRegistroVenta.PrecioDetalleDolares = (pdecPrecioDetalle);

                    objvaloresRegistroVenta.ValorDetalleSoles = pdecValorDetalle * pdecTipoCambio;
                    objvaloresRegistroVenta.ValorDetalleDolares = (pdecValorDetalle);

                    objvaloresRegistroVenta.ValorVentaDetalleSoles = pdecValorVentaDetalle * pdecTipoCambio;
                    objvaloresRegistroVenta.ValorVentaDetalleDolares = (pdecValorVentaDetalle);

                    objvaloresRegistroVenta.DescuentoDetalleSoles = pdecDescuentoDetalle * pdecTipoCambio;
                    objvaloresRegistroVenta.DescuentoDetalleDolares = (pdecDescuentoDetalle);

                    objvaloresRegistroVenta.PrecioVentaDetalleSoles = pdecPrecioVentaDetalle * pdecTipoCambio;
                    objvaloresRegistroVenta.PrecioVentaDetalleDolares = (pdecPrecioVentaDetalle);

                    objvaloresRegistroVenta.IgvDetalleSoles = pdecIgvDetalle * pdecTipoCambio;
                    objvaloresRegistroVenta.IgvDetalleDolares = (pdecIgvDetalle);


                }
            }
            return objvaloresRegistroVenta;

        }



        /*public List<ReporteRegistroVentaProductoMensual> ReporteRegistroVentaProductoMensualII(ref OperationResult objOperationResult, int pstri_IdEstablecimiento, DateTime? pstrt_FechaRegistroIni, DateTime? pstrt_FechaRegistroFin, int pIntMoneda, string pstrt_IdCliente, string pstr_CodInterno, string pstrt_Orden, int ConsideraDocInternos, string Agrupar, string IdLinea, string IdMarca, int TipoConsiderar, string IdVendedor)
        {
            //mon.IsActive = true;
            try
            {
                using (SAMBHSEntitiesModelWin dbContext = new SAMBHSEntitiesModelWin())
                {
                    List<ReporteRegistroVentaProductoMensual> queryVentas = new List<ReporteRegistroVentaProductoMensual>();
                    List<ReporteRegistroVentaProductoMensual> queryGuias = new List<ReporteRegistroVentaProductoMensual>();


                    if (TipoConsiderar == (int)TipoReporteVentasMensual.Unidades)
                    {
                        #region Unidades
                        queryVentas =
                               (from A in dbContext.ventadetalle.AsParallel()
                                join B in dbContext.venta.AsParallel() on new { V = A != null ? A.v_IdVenta : "", eliminado = 0 } equals new { V = B.v_IdVenta, eliminado = B.i_Eliminado.Value } into B_join
                                from B in B_join.DefaultIfEmpty()
                                join F in dbContext.datahierarchy.AsParallel() on new { m = B != null ? B.i_IdMoneda.Value : 0, eliminado = 0, Grupo = 18 } equals new { m = F.i_ItemId, eliminado = F.i_IsDeleted.Value, Grupo = F.i_GroupId } into F_join
                                from F in F_join.DefaultIfEmpty()
                                join C in dbContext.cliente.AsParallel() on new { v = B != null ? B.v_IdCliente : "", eliminado = 0 } equals new { v = C.v_IdCliente, eliminado = C.i_Eliminado.Value } into C_join
                                from C in C_join.DefaultIfEmpty()
                                join J in dbContext.productodetalle.AsParallel() on new { A.v_IdProductoDetalle, eliminado = 0 } equals new { J.v_IdProductoDetalle, eliminado = J.i_Eliminado.Value } into J_join
                                from J in J_join.DefaultIfEmpty()
                                join K in dbContext.producto.AsParallel() on new { p = J != null ? J.v_IdProducto : "", eliminado = 0 } equals new { p = K.v_IdProducto, eliminado = K.i_Eliminado.Value } into K_join
                                from K in K_join.DefaultIfEmpty()
                                join M in dbContext.documento.AsParallel() on new { doc = B != null ? B.i_IdTipoDocumento.Value : 0, eliminado = 0 } equals new { doc = M.i_CodigoDocumento, eliminado = M.i_Eliminado.Value } into M_join
                                from M in M_join.DefaultIfEmpty()
                                join N in dbContext.linea.AsParallel() on new { IdLinea = K != null ? K.v_IdLinea : "", eliminado = 0 } equals new { IdLinea = N.v_IdLinea, eliminado = N.i_Eliminado.Value } into N_join
                                from N in N_join.DefaultIfEmpty()
                                join O in dbContext.vendedor.AsParallel() on new { Vendedor = B != null ? B.v_IdVendedor : "", eliminado = 0 } equals new { Vendedor = O.v_IdVendedor, eliminado = O.i_Eliminado.Value } into O_join
                                from O in O_join.DefaultIfEmpty()
                                where (B != null && B.i_IdEstado == 1 && A.i_Eliminado == 0)
                                 && (B != null && B.t_FechaRegistro >= pstrt_FechaRegistroIni
                                && B.t_FechaRegistro <= pstrt_FechaRegistroFin)
                                && (C != null && (C.v_CodCliente == pstrt_IdCliente || pstrt_IdCliente == ""))
                                && (K != null && (K.v_CodInterno == pstr_CodInterno || pstr_CodInterno == ""))
                                    //  && I_join.Any(x => x.v_IdProductoDetalle == J.v_IdProductoDetalle)
                                 && (K != null && (K.v_IdLinea == IdLinea || IdLinea == "-1")) && (K != null && (K.v_IdMarca == IdMarca || IdMarca == "-1"))
                                 && B.i_IdEstablecimiento == Globals.ClientSession.i_IdEstablecimiento.Value && J.v_IdProductoDetalle != "N002-PE000000000" &&
                                  A.v_IdProductoDetalle != null
                                  && (B != null && (B.v_IdVendedor == IdVendedor || IdVendedor == "-1"))

                                  && B != null

                                orderby J.v_IdProductoDetalle
                                select new ReporteRegistroVentaProductoMensual
                                {
                                    IdMoneda = B.i_IdMoneda.Value,
                                    IdProducto = K == null ? A.i_Anticipio == 1 ? "ANTICIPIO" : "" : K.v_CodInterno,
                                    IdProductoAux = K == null ? A.i_Anticipio == 1 ? "ANTICIPIO" : "" : K.v_CodInterno,
                                    NombreProducto = K == null ? A.i_Anticipio == 1 ? "ANTICIPIO" : "PRODUCTO NO EXISTE" : K.v_Descripcion,
                                    CantidadDetalle = M.i_UsadoDocumentoInverso.Value == 1 || A.i_Anticipio.Value == 1 ? A.d_Cantidad.Value * -1 : A.d_Cantidad.Value,
                                    ValorVentaDetalle = A == null ? 0 : M.i_UsadoDocumentoInverso.Value == 1 || A.i_Anticipio.Value == 1 ? A.d_ValorVenta.Value * 1 : A.d_ValorVenta.Value,
                                    PrecioVentaDetalle = A == null ? 0 : M.i_UsadoDocumentoInverso.Value == 1 || A.i_Anticipio.Value == 1 ? A.d_PrecioVenta.Value * -1 : A.d_PrecioVenta.Value,
                                    IdTipoDocumento = B.i_IdTipoDocumento.Value,
                                    TipoCambio = B.d_TipoCambio.Value,
                                    Mes = B.v_Mes.Trim(),
                                    C_Enero = B.v_Mes.Trim() == "01" ? A == null ? 0 : M.i_UsadoDocumentoInverso == 1 || A.i_Anticipio.Value == 1 ? A.d_Cantidad.Value * -1 : A.d_Cantidad.Value : 0,
                                    C_Febrero = B.v_Mes.Trim() == "02" ? A == null ? 0 : M.i_UsadoDocumentoInverso == 1 || A.i_Anticipio.Value == 1 ? A.d_Cantidad.Value * -1 : A.d_Cantidad.Value : 0,

                                    C_Marzo = B.v_Mes.Trim() == "03" ? A == null ? 0 : M.i_UsadoDocumentoInverso == 1 || A.i_Anticipio.Value == 1 ? A.d_Cantidad.Value * -1 : A.d_Cantidad.Value : 0,
                                    C_Abril = B.v_Mes.Trim() == "04" ? A == null ? 0 : M.i_UsadoDocumentoInverso == 1 || A.i_Anticipio.Value == 1 ? A.d_Cantidad.Value * -1 : A.d_Cantidad.Value : 0,

                                    C_Mayo = B.v_Mes.Trim() == "05" ? A == null ? 0 : M.i_UsadoDocumentoInverso == 1 || A.i_Anticipio.Value == 1 ? A.d_Cantidad.Value * -1 : A.d_Cantidad.Value : 0,
                                    C_Junio = B.v_Mes.Trim() == "06" ? A == null ? 0 : M.i_UsadoDocumentoInverso == 1 || A.i_Anticipio.Value == 1 ? A.d_Cantidad.Value * -1 : A.d_Cantidad.Value : 0,
                                    C_Julio = B.v_Mes.Trim() == "07" ? A == null ? 0 : M.i_UsadoDocumentoInverso == 1 || A.i_Anticipio.Value == 1 ? A.d_Cantidad.Value * -1 : A.d_Cantidad.Value : 0,
                                    C_Agosto = B.v_Mes.Trim() == "08" ? A == null ? 0 : M.i_UsadoDocumentoInverso == 1 || A.i_Anticipio.Value == 1 ? A.d_Cantidad.Value * -1 : A.d_Cantidad.Value : 0,
                                    C_Setiembre = B.v_Mes.Trim() == "09" ? A == null ? 0 : M.i_UsadoDocumentoInverso == 1 || A.i_Anticipio.Value == 1 ? A.d_Cantidad.Value * -1 : A.d_Cantidad.Value : 0,
                                    C_Octubre = B.v_Mes.Trim() == "10" ? A == null ? 0 : M.i_UsadoDocumentoInverso == 1 || A.i_Anticipio.Value == 1 ? A.d_Cantidad.Value * -1 : A.d_Cantidad.Value : 0,
                                    C_Noviembre = B.v_Mes.Trim() == "11" ? A == null ? 0 : M.i_UsadoDocumentoInverso == 1 || A.i_Anticipio.Value == 1 ? A.d_Cantidad.Value * -1 : A.d_Cantidad.Value : 0,
                                    C_Diciembre = B.v_Mes.Trim() == "12" ? A == null ? 0 : M.i_UsadoDocumentoInverso == 1 || A.i_Anticipio.Value == 1 ? A.d_Cantidad.Value * -1 : A.d_Cantidad.Value : 0,
                                    GrupoLlave = Agrupar == "LINEA" ? N == null ? "** LINEA NO EXISTE **" : "LINEA :" + N.v_Nombre.Trim() : Agrupar == "VENDEDOR" ? O == null ? "VENDEDOR NO EXISTE" : "VENDEDOR : " + O.v_NombreCompleto : "",
                                    TotalGrupoLlave = Agrupar == "LINEA" ? N == null ? "TOTAL :LINEA NO EXISTE " : "TOTAL " + N.v_Nombre.Trim() + " :" : Agrupar == "VENDEDOR" ? O == null ? "TOTAL VENDEDOR NO EXSITE : " : "TOTAL VENDEDOR " + O.v_NombreCompleto : "TOTAL POR MES : ",
                                    v_IdVendedor = B.v_IdVendedor,

                                }).ToList();



                        if (IdVendedor == "-1")
                        {
                            queryGuias =
                                   (from A in dbContext.guiaremision
                                    join B in dbContext.cliente on new { c = A != null ? A.v_IdCliente : "", eliminado = 0 } equals new { c = B.v_IdCliente, eliminado = B.i_Eliminado.Value } into B_join
                                    from B in B_join.DefaultIfEmpty()
                                    join F in dbContext.datahierarchy on new { m = A != null ? A.i_IdMoneda.Value : 0, eliminado = 0, Grupo = 18 } equals new { m = F.i_ItemId, eliminado = F.i_IsDeleted.Value, Grupo = F.i_GroupId } into F_join
                                    from F in F_join.DefaultIfEmpty()
                                    join I in dbContext.guiaremisiondetalle on new { v = A != null ? A.v_IdGuiaRemision : "", eliminado = 0 } equals new { v = I.v_IdGuiaRemision, eliminado = I.i_Eliminado.Value } into I_join
                                    from I in I_join.DefaultIfEmpty()
                                    join J in dbContext.productodetalle on new { prod = I != null ? I.v_IdProductoDetalle : "", eliminado = 0 } equals new { prod = J.v_IdProductoDetalle, eliminado = J.i_Eliminado.Value } into J_join
                                    from J in J_join.DefaultIfEmpty()
                                    join K in dbContext.producto on new { p = J != null ? J.v_IdProducto : "", eliminado = 0 } equals new { p = K.v_IdProducto, eliminado = K.i_Eliminado.Value } into K_join
                                    from K in K_join.DefaultIfEmpty()
                                    join M in dbContext.documento on new { doc = A != null ? A.i_IdTipoDocumento.Value : 0, eliminado = 0 } equals new { doc = M.i_CodigoDocumento, eliminado = M.i_Eliminado.Value } into M_join
                                    from M in M_join.DefaultIfEmpty()
                                    join N in dbContext.linea on new { IdLinea = K != null ? K.v_IdLinea : "", eliminado = 0 } equals new { IdLinea = N.v_IdLinea, eliminado = N.i_Eliminado.Value } into N_join
                                    from N in N_join.DefaultIfEmpty()
                                    where (A.i_Eliminado == 0 && A.i_IdEstado == 1)
                                     && (A.t_FechaEmision >= pstrt_FechaRegistroIni
                                    && A.t_FechaEmision <= pstrt_FechaRegistroFin)
                                    && (B.v_CodCliente == pstrt_IdCliente || pstrt_IdCliente == "")
                                    && (K.v_CodInterno == pstr_CodInterno || pstr_CodInterno == "")

                                     && I_join.Any(x => x.v_IdProductoDetalle == J.v_IdProductoDetalle)
                                     && (K.v_IdLinea == IdLinea || IdLinea == "-1") && (K.v_IdMarca == IdMarca || IdMarca == "-1")
                                     && A.i_IdTipoGuia != (int)TiposDocumentos.GuiaRemision
                                     && A.i_IdEstablecimiento == Globals.ClientSession.i_IdEstablecimiento
                                    orderby I.v_IdProductoDetalle
                                    select new ReporteRegistroVentaProductoMensual
                                    {
                                        IdMoneda = A.i_IdMoneda.Value,
                                        IdProducto = K == null ? "" : K.v_CodInterno,
                                        IdProductoAux = K == null ? "" : K.v_CodInterno,
                                        NombreProducto = K == null ? "PRODUCTO NO EXISTE" : K.v_Descripcion,
                                        CantidadDetalle = (M.i_UsadoDocumentoInverso != null && M.i_UsadoDocumentoInverso.Value == 1) ? I.d_Cantidad.Value * -1 : I.d_Cantidad.Value,
                                        ValorVentaDetalle = I == null ? 0 : (M.i_UsadoDocumentoInverso != null && M.i_UsadoDocumentoInverso.Value == 1) ? I.d_ValorVenta.Value * 1 : I.d_ValorVenta.Value,
                                        PrecioVentaDetalle = I == null ? 0 : (M.i_UsadoDocumentoInverso != null && M.i_UsadoDocumentoInverso.Value == 1) ? I.d_Total == null ? 0 : I.d_Total.Value * -1 : I.d_Total.Value,
                                        IdTipoDocumento = A.i_IdTipoDocumento.Value,
                                        TipoCambio = A.d_TipoCambio.Value,
                                        Mes = A.v_Mes.Trim(),

                                        C_Enero = A.v_Mes.Trim() == "01" ? A == null ? 0 : M.i_UsadoDocumentoInverso == 1 ? I.d_Cantidad.Value * -1 : I.d_Cantidad.Value : 0,
                                        C_Febrero = A.v_Mes.Trim() == "02" ? A == null ? 0 : M.i_UsadoDocumentoInverso == 1 ? I.d_Cantidad.Value * -1 : I.d_Cantidad.Value : 0,

                                        C_Marzo = A.v_Mes.Trim() == "03" ? A == null ? 0 : M.i_UsadoDocumentoInverso == 1 ? I.d_Cantidad.Value * -1 : I.d_Cantidad.Value : 0,
                                        C_Abril = A.v_Mes.Trim() == "04" ? A == null ? 0 : M.i_UsadoDocumentoInverso == 1 ? I.d_Cantidad.Value * -1 : I.d_Cantidad.Value : 0,

                                        C_Mayo = A.v_Mes.Trim() == "05" ? A == null ? 0 : M.i_UsadoDocumentoInverso == 1 ? I.d_Cantidad.Value * -1 : I.d_Cantidad.Value : 0,
                                        C_Junio = A.v_Mes.Trim() == "06" ? A == null ? 0 : M.i_UsadoDocumentoInverso == 1 ? I.d_Cantidad.Value * -1 : I.d_Cantidad.Value : 0,
                                        C_Julio = A.v_Mes.Trim() == "07" ? A == null ? 0 : M.i_UsadoDocumentoInverso == 1 ? I.d_Cantidad.Value * -1 : I.d_Cantidad.Value : 0,
                                        C_Agosto = A.v_Mes.Trim() == "08" ? A == null ? 0 : M.i_UsadoDocumentoInverso == 1 ? I.d_Cantidad.Value * -1 : I.d_Cantidad.Value : 0,
                                        C_Setiembre = A.v_Mes.Trim() == "09" ? A == null ? 0 : M.i_UsadoDocumentoInverso == 1 ? I.d_Cantidad.Value * -1 : I.d_Cantidad.Value : 0,
                                        C_Octubre = A.v_Mes.Trim() == "10" ? A == null ? 0 : M.i_UsadoDocumentoInverso == 1 ? I.d_Cantidad.Value * -1 : I.d_Cantidad.Value : 0,
                                        C_Noviembre = A.v_Mes.Trim() == "11" ? A == null ? 0 : M.i_UsadoDocumentoInverso == 1 ? I.d_Cantidad.Value * -1 : I.d_Cantidad.Value : 0,
                                        C_Diciembre = A.v_Mes.Trim() == "12" ? A == null ? 0 : M.i_UsadoDocumentoInverso == 1 ? I.d_Cantidad.Value * -1 : I.d_Cantidad.Value : 0,


                                        //GrupoLlave = Agrupar == "LINEA" ? N == null ? "** LINEA NO EXISTE **" : "LINEA :" + N.v_Nombre.Trim() : "",
                                        GrupoLlave = Agrupar == "LINEA" ? N == null ? "** LINEA NO EXISTE **" : "LINEA :" + N.v_Nombre.Trim() : Agrupar == "VENDEDOR" ? "VENDEDOR NO EXISTE" : "",
                                        //TotalGrupoLlave = Agrupar == "LINEA" ? N == null ? "TOTAL :LINEA NO EXISTE " : "TOTAL " + N.v_Nombre.Trim() + " :" : "TOTAL POR MES : ",
                                        TotalGrupoLlave = Agrupar == "LINEA" ? N == null ? "TOTAL :LINEA NO EXISTE " : "TOTAL " + N.v_Nombre.Trim() + " :" : Agrupar == "VENDEDOR" ? "TOTAL VENDEDOR NO EXSITE : " : "TOTAL POR MES : ",
                                        v_IdVendedor = "-1",
                                    }).ToList();
                        }
                        #endregion
                    }
                    else
                    {
                        #region Valores/Total
                        //T_Enero = B.v_Mes.Trim() == "01" ? A == null ? 0 : pIntMoneda == (int)Currency.Soles ? B.i_IdMoneda == (int)Currency.Soles ? M.i_UsadoDocumentoInverso == 1 || A.i_Anticipio.Value == 1 ? A.d_PrecioVenta.Value * -1 : A.d_PrecioVenta.Value : B.i_IdMoneda == (int)Currency.Dolares ? M.i_UsadoDocumentoInverso == 1 || A.i_Anticipio.Value == 1 ? (A.d_PrecioVenta.Value * B.d_TipoCambio.Value) * -1 : A.d_PrecioVenta.Value * B.d_TipoCambio.Value :
                        //                                                                 pIntMoneda == (int)Currency.Dolares ? B.i_IdMoneda == (int)Currency.Soles ? M.i_UsadoDocumentoInverso == 1 || A.i_Anticipio.Value == 1 ? (A.d_PrecioVenta.Value / B.d_TipoCambio.Value) * -1 : A.d_PrecioVenta.Value / B.d_TipoCambio.Value : B.i_IdMoneda == (int)Currency.Dolares ? M.i_UsadoDocumentoInverso == 1 || A.i_Anticipio.Value == 1 ? A.d_PrecioVenta.Value * -1 : A.d_PrecioVenta.Value : 0 : 0 : 0 : 0,


                        queryVentas =
                                   (from A in dbContext.ventadetalle
                                    join B in dbContext.venta on new { V = A.v_IdVenta, eliminado = 0 } equals new { V = B.v_IdVenta, eliminado = B.i_Eliminado.Value } into B_join
                                    from B in B_join.DefaultIfEmpty()
                                    join F in dbContext.datahierarchy on new { m = B != null ? B.i_IdMoneda.Value : 0, eliminado = 0, Grupo = 18 } equals new { m = F.i_ItemId, eliminado = F.i_IsDeleted.Value, Grupo = F.i_GroupId } into F_join
                                    from F in F_join.DefaultIfEmpty()
                                    join C in dbContext.cliente on new { v = B != null ? B.v_IdCliente : "", eliminado = 0 } equals new { v = C.v_IdCliente, eliminado = C.i_Eliminado.Value } into C_join
                                    from C in C_join.DefaultIfEmpty()
                                    join J in dbContext.productodetalle on new { prod = A != null ? A.v_IdProductoDetalle : "", eliminado = 0 } equals new { prod = J.v_IdProductoDetalle, eliminado = J.i_Eliminado.Value } into J_join
                                    from J in J_join.DefaultIfEmpty()
                                    join K in dbContext.producto on new { p = J != null ? J.v_IdProducto : "", eliminado = 0 } equals new { p = K.v_IdProducto, eliminado = K.i_Eliminado.Value } into K_join
                                    from K in K_join.DefaultIfEmpty()
                                    join M in dbContext.documento on new { doc = B != null ? B.i_IdTipoDocumento.Value : 0, eliminado = 0 } equals new { doc = M.i_CodigoDocumento, eliminado = M.i_Eliminado.Value } into M_join
                                    from M in M_join.DefaultIfEmpty()
                                    join N in dbContext.linea on new { IdLinea = K != null ? K.v_IdLinea : "", eliminado = 0 } equals new { IdLinea = N.v_IdLinea, eliminado = N.i_Eliminado.Value } into N_join
                                    from N in N_join.DefaultIfEmpty()
                                    join O in dbContext.vendedor on new { Vendedor = B != null ? B.v_IdVendedor : "", eliminado = 0 } equals new { Vendedor = O.v_IdVendedor, eliminado = O.i_Eliminado.Value } into O_join
                                    from O in O_join.DefaultIfEmpty()
                                    where (A.i_Eliminado == 0 && B.i_IdEstado == 1)
                                     && (B.t_FechaRegistro >= pstrt_FechaRegistroIni
                                    && B.t_FechaRegistro <= pstrt_FechaRegistroFin)
                                    && (C.v_CodCliente == pstrt_IdCliente || pstrt_IdCliente == "")
                                    && (K.v_CodInterno == pstr_CodInterno || pstr_CodInterno == "")
                                        //  && I_join.Any(x => x.v_IdProductoDetalle == J.v_IdProductoDetalle)
                                     && (K.v_IdLinea == IdLinea || IdLinea == "-1") && (K.v_IdMarca == IdMarca || IdMarca == "-1")
                                     && B.i_IdEstablecimiento == Globals.ClientSession.i_IdEstablecimiento.Value && J.v_IdProductoDetalle != "N002-PE000000000" &&
                                      A.v_IdProductoDetalle != null
                                      && (B.v_IdVendedor == IdVendedor || IdVendedor == "-1")
                                    orderby J.v_IdProductoDetalle
                                    select new ReporteRegistroVentaProductoMensual
                                    {
                                        IdMoneda = B.i_IdMoneda.Value,
                                        IdProducto = K == null ? A.i_Anticipio == 1 ? "ANTICIPIO" : "" : K.v_CodInterno,
                                        IdProductoAux = K == null ? A.i_Anticipio == 1 ? "ANTICIPIO" : "" : K.v_CodInterno,
                                        NombreProducto = K == null ? A.i_Anticipio == 1 ? "ANTICIPIO" : "PRODUCTO NO EXISTE" : K.v_Descripcion,
                                        CantidadDetalle = M.i_UsadoDocumentoInverso.Value == 1 || A.i_Anticipio.Value == 1 ? A.d_Cantidad.Value * -1 : A.d_Cantidad.Value,
                                        ValorVentaDetalle = A == null ? 0 : M.i_UsadoDocumentoInverso.Value == 1 || A.i_Anticipio.Value == 1 ? A.d_ValorVenta.Value * 1 : A.d_ValorVenta.Value,
                                        PrecioVentaDetalle = A == null ? 0 : M.i_UsadoDocumentoInverso.Value == 1 || A.i_Anticipio.Value == 1 ? A.d_PrecioVenta.Value * -1 : A.d_PrecioVenta.Value,
                                        IdTipoDocumento = B.i_IdTipoDocumento.Value,
                                        TipoCambio = B.d_TipoCambio.Value,
                                        Mes = B.v_Mes.Trim(),
                                        T_Enero = B.v_Mes.Trim() == "01" ? A == null || A.d_PrecioVenta == null ? 0 : pIntMoneda == B.i_IdMoneda ? M.i_UsadoDocumentoInverso == 1 || A.i_Anticipio.Value == 1 ? A.d_PrecioVenta.Value * -1 : A.d_PrecioVenta.Value
                                        : pIntMoneda == (int)Currency.Soles ? M.i_UsadoDocumentoInverso == 1 || A.i_Anticipio.Value == 1 ? A.d_PrecioVenta.Value * B.d_TipoCambio.Value * -1 : A.d_PrecioVenta.Value * B.d_TipoCambio.Value
                                         : pIntMoneda == (int)Currency.Dolares ? M.i_UsadoDocumentoInverso == 1 || A.i_Anticipio.Value == 1 ? (A.d_PrecioVenta.Value / B.d_TipoCambio.Value) * -1 : B.d_TipoCambio.Value == 0 || A.d_PrecioVenta.Value == 0 ? 0 : (A.d_PrecioVenta.Value / B.d_TipoCambio.Value) : 0 : 0,

                                        T_Febrero = B.v_Mes.Trim() == "02" ? A == null || A.d_PrecioVenta == null ? 0 : pIntMoneda == B.i_IdMoneda ? M.i_UsadoDocumentoInverso == 1 || A.i_Anticipio.Value == 1 ? A.d_PrecioVenta.Value * -1 : A.d_PrecioVenta.Value
                                       : pIntMoneda == (int)Currency.Soles ? M.i_UsadoDocumentoInverso == 1 || A.i_Anticipio.Value == 1 ? A.d_PrecioVenta.Value * B.d_TipoCambio.Value * -1 : A.d_PrecioVenta.Value * B.d_TipoCambio.Value
                                        : pIntMoneda == (int)Currency.Dolares ? M.i_UsadoDocumentoInverso == 1 || A.i_Anticipio.Value == 1 ? (A.d_PrecioVenta.Value / B.d_TipoCambio.Value) * -1 : B.d_TipoCambio.Value == 0 || A.d_PrecioVenta.Value == 0 ? 0 : (A.d_PrecioVenta.Value / B.d_TipoCambio.Value) : 0 : 0,

                                        T_Marzo = B.v_Mes.Trim() == "03" ? A == null || A.d_PrecioVenta == null ? 0 : pIntMoneda == B.i_IdMoneda ? M.i_UsadoDocumentoInverso == 1 || A.i_Anticipio.Value == 1 ? A.d_PrecioVenta.Value * -1 : A.d_PrecioVenta.Value
                                       : pIntMoneda == (int)Currency.Soles ? M.i_UsadoDocumentoInverso == 1 || A.i_Anticipio.Value == 1 ? A.d_PrecioVenta.Value * B.d_TipoCambio.Value * -1 : A.d_PrecioVenta.Value * B.d_TipoCambio.Value
                                        : pIntMoneda == (int)Currency.Dolares ? M.i_UsadoDocumentoInverso == 1 || A.i_Anticipio.Value == 1 ? (A.d_PrecioVenta.Value / B.d_TipoCambio.Value) * -1 : B.d_TipoCambio.Value == 0 || A.d_PrecioVenta.Value == 0 ? 0 : (A.d_PrecioVenta.Value / B.d_TipoCambio.Value) : 0 : 0,

                                        T_Abril = B.v_Mes.Trim() == "04" ? A == null || A.d_PrecioVenta == null ? 0 : pIntMoneda == B.i_IdMoneda ? M.i_UsadoDocumentoInverso == 1 || A.i_Anticipio.Value == 1 ? A.d_PrecioVenta.Value * -1 : A.d_PrecioVenta.Value
                                        : pIntMoneda == (int)Currency.Soles ? M.i_UsadoDocumentoInverso == 1 || A.i_Anticipio.Value == 1 ? A.d_PrecioVenta.Value * B.d_TipoCambio.Value * -1 : A.d_PrecioVenta.Value * B.d_TipoCambio.Value
                                         : pIntMoneda == (int)Currency.Dolares ? M.i_UsadoDocumentoInverso == 1 || A.i_Anticipio.Value == 1 ? (A.d_PrecioVenta.Value / B.d_TipoCambio.Value) * -1 : B.d_TipoCambio.Value == 0 || A.d_PrecioVenta.Value == 0 ? 0 : (A.d_PrecioVenta.Value / B.d_TipoCambio.Value) : 0 : 0,

                                        T_Mayo = B.v_Mes.Trim() == "05" ? A == null || A.d_PrecioVenta == null ? 0 : pIntMoneda == B.i_IdMoneda ? M.i_UsadoDocumentoInverso == 1 || A.i_Anticipio.Value == 1 ? A.d_PrecioVenta.Value * -1 : A.d_PrecioVenta.Value
                                        : pIntMoneda == (int)Currency.Soles ? M.i_UsadoDocumentoInverso == 1 || A.i_Anticipio.Value == 1 ? A.d_PrecioVenta.Value * B.d_TipoCambio.Value * -1 : A.d_PrecioVenta.Value * B.d_TipoCambio.Value
                                         : pIntMoneda == (int)Currency.Dolares ? M.i_UsadoDocumentoInverso == 1 || A.i_Anticipio.Value == 1 ? (A.d_PrecioVenta.Value / B.d_TipoCambio.Value) * -1 : B.d_TipoCambio.Value == 0 || A.d_PrecioVenta.Value == 0 ? 0 : (A.d_PrecioVenta.Value / B.d_TipoCambio.Value) : 0 : 0,

                                        T_Junio = B.v_Mes.Trim() == "06" ? A == null || A.d_PrecioVenta == null ? 0 : pIntMoneda == B.i_IdMoneda ? M.i_UsadoDocumentoInverso == 1 || A.i_Anticipio.Value == 1 ? A.d_PrecioVenta.Value * -1 : A.d_PrecioVenta.Value
                                        : pIntMoneda == (int)Currency.Soles ? M.i_UsadoDocumentoInverso == 1 || A.i_Anticipio.Value == 1 ? A.d_PrecioVenta.Value * B.d_TipoCambio.Value * -1 : A.d_PrecioVenta.Value * B.d_TipoCambio.Value
                                         : pIntMoneda == (int)Currency.Dolares ? M.i_UsadoDocumentoInverso == 1 || A.i_Anticipio.Value == 1 ? (A.d_PrecioVenta.Value / B.d_TipoCambio.Value) * -1 : B.d_TipoCambio.Value == 0 || A.d_PrecioVenta.Value == 0 ? 0 : (A.d_PrecioVenta.Value / B.d_TipoCambio.Value) : 0 : 0,


                                        T_Julio = B.v_Mes.Trim() == "07" ? A == null || A.d_PrecioVenta == null ? 0 : pIntMoneda == B.i_IdMoneda ? M.i_UsadoDocumentoInverso == 1 || A.i_Anticipio.Value == 1 ? A.d_PrecioVenta.Value * -1 : A.d_PrecioVenta.Value
                                        : pIntMoneda == (int)Currency.Soles ? M.i_UsadoDocumentoInverso == 1 || A.i_Anticipio.Value == 1 ? A.d_PrecioVenta.Value * B.d_TipoCambio.Value * -1 : A.d_PrecioVenta.Value * B.d_TipoCambio.Value
                                         : pIntMoneda == (int)Currency.Dolares ? M.i_UsadoDocumentoInverso == 1 || A.i_Anticipio.Value == 1 ? (A.d_PrecioVenta.Value / B.d_TipoCambio.Value) * -1 : B.d_TipoCambio.Value == 0 || A.d_PrecioVenta.Value == 0 ? 0 : (A.d_PrecioVenta.Value / B.d_TipoCambio.Value) : 0 : 0,

                                        T_Agosto = B.v_Mes.Trim() == "08" ? A == null || A.d_PrecioVenta == null ? 0 : pIntMoneda == B.i_IdMoneda ? M.i_UsadoDocumentoInverso == 1 || A.i_Anticipio.Value == 1 ? A.d_PrecioVenta.Value * -1 : A.d_PrecioVenta.Value
                                        : pIntMoneda == (int)Currency.Soles ? M.i_UsadoDocumentoInverso == 1 || A.i_Anticipio.Value == 1 ? A.d_PrecioVenta.Value * B.d_TipoCambio.Value * -1 : A.d_PrecioVenta.Value * B.d_TipoCambio.Value
                                         : pIntMoneda == (int)Currency.Dolares ? M.i_UsadoDocumentoInverso == 1 || A.i_Anticipio.Value == 1 ? (A.d_PrecioVenta.Value / B.d_TipoCambio.Value) * -1 : B.d_TipoCambio.Value == 0 || A.d_PrecioVenta.Value == 0 ? 0 : (A.d_PrecioVenta.Value / B.d_TipoCambio.Value) : 0 : 0,

                                        T_Setiembre = B.v_Mes.Trim() == "09" ? A == null || A.d_PrecioVenta == null ? 0 : pIntMoneda == B.i_IdMoneda ? M.i_UsadoDocumentoInverso == 1 || A.i_Anticipio.Value == 1 ? A.d_PrecioVenta.Value * -1 : A.d_PrecioVenta.Value
                                        : pIntMoneda == (int)Currency.Soles ? M.i_UsadoDocumentoInverso == 1 || A.i_Anticipio.Value == 1 ? A.d_PrecioVenta.Value * B.d_TipoCambio.Value * -1 : A.d_PrecioVenta.Value * B.d_TipoCambio.Value
                                         : pIntMoneda == (int)Currency.Dolares ? M.i_UsadoDocumentoInverso == 1 || A.i_Anticipio.Value == 1 ? (A.d_PrecioVenta.Value / B.d_TipoCambio.Value) * -1 : B.d_TipoCambio.Value == 0 || A.d_PrecioVenta.Value == 0 ? 0 : (A.d_PrecioVenta.Value / B.d_TipoCambio.Value) : 0 : 0,


                                        T_Octubre = B.v_Mes.Trim() == "10" ? A == null || A.d_PrecioVenta == null ? 0 : pIntMoneda == B.i_IdMoneda ? M.i_UsadoDocumentoInverso == 1 || A.i_Anticipio.Value == 1 ? A.d_PrecioVenta.Value * -1 : A.d_PrecioVenta.Value
                                        : pIntMoneda == (int)Currency.Soles ? M.i_UsadoDocumentoInverso == 1 || A.i_Anticipio.Value == 1 ? A.d_PrecioVenta.Value * B.d_TipoCambio.Value * -1 : A.d_PrecioVenta.Value * B.d_TipoCambio.Value
                                         : pIntMoneda == (int)Currency.Dolares ? M.i_UsadoDocumentoInverso == 1 || A.i_Anticipio.Value == 1 ? (A.d_PrecioVenta.Value / B.d_TipoCambio.Value) * -1 : B.d_TipoCambio.Value == 0 || A.d_PrecioVenta.Value == 0 ? 0 : (A.d_PrecioVenta.Value / B.d_TipoCambio.Value) : 0 : 0,


                                        T_Noviembre = B.v_Mes.Trim() == "11" ? A == null || A.d_PrecioVenta == null ? 0 : pIntMoneda == B.i_IdMoneda ? M.i_UsadoDocumentoInverso == 1 || A.i_Anticipio.Value == 1 ? A.d_PrecioVenta.Value * -1 : A.d_PrecioVenta.Value
                                        : pIntMoneda == (int)Currency.Soles ? M.i_UsadoDocumentoInverso == 1 || A.i_Anticipio.Value == 1 ? A.d_PrecioVenta.Value * B.d_TipoCambio.Value * -1 : A.d_PrecioVenta.Value * B.d_TipoCambio.Value
                                         : pIntMoneda == (int)Currency.Dolares ? M.i_UsadoDocumentoInverso == 1 || A.i_Anticipio.Value == 1 ? (A.d_PrecioVenta.Value / B.d_TipoCambio.Value) * -1 : B.d_TipoCambio.Value == 0 || A.d_PrecioVenta.Value == 0 ? 0 : (A.d_PrecioVenta.Value / B.d_TipoCambio.Value) : 0 : 0,


                                        T_Diciembre = B.v_Mes.Trim() == "12" ? A == null || A.d_PrecioVenta == null ? 0 : pIntMoneda == B.i_IdMoneda ? M.i_UsadoDocumentoInverso == 1 || A.i_Anticipio.Value == 1 ? A.d_PrecioVenta.Value * -1 : A.d_PrecioVenta.Value
                                        : pIntMoneda == (int)Currency.Soles ? M.i_UsadoDocumentoInverso == 1 || A.i_Anticipio.Value == 1 ? A.d_PrecioVenta.Value * B.d_TipoCambio.Value * -1 : A.d_PrecioVenta.Value * B.d_TipoCambio.Value
                                         : pIntMoneda == (int)Currency.Dolares ? M.i_UsadoDocumentoInverso == 1 || A.i_Anticipio.Value == 1 ? (A.d_PrecioVenta.Value / B.d_TipoCambio.Value) * -1 : B.d_TipoCambio.Value == 0 || A.d_PrecioVenta.Value == 0 ? 0 : (A.d_PrecioVenta.Value / B.d_TipoCambio.Value) : 0 : 0,

                                        GrupoLlave = Agrupar == "LINEA" ? N == null ? "** LINEA NO EXISTE **" : "LINEA :" + N.v_Nombre.Trim() : Agrupar == "VENDEDOR" ? O == null ? "VENDEDOR NO EXISTE" : "VENDEDOR : " + O.v_NombreCompleto : "",
                                        TotalGrupoLlave = Agrupar == "LINEA" ? N == null ? "TOTAL :LINEA NO EXISTE " : "TOTAL " + N.v_Nombre.Trim() + " :" : Agrupar == "VENDEDOR" ? O == null ? "TOTAL VENDEDOR NO EXSITE : " : "TOTAL VENDEDOR " + O.v_NombreCompleto : "TOTAL POR MES : ",
                                        v_IdVendedor = B.v_IdVendedor,
                                    }).ToList();



                        if (IdVendedor == "-1")
                        {
                            queryGuias =
                                   (from A in dbContext.guiaremision
                                    join B in dbContext.cliente on new { c = A.v_IdCliente, eliminado = 0 } equals new { c = B.v_IdCliente, eliminado = B.i_Eliminado.Value } into B_join
                                    from B in B_join.DefaultIfEmpty()
                                    join F in dbContext.datahierarchy on new { m = A != null ? A.i_IdMoneda.Value : 0, eliminado = 0, Grupo = 18 } equals new { m = F.i_ItemId, eliminado = F.i_IsDeleted.Value, Grupo = F.i_GroupId } into F_join
                                    from F in F_join.DefaultIfEmpty()
                                    join I in dbContext.guiaremisiondetalle on new { v = A != null ? A.v_IdGuiaRemision : "", eliminado = 0 } equals new { v = I.v_IdGuiaRemision, eliminado = I.i_Eliminado.Value } into I_join
                                    from I in I_join.DefaultIfEmpty()
                                    join J in dbContext.productodetalle on new { prod = I != null ? I.v_IdProductoDetalle : "", eliminado = 0 } equals new { prod = J.v_IdProductoDetalle, eliminado = J.i_Eliminado.Value } into J_join
                                    from J in J_join.DefaultIfEmpty()
                                    join K in dbContext.producto on new { p = J != null ? J.v_IdProducto : "", eliminado = 0 } equals new { p = K.v_IdProducto, eliminado = K.i_Eliminado.Value } into K_join
                                    from K in K_join.DefaultIfEmpty()
                                    join M in dbContext.documento on new { doc = A != null ? A.i_IdTipoDocumento.Value : 0, eliminado = 0 } equals new { doc = M.i_CodigoDocumento, eliminado = M.i_Eliminado.Value } into M_join
                                    from M in M_join.DefaultIfEmpty()
                                    join N in dbContext.linea on new { IdLinea = K != null ? K.v_IdLinea : "", eliminado = 0 } equals new { IdLinea = N.v_IdLinea, eliminado = N.i_Eliminado.Value } into N_join
                                    from N in N_join.DefaultIfEmpty()
                                    where (A.i_Eliminado == 0 && A.i_IdEstado == 1)
                                     && (A.t_FechaEmision >= pstrt_FechaRegistroIni
                                    && A.t_FechaEmision <= pstrt_FechaRegistroFin)
                                    && (B.v_CodCliente == pstrt_IdCliente || pstrt_IdCliente == "")
                                    && (K.v_CodInterno == pstr_CodInterno || pstr_CodInterno == "")

                                     && I_join.Any(x => x.v_IdProductoDetalle == J.v_IdProductoDetalle)
                                     && (K.v_IdLinea == IdLinea || IdLinea == "-1") && (K.v_IdMarca == IdMarca || IdMarca == "-1")
                                     && A.i_IdTipoGuia != (int)TiposDocumentos.GuiaRemision
                                     && A.i_IdEstablecimiento == Globals.ClientSession.i_IdEstablecimiento
                                    orderby I.v_IdProductoDetalle
                                    select new ReporteRegistroVentaProductoMensual
                                    {
                                        IdMoneda = A.i_IdMoneda.Value,
                                        IdProducto = K == null ? "" : K.v_CodInterno,
                                        IdProductoAux = K == null ? "" : K.v_CodInterno,
                                        NombreProducto = K == null ? "PRODUCTO NO EXISTE" : K.v_Descripcion,
                                        CantidadDetalle = (M.i_UsadoDocumentoInverso != null && M.i_UsadoDocumentoInverso.Value == 1) ? I.d_Cantidad.Value * -1 : I.d_Cantidad.Value,
                                        ValorVentaDetalle = I == null ? 0 : (M.i_UsadoDocumentoInverso != null && M.i_UsadoDocumentoInverso.Value == 1) ? I.d_ValorVenta.Value * 1 : I.d_ValorVenta.Value,
                                        PrecioVentaDetalle = I == null ? 0 : (M.i_UsadoDocumentoInverso != null && M.i_UsadoDocumentoInverso.Value == 1) ? I.d_Total == null ? 0 : I.d_Total.Value * -1 : I.d_Total.Value,
                                        IdTipoDocumento = A.i_IdTipoDocumento.Value,
                                        TipoCambio = A.d_TipoCambio.Value,
                                        Mes = A.v_Mes.Trim(),
                                        T_Enero = A.v_Mes.Trim() == "01" ? I == null ? 0 : pIntMoneda == (int)Currency.Soles ? A.i_IdMoneda == (int)Currency.Soles ? M.i_UsadoDocumentoInverso == 1 ? I.d_Total.Value * -1 : I.d_Total.Value : A.i_IdMoneda == (int)Currency.Dolares ? M.i_UsadoDocumentoInverso == 1 ? (I.d_Total.Value * A.d_TipoCambio.Value) * -1 : I.d_Total.Value * A.d_TipoCambio.Value :
                                                                                          pIntMoneda == (int)Currency.Dolares ? A.i_IdMoneda == (int)Currency.Soles ? M.i_UsadoDocumentoInverso == 1 ? (I.d_Total.Value / A.d_TipoCambio.Value) * -1 : I.d_Total.Value / A.d_TipoCambio.Value : A.i_IdMoneda == (int)Currency.Dolares ? M.i_UsadoDocumentoInverso == 1 ? I.d_Total.Value * -1 : I.d_Total.Value : 0 : 0 : 0 : 0,
                                        T_Febrero = A.v_Mes.Trim() == "02" ? I == null ? 0 : pIntMoneda == (int)Currency.Soles ? A.i_IdMoneda == (int)Currency.Soles ? M.i_UsadoDocumentoInverso == 1 ? I.d_Total.Value * -1 : I.d_Total.Value : A.i_IdMoneda == (int)Currency.Dolares ? M.i_UsadoDocumentoInverso == 1 ? (I.d_Total.Value * A.d_TipoCambio.Value) * -1 : I.d_Total.Value * A.d_TipoCambio.Value :
                                                                                          pIntMoneda == (int)Currency.Dolares ? A.i_IdMoneda == (int)Currency.Soles ? M.i_UsadoDocumentoInverso == 1 ? (I.d_Total.Value / A.d_TipoCambio.Value) * -1 : I.d_Total.Value / A.d_TipoCambio.Value : A.i_IdMoneda == (int)Currency.Dolares ? M.i_UsadoDocumentoInverso == 1 ? I.d_Total.Value * -1 : I.d_Total.Value : 0 : 0 : 0 : 0,
                                        T_Marzo = A.v_Mes.Trim() == "03" ? I == null ? 0 : pIntMoneda == (int)Currency.Soles ? A.i_IdMoneda == (int)Currency.Soles ? M.i_UsadoDocumentoInverso == 1 ? I.d_Total.Value * -1 : I.d_Total.Value : A.i_IdMoneda == (int)Currency.Dolares ? M.i_UsadoDocumentoInverso == 1 ? (I.d_Total.Value * A.d_TipoCambio.Value) * -1 : I.d_Total.Value * A.d_TipoCambio.Value :
                                                                                          pIntMoneda == (int)Currency.Dolares ? A.i_IdMoneda == (int)Currency.Soles ? M.i_UsadoDocumentoInverso == 1 ? (I.d_Total.Value / A.d_TipoCambio.Value) * -1 : I.d_Total.Value / A.d_TipoCambio.Value : A.i_IdMoneda == (int)Currency.Dolares ? M.i_UsadoDocumentoInverso == 1 ? I.d_Total.Value * -1 : I.d_Total.Value : 0 : 0 : 0 : 0,
                                        T_Abril = A.v_Mes.Trim() == "04" ? I == null ? 0 : pIntMoneda == (int)Currency.Soles ? A.i_IdMoneda == (int)Currency.Soles ? M.i_UsadoDocumentoInverso == 1 ? I.d_Total.Value * -1 : I.d_Total.Value : A.i_IdMoneda == (int)Currency.Dolares ? M.i_UsadoDocumentoInverso == 1 ? (I.d_Total.Value * A.d_TipoCambio.Value) * -1 : I.d_Total.Value * A.d_TipoCambio.Value :
                                                                                          pIntMoneda == (int)Currency.Dolares ? A.i_IdMoneda == (int)Currency.Soles ? M.i_UsadoDocumentoInverso == 1 ? (I.d_Total.Value / A.d_TipoCambio.Value) * -1 : I.d_Total.Value / A.d_TipoCambio.Value : A.i_IdMoneda == (int)Currency.Dolares ? M.i_UsadoDocumentoInverso == 1 ? I.d_Total.Value * -1 : I.d_Total.Value : 0 : 0 : 0 : 0,
                                        T_Mayo = A.v_Mes.Trim() == "05" ? I == null ? 0 : pIntMoneda == (int)Currency.Soles ? A.i_IdMoneda == (int)Currency.Soles ? M.i_UsadoDocumentoInverso == 1 ? I.d_Total.Value * -1 : I.d_Total.Value : A.i_IdMoneda == (int)Currency.Dolares ? M.i_UsadoDocumentoInverso == 1 ? (I.d_Total.Value * A.d_TipoCambio.Value) * -1 : I.d_Total.Value * A.d_TipoCambio.Value :
                                                                                          pIntMoneda == (int)Currency.Dolares ? A.i_IdMoneda == (int)Currency.Soles ? M.i_UsadoDocumentoInverso == 1 ? (I.d_Total.Value / A.d_TipoCambio.Value) * -1 : I.d_Total.Value / A.d_TipoCambio.Value : A.i_IdMoneda == (int)Currency.Dolares ? M.i_UsadoDocumentoInverso == 1 ? I.d_Total.Value * -1 : I.d_Total.Value : 0 : 0 : 0 : 0,
                                        T_Junio = A.v_Mes.Trim() == "06" ? I == null ? 0 : pIntMoneda == (int)Currency.Soles ? A.i_IdMoneda == (int)Currency.Soles ? M.i_UsadoDocumentoInverso == 1 ? I.d_Total.Value * -1 : I.d_Total.Value : A.i_IdMoneda == (int)Currency.Dolares ? M.i_UsadoDocumentoInverso == 1 ? (I.d_Total.Value * A.d_TipoCambio.Value) * -1 : I.d_Total.Value * A.d_TipoCambio.Value :
                                                                                          pIntMoneda == (int)Currency.Dolares ? A.i_IdMoneda == (int)Currency.Soles ? M.i_UsadoDocumentoInverso == 1 ? (I.d_Total.Value / A.d_TipoCambio.Value) * -1 : I.d_Total.Value / A.d_TipoCambio.Value : A.i_IdMoneda == (int)Currency.Dolares ? M.i_UsadoDocumentoInverso == 1 ? I.d_Total.Value * -1 : I.d_Total.Value : 0 : 0 : 0 : 0,
                                        T_Julio = A.v_Mes.Trim() == "07" ? I == null ? 0 : pIntMoneda == (int)Currency.Soles ? A.i_IdMoneda == (int)Currency.Soles ? M.i_UsadoDocumentoInverso == 1 ? I.d_Total.Value * -1 : I.d_Total.Value : A.i_IdMoneda == (int)Currency.Dolares ? M.i_UsadoDocumentoInverso == 1 ? (I.d_Total.Value * A.d_TipoCambio.Value) * -1 : I.d_Total.Value * A.d_TipoCambio.Value :
                                                                                          pIntMoneda == (int)Currency.Dolares ? A.i_IdMoneda == (int)Currency.Soles ? M.i_UsadoDocumentoInverso == 1 ? (I.d_Total.Value / A.d_TipoCambio.Value) * -1 : I.d_Total.Value / A.d_TipoCambio.Value : A.i_IdMoneda == (int)Currency.Dolares ? M.i_UsadoDocumentoInverso == 1 ? I.d_Total.Value * -1 : I.d_Total.Value : 0 : 0 : 0 : 0,
                                        T_Agosto = A.v_Mes.Trim() == "08" ? I == null ? 0 : pIntMoneda == (int)Currency.Soles ? A.i_IdMoneda == (int)Currency.Soles ? M.i_UsadoDocumentoInverso == 1 ? I.d_Total.Value * -1 : I.d_Total.Value : A.i_IdMoneda == (int)Currency.Dolares ? M.i_UsadoDocumentoInverso == 1 ? (I.d_Total.Value * A.d_TipoCambio.Value) * -1 : I.d_Total.Value * A.d_TipoCambio.Value :
                                                                                          pIntMoneda == (int)Currency.Dolares ? A.i_IdMoneda == (int)Currency.Soles ? M.i_UsadoDocumentoInverso == 1 ? (I.d_Total.Value / A.d_TipoCambio.Value) * -1 : I.d_Total.Value / A.d_TipoCambio.Value : A.i_IdMoneda == (int)Currency.Dolares ? M.i_UsadoDocumentoInverso == 1 ? I.d_Total.Value * -1 : I.d_Total.Value : 0 : 0 : 0 : 0,
                                        T_Setiembre = A.v_Mes.Trim() == "09" ? I == null ? 0 : pIntMoneda == (int)Currency.Soles ? A.i_IdMoneda == (int)Currency.Soles ? M.i_UsadoDocumentoInverso == 1 ? I.d_Total.Value * -1 : I.d_Total.Value : A.i_IdMoneda == (int)Currency.Dolares ? M.i_UsadoDocumentoInverso == 1 ? (I.d_Total.Value * A.d_TipoCambio.Value) * -1 : I.d_Total.Value * A.d_TipoCambio.Value :
                                                                                          pIntMoneda == (int)Currency.Dolares ? A.i_IdMoneda == (int)Currency.Soles ? M.i_UsadoDocumentoInverso == 1 ? (I.d_Total.Value / A.d_TipoCambio.Value) * -1 : I.d_Total.Value / A.d_TipoCambio.Value : A.i_IdMoneda == (int)Currency.Dolares ? M.i_UsadoDocumentoInverso == 1 ? I.d_Total.Value * -1 : I.d_Total.Value : 0 : 0 : 0 : 0,
                                        T_Octubre = A.v_Mes.Trim() == "10" ? I == null ? 0 : pIntMoneda == (int)Currency.Soles ? A.i_IdMoneda == (int)Currency.Soles ? M.i_UsadoDocumentoInverso == 1 ? I.d_Total.Value * -1 : I.d_Total.Value : A.i_IdMoneda == (int)Currency.Dolares ? M.i_UsadoDocumentoInverso == 1 ? (I.d_Total.Value * A.d_TipoCambio.Value) * -1 : I.d_Total.Value * A.d_TipoCambio.Value :
                                                                                          pIntMoneda == (int)Currency.Dolares ? A.i_IdMoneda == (int)Currency.Soles ? M.i_UsadoDocumentoInverso == 1 ? (I.d_Total.Value / A.d_TipoCambio.Value) * -1 : I.d_Total.Value / A.d_TipoCambio.Value : A.i_IdMoneda == (int)Currency.Dolares ? M.i_UsadoDocumentoInverso == 1 ? I.d_Total.Value * -1 : I.d_Total.Value : 0 : 0 : 0 : 0,
                                        T_Noviembre = A.v_Mes.Trim() == "11" ? I == null ? 0 : pIntMoneda == (int)Currency.Soles ? A.i_IdMoneda == (int)Currency.Soles ? M.i_UsadoDocumentoInverso == 1 ? I.d_Total.Value * -1 : I.d_Total.Value : A.i_IdMoneda == (int)Currency.Dolares ? M.i_UsadoDocumentoInverso == 1 ? (I.d_Total.Value * A.d_TipoCambio.Value) * -1 : I.d_Total.Value * A.d_TipoCambio.Value :
                                                                                          pIntMoneda == (int)Currency.Dolares ? A.i_IdMoneda == (int)Currency.Soles ? M.i_UsadoDocumentoInverso == 1 ? (I.d_Total.Value / A.d_TipoCambio.Value) * -1 : I.d_Total.Value / A.d_TipoCambio.Value : A.i_IdMoneda == (int)Currency.Dolares ? M.i_UsadoDocumentoInverso == 1 ? I.d_Total.Value * -1 : I.d_Total.Value : 0 : 0 : 0 : 0,

                                        T_Diciembre = A.v_Mes.Trim() == "12" ? I == null ? 0 : pIntMoneda == A.i_IdMoneda ? M.i_UsadoDocumentoInverso == 1 ? I.d_Total.Value * -1 : I.d_Total.Value : pIntMoneda == (int)Currency.Soles ? A.i_IdMoneda == (int)Currency.Dolares ? M.i_UsadoDocumentoInverso == 1 ? -1 * (I.d_Total.Value * A.d_TipoCambio.Value) : (I.d_Total.Value * A.d_TipoCambio.Value) :
                                                                                                pIntMoneda == (int)Currency.Dolares ? A.i_IdMoneda == (int)Currency.Soles ? M.i_UsadoDocumentoInverso == 1 ? -1 * (I.d_Total.Value / A.d_TipoCambio.Value) : (I.d_Total.Value / A.d_TipoCambio.Value) : 0 : 0 : 0 : 0,
                                        GrupoLlave = Agrupar == "LINEA" ? N == null ? "** LINEA NO EXISTE **" : "LINEA :" + N.v_Nombre.Trim() : Agrupar == "VENDEDOR" ? "VENDEDOR NO EXISTE" : "",
                                        //TotalGrupoLlave = Agrupar == "LINEA" ? N == null ? "TOTAL :LINEA NO EXISTE " : "TOTAL " + N.v_Nombre.Trim() + " :" : "TOTAL POR MES : ",
                                        TotalGrupoLlave = Agrupar == "LINEA" ? N == null ? "TOTAL :LINEA NO EXISTE " : "TOTAL " + N.v_Nombre.Trim() + " :" : Agrupar == "VENDEDOR" ? "TOTAL VENDEDOR NO EXSITE : " : "TOTAL POR MES : ",
                                        v_IdVendedor = "-1",
                                    }).ToList();
                        }
                        #endregion


                    }



                    var queryVG = queryVentas.Concat(queryGuias).ToList().AsQueryable();

                    List<ReporteRegistroVentaProductoMensual> ListaFiltrada = new List<ReporteRegistroVentaProductoMensual>();
                    if (ConsideraDocInternos == 0)
                    {
                        ListaFiltrada = queryVG.Where(x => _objDocumentoBL.DocumentoEsContable(x.IdTipoDocumento)).ToList();
                    }
                    else
                    {
                        ListaFiltrada = queryVG.ToList();
                    }

                    var ListaAux = ListaFiltrada;

                    if (Agrupar == "VENDEDOR")
                    {
                        ListaFiltrada = ListaFiltrada.GroupBy(x => new { x.IdProductoAux, x.v_IdVendedor })
                                                  .Select(group => group.First())
                                                  .OrderBy(o => pstrt_Orden == "ValorVentaDetalle" ? o.IdProductoAux : o.IdProductoAux).ToList();
                    }
                    else
                    {

                        ListaFiltrada = ListaFiltrada.GroupBy(x => new { x.IdProductoAux })
                                                   .Select(group => group.First())
                                                   .OrderBy(o => pstrt_Orden == "ValorVentaDetalle" ? o.IdProductoAux : o.IdProductoAux).ToList();
                    }

                    ReporteRegistroVentaProductoMensual objReporte = new ReporteRegistroVentaProductoMensual();
                    List<ReporteRegistroVentaProductoMensual> ListaFinal = new List<ReporteRegistroVentaProductoMensual>();
                    foreach (var item in ListaFiltrada)
                    {
                        objReporte = new ReporteRegistroVentaProductoMensual();
                        objReporte = item;
                        if (TipoConsiderar == (int)TipoReporteVentasMensual.Unidades)
                        {

                            if (item.IdProductoAux == "J20JCV25")
                            {
                                string H = "";
                                var jj = ListaAux.Where(x => x.IdProductoAux == item.IdProductoAux && x.v_IdVendedor == item.v_IdVendedor && x.C_Febrero != 0).ToList();
                            }
                            objReporte.C_Enero = Agrupar == "VENDEDOR" ? ListaAux.Where(x => x.IdProductoAux == item.IdProductoAux && x.v_IdVendedor == item.v_IdVendedor).ToList().Sum(x => x.C_Enero) : ListaAux.Where(x => x.IdProductoAux == item.IdProductoAux).ToList().Sum(x => x.C_Enero);
                            objReporte.C_Febrero = Agrupar == "VENDEDOR" ? ListaAux.Where(x => x.IdProductoAux == item.IdProductoAux && x.v_IdVendedor == item.v_IdVendedor).ToList().Sum(x => x.C_Febrero) : ListaAux.Where(x => x.IdProductoAux == item.IdProductoAux).ToList().Sum(x => x.C_Febrero);
                            objReporte.C_Marzo = Agrupar == "VENDEDOR" ? ListaAux.Where(x => x.IdProductoAux == item.IdProductoAux && x.v_IdVendedor == item.v_IdVendedor).ToList().Sum(x => x.C_Marzo) : ListaAux.Where(x => x.IdProductoAux == item.IdProductoAux).ToList().Sum(x => x.C_Marzo);
                            objReporte.C_Abril = Agrupar == "VENDEDOR" ? ListaAux.Where(x => x.IdProductoAux == item.IdProductoAux && x.v_IdVendedor == item.v_IdVendedor).ToList().Sum(x => x.C_Abril) : ListaAux.Where(x => x.IdProductoAux == item.IdProductoAux).ToList().Sum(x => x.C_Abril);
                            objReporte.C_Mayo = Agrupar == "VENDEDOR" ? ListaAux.Where(x => x.IdProductoAux == item.IdProductoAux && x.v_IdVendedor == item.v_IdVendedor).ToList().Sum(x => x.C_Mayo) : ListaAux.Where(x => x.IdProductoAux == item.IdProductoAux).ToList().Sum(x => x.C_Mayo);
                            objReporte.C_Junio = Agrupar == "VENDEDOR" ? ListaAux.Where(x => x.IdProductoAux == item.IdProductoAux && x.v_IdVendedor == item.v_IdVendedor).ToList().Sum(x => x.C_Junio) : ListaAux.Where(x => x.IdProductoAux == item.IdProductoAux).ToList().Sum(x => x.C_Junio);
                            objReporte.C_Julio = Agrupar == "VENDEDOR" ? ListaAux.Where(x => x.IdProductoAux == item.IdProductoAux && x.v_IdVendedor == item.v_IdVendedor).ToList().Sum(x => x.C_Julio) : ListaAux.Where(x => x.IdProductoAux == item.IdProductoAux).ToList().Sum(x => x.C_Julio);
                            objReporte.C_Agosto = Agrupar == "VENDEDOR" ? ListaAux.Where(x => x.IdProductoAux == item.IdProductoAux && x.v_IdVendedor == item.v_IdVendedor).ToList().Sum(x => x.C_Agosto) : ListaAux.Where(x => x.IdProductoAux == item.IdProductoAux).ToList().Sum(x => x.C_Agosto);
                            objReporte.C_Setiembre = Agrupar == "VENDEDOR" ? ListaAux.Where(x => x.IdProductoAux == item.IdProductoAux && x.v_IdVendedor == item.v_IdVendedor).ToList().Sum(x => x.C_Setiembre) : ListaAux.Where(x => x.IdProductoAux == item.IdProductoAux).ToList().Sum(x => x.C_Setiembre);
                            objReporte.C_Octubre = Agrupar == "VENDEDOR" ? ListaAux.Where(x => x.IdProductoAux == item.IdProductoAux && x.v_IdVendedor == item.v_IdVendedor).ToList().Sum(x => x.C_Octubre) : ListaAux.Where(x => x.IdProductoAux == item.IdProductoAux).ToList().Sum(x => x.C_Octubre);
                            objReporte.C_Noviembre = Agrupar == "VENDEDOR" ? ListaAux.Where(x => x.IdProductoAux == item.IdProductoAux && x.v_IdVendedor == item.v_IdVendedor).ToList().Sum(x => x.C_Noviembre) : ListaAux.Where(x => x.IdProductoAux == item.IdProductoAux).ToList().Sum(x => x.C_Noviembre);
                            objReporte.C_Diciembre = Agrupar == "VENDEDOR" ? ListaAux.Where(x => x.IdProductoAux == item.IdProductoAux && x.v_IdVendedor == item.v_IdVendedor).ToList().Sum(x => x.C_Diciembre) : ListaAux.Where(x => x.IdProductoAux == item.IdProductoAux).ToList().Sum(x => x.C_Diciembre);
                            objReporte.T_Cantidad = objReporte.C_Enero + objReporte.C_Febrero + objReporte.C_Marzo + objReporte.C_Abril + objReporte.C_Mayo + objReporte.C_Junio + objReporte.C_Julio + objReporte.C_Agosto + objReporte.C_Setiembre + objReporte.C_Octubre + objReporte.C_Noviembre + objReporte.C_Diciembre;
                        }
                        else
                        {
                            objReporte.T_Enero = Agrupar == "VENDEDOR" ? ListaAux.Where(x => x.IdProductoAux == item.IdProductoAux && x.v_IdVendedor == item.v_IdVendedor).ToList().Sum(x => x.T_Enero) : ListaAux.Where(x => x.IdProductoAux == item.IdProductoAux).ToList().Sum(x => x.T_Enero);
                            objReporte.T_Febrero = Agrupar == "VENDEDOR" ? ListaAux.Where(x => x.IdProductoAux == item.IdProductoAux && x.v_IdVendedor == item.v_IdVendedor).ToList().Sum(x => x.T_Febrero) : ListaAux.Where(x => x.IdProductoAux == item.IdProductoAux).ToList().Sum(x => x.T_Febrero);
                            objReporte.T_Marzo = Agrupar == "VENDEDOR" ? ListaAux.Where(x => x.IdProductoAux == item.IdProductoAux && x.v_IdVendedor == item.v_IdVendedor).ToList().Sum(x => x.T_Marzo) : ListaAux.Where(x => x.IdProductoAux == item.IdProductoAux).ToList().Sum(x => x.T_Marzo);
                            objReporte.T_Abril = Agrupar == "VENDEDOR" ? ListaAux.Where(x => x.IdProductoAux == item.IdProductoAux && x.v_IdVendedor == item.v_IdVendedor).ToList().Sum(x => x.T_Abril) : ListaAux.Where(x => x.IdProductoAux == item.IdProductoAux).ToList().Sum(x => x.T_Abril);
                            objReporte.T_Mayo = Agrupar == "VENDEDOR" ? ListaAux.Where(x => x.IdProductoAux == item.IdProductoAux && x.v_IdVendedor == item.v_IdVendedor).ToList().Sum(x => x.T_Mayo) : ListaAux.Where(x => x.IdProductoAux == item.IdProductoAux).ToList().Sum(x => x.T_Mayo);
                            objReporte.T_Junio = Agrupar == "VENDEDOR" ? ListaAux.Where(x => x.IdProductoAux == item.IdProductoAux && x.v_IdVendedor == item.v_IdVendedor).ToList().Sum(x => x.T_Junio) : ListaAux.Where(x => x.IdProductoAux == item.IdProductoAux).ToList().Sum(x => x.T_Junio);
                            objReporte.T_Julio = Agrupar == "VENDEDOR" ? ListaAux.Where(x => x.IdProductoAux == item.IdProductoAux && x.v_IdVendedor == item.v_IdVendedor).ToList().Sum(x => x.T_Julio) : ListaAux.Where(x => x.IdProductoAux == item.IdProductoAux).ToList().Sum(x => x.T_Julio);
                            objReporte.T_Agosto = Agrupar == "VENDEDOR" ? ListaAux.Where(x => x.IdProductoAux == item.IdProductoAux && x.v_IdVendedor == item.v_IdVendedor).ToList().Sum(x => x.T_Agosto) : ListaAux.Where(x => x.IdProductoAux == item.IdProductoAux).ToList().Sum(x => x.T_Agosto);
                            objReporte.T_Setiembre = Agrupar == "VENDEDOR" ? ListaAux.Where(x => x.IdProductoAux == item.IdProductoAux && x.v_IdVendedor == item.v_IdVendedor).ToList().Sum(x => x.T_Setiembre) : ListaAux.Where(x => x.IdProductoAux == item.IdProductoAux).ToList().Sum(x => x.T_Setiembre);
                            objReporte.T_Octubre = Agrupar == "VENDEDOR" ? ListaAux.Where(x => x.IdProductoAux == item.IdProductoAux && x.v_IdVendedor == item.v_IdVendedor).ToList().Sum(x => x.T_Octubre) : ListaAux.Where(x => x.IdProductoAux == item.IdProductoAux).ToList().Sum(x => x.T_Octubre);
                            objReporte.T_Noviembre = Agrupar == "VENDEDOR" ? ListaAux.Where(x => x.IdProductoAux == item.IdProductoAux && x.v_IdVendedor == item.v_IdVendedor).ToList().Sum(x => x.T_Noviembre) : ListaAux.Where(x => x.IdProductoAux == item.IdProductoAux).ToList().Sum(x => x.T_Noviembre);
                            objReporte.T_Diciembre = Agrupar == "VENDEDOR" ? ListaAux.Where(x => x.IdProductoAux == item.IdProductoAux && x.v_IdVendedor == item.v_IdVendedor).ToList().Sum(x => x.T_Diciembre) : ListaAux.Where(x => x.IdProductoAux == item.IdProductoAux).ToList().Sum(x => x.T_Diciembre);
                            objReporte.T_Total = objReporte.T_Enero + objReporte.T_Febrero + objReporte.T_Marzo + objReporte.T_Abril + objReporte.T_Mayo + objReporte.T_Junio + objReporte.T_Julio + objReporte.T_Agosto + objReporte.T_Setiembre + objReporte.T_Octubre + objReporte.T_Noviembre + objReporte.T_Diciembre;
                        }

                        ListaFinal.Add(objReporte);

                    }

                    objOperationResult.Success = 1;
                    return ListaFinal;
                }
            }
            catch (Exception ex)
            {
                objOperationResult.Success = 0;
                return null;
            }
        }
        */
        public List<ReporteRegistroVentaProductoMensual> ReporteRegistroVentaProductoMensualUltimo(ref OperationResult objOperationResult, int pstri_IdEstablecimiento, DateTime? pstrt_FechaRegistroIni, DateTime? pstrt_FechaRegistroFin, int pIntMoneda, string CodCliente, string CodProducto, string pstrt_Orden, int ConsideraDocContables, string Agrupar, string IdLinea, string IdMarca, int TipoConsiderar, string IdVendedor, bool Export)
        {
            try
            {
                objOperationResult.Success = 1;
                List<ReporteRegistroVentaProductoMensual> ListaFinal = new List<ReporteRegistroVentaProductoMensual>();
                using (SAMBHSEntitiesModelWin dbContext = new SAMBHSEntitiesModelWin())
                {
                    var lineas = dbContext.linea.ToList();
                    var Marcas = dbContext.marca.ToList();

                    if (TipoConsiderar == (int)TipoReporteVentasMensual.Unidades)
                    {
                        #region Unidades
                        var Ventas = (from a in dbContext.ventadetalle

                                      join b in dbContext.venta on new { v = a.v_IdVenta, eliminado = 0 } equals new { v = b.v_IdVenta, eliminado = b.i_Eliminado.Value } into b_join
                                      from b in b_join.DefaultIfEmpty()

                                      join c in dbContext.cliente on new { c = b.v_IdCliente } equals new { c = c.v_IdCliente } into c_join
                                      from c in c_join.DefaultIfEmpty()

                                      join d in dbContext.productodetalle on new { pd = a.v_IdProductoDetalle } equals new { pd = d.v_IdProductoDetalle } into d_join
                                      from d in d_join.DefaultIfEmpty()

                                      join e in dbContext.documento on new { doc = b.i_IdTipoDocumento.Value, eliminado = 0 } equals new { doc = e.i_CodigoDocumento, eliminado = e.i_Eliminado.Value } into e_join
                                      from e in e_join.DefaultIfEmpty()

                                      join f in dbContext.producto on new { p = d.v_IdProducto, eliminado = 0 } equals new { p = f.v_IdProducto, eliminado = f.i_Eliminado.Value } into f_join
                                      from f in f_join.DefaultIfEmpty()

                                      join g in dbContext.linea on new { l = f.v_IdLinea, eliminado = 0 } equals new { l = g.v_IdLinea, eliminado = g.i_Eliminado.Value } into g_join
                                      from g in g_join.DefaultIfEmpty()

                                      join h in dbContext.vendedor on new { v = b.v_IdVendedor, eliminado = 0 } equals new { v = h.v_IdVendedor, eliminado = h.i_Eliminado.Value } into h_join
                                      from h in h_join.DefaultIfEmpty()


                                      where a.i_Eliminado == 0 && b.i_IdEstado == 1 && d.producto.v_IdProducto != "N002-PD000000000" && d.producto != null
                                      && (b.i_IdEstablecimiento == pstri_IdEstablecimiento || pstri_IdEstablecimiento == -1)
                                      && (c.v_CodCliente == CodCliente || CodCliente == "")
                                      && b.t_FechaRegistro >= pstrt_FechaRegistroIni && b.t_FechaRegistro <= pstrt_FechaRegistroFin
                                       && (d.producto.v_CodInterno == CodProducto || CodProducto == "")
                                       && (d != null && d.producto.v_IdLinea == IdLinea || IdLinea == "-1")
                                       && (d != null && d.producto.v_IdMarca == IdMarca || IdMarca == "-1")
                                       && (b.v_IdVendedor == IdVendedor || IdVendedor == "-1")

                                       && d_join.Any(o => o.v_IdProductoDetalle == a.v_IdProductoDetalle)
                                       && f_join.Any(p => p.v_IdProducto == f.v_IdProducto)

                                      select new
                                      {
                                          Fecha = b.t_FechaRegistro.Value,
                                          CodigoProducto = d != null ? d.producto.v_CodInterno : "",
                                          cantidad = a == null || a.d_Cantidad == null ? 0 : (e.i_UsadoDocumentoInverso != null && e.i_UsadoDocumentoInverso == 1) || (a.i_Anticipio != null && a.i_Anticipio == 1) ? a.d_Cantidad * -1 : a.d_Cantidad,
                                          NombreProducto = d != null ? d.producto.v_Descripcion : "",
                                          DocContable = e == null ? 0 : e.i_UsadoDocumentoContable ?? 0,
                                          IdProductoDetalle = a.v_IdProductoDetalle,
                                          GrupoLlave = Agrupar == "LINEA" ? g == null ? "** LINEA NO EXISTE **" : "LINEA :" + g.v_Nombre : Agrupar == "VENDEDOR" ? h == null ? "VENDEDOR NO EXISTE" : "VENDEDOR : " + h.v_NombreCompleto : "",
                                          IdVendedor = b.v_IdVendedor,
                                          PrecioVentaProducto = a.d_PrecioVenta == null ? 0 : (a.i_Anticipio != null && a.i_Anticipio == 1) || (e.i_UsadoDocumentoInverso != null && e.i_UsadoDocumentoInverso == 1) ? b.i_IdMoneda == pIntMoneda ? a.d_PrecioVenta * -1 : pIntMoneda == (int)Currency.Soles ? (a.d_PrecioVenta * b.d_TipoCambio) * -1 : (a.d_PrecioVenta / b.d_TipoCambio) * -1 : b.i_IdMoneda == pIntMoneda ? a.d_PrecioVenta : pIntMoneda == (int)Currency.Soles ? (a.d_PrecioVenta * b.d_TipoCambio) : (a.d_PrecioVenta / b.d_TipoCambio),
                                          PrecioVentaTotal = b.d_Total == null ? 0 : (b.i_DeduccionAnticipio != null && b.i_DeduccionAnticipio == 1) || (e.i_UsadoDocumentoInverso != null && e.i_UsadoDocumentoInverso == 1) ? b.i_IdMoneda == pIntMoneda ? b.d_Total * -1 : pIntMoneda == (int)Currency.Soles ? (b.d_Total * b.d_TipoCambio) * -1 : (b.d_Total / b.d_TipoCambio) * -1 : b.i_IdMoneda == pIntMoneda ? b.d_Total : pIntMoneda == (int)Currency.Soles ? (b.d_Total * b.d_TipoCambio) : (b.d_Total / b.d_TipoCambio),


                                      }).ToList().Select(p =>
                                      {
                                          return new ReporteRegistroVentaProductoMensual
                                          {
                                              Mes = p.Fecha.Date.Month.ToString("00"),
                                              IdProducto = p.CodigoProducto,
                                              NombreProducto = p.NombreProducto,
                                              DocContable = p.DocContable,
                                              IdProductoDetalle = p.IdProductoDetalle,
                                              CantidadDetalle = p.cantidad.Value,
                                              GrupoLlave = p.GrupoLlave,
                                              v_IdVendedor = p.IdVendedor,
                                              PrecioVentaDetalle = p.PrecioVentaProducto.Value,
                                              PrecioTotal = p.PrecioVentaTotal.Value,
                                          };


                                      }).ToList();
                        List<ReporteRegistroVentaProductoMensual> Guias = new List<ReporteRegistroVentaProductoMensual>();
                        if (IdVendedor == "-1")
                        {
                            Guias = (from a in dbContext.guiaremisiondetalle

                                     join b in dbContext.guiaremision on new { v = a.v_IdGuiaRemision, eliminado = 0 } equals new { v = b.v_IdGuiaRemision, eliminado = b.i_Eliminado.Value } into b_join
                                     from b in b_join.DefaultIfEmpty()

                                     join c in dbContext.cliente on new { c = b.v_IdCliente } equals new { c = c.v_IdCliente } into c_join
                                     from c in c_join.DefaultIfEmpty()

                                     join d in dbContext.productodetalle on new { pd = a.v_IdProductoDetalle, eliminado = 0 } equals new { pd = d.v_IdProductoDetalle, eliminado = d.i_Eliminado.Value } into d_join
                                     from d in d_join.DefaultIfEmpty()

                                     join e in dbContext.documento on new { doc = b.i_IdTipoDocumento.Value, eliminado = 0 } equals new { doc = e.i_CodigoDocumento, eliminado = e.i_Eliminado.Value } into e_join
                                     from e in e_join.DefaultIfEmpty()

                                     join f in dbContext.producto on new { p = d.v_IdProducto, eliminado = 0 } equals new { p = f.v_IdProducto, eliminado = f.i_Eliminado.Value } into f_join
                                     from f in f_join.DefaultIfEmpty()

                                     join g in dbContext.linea on new { l = f.v_IdLinea, eliminado = 0 } equals new { l = g.v_IdLinea, eliminado = g.i_Eliminado.Value } into g_join
                                     from g in g_join.DefaultIfEmpty()

                                     where a.i_Eliminado == 0 && b.i_IdEstado == 1 && d.producto.v_IdProducto != "N002-PD000000000" && d.producto != null
                                     && (b.i_IdEstablecimiento == pstri_IdEstablecimiento || pstri_IdEstablecimiento == -1)
                                     && (c.v_CodCliente == CodCliente || CodCliente == "")
                                     && b.t_FechaEmision >= pstrt_FechaRegistroIni && b.t_FechaEmision <= pstrt_FechaRegistroFin
                                      && (d.producto.v_CodInterno == CodProducto || CodProducto == "")
                                      && (d != null && d.producto.v_IdLinea == IdLinea || IdLinea == "-1")
                                      && (d != null && d.producto.v_IdMarca == IdMarca || IdMarca == "-1")
                                         //&& (b.v_IdVendedor == IdVendedor || IdVendedor == "-1")
                                      && b.i_IdTipoGuia != (int)TiposDocumentos.GuiaRemision

                                     select new
                                     {
                                         Fecha = b.t_FechaEmision.Value,
                                         CodigoProducto = d != null ? d.producto.v_CodInterno : "",
                                         cantidad = a == null || a.d_Cantidad == null ? 0 : a.d_Cantidad,
                                         NombreProducto = d != null ? d.producto.v_Descripcion : "",
                                         DocContable = e == null ? 0 : e.i_UsadoDocumentoContable ?? 0,
                                         IdProductoDetalle = a.v_IdProductoDetalle,
                                         GrupoLlave = Agrupar == "LINEA" ? g == null ? "** LINEA NO EXISTE **" : "LINEA :" + g.v_Nombre : Agrupar == "VENDEDOR" ? "VENDEDOR NO EXISTE" : "",
                                     }).ToList().Select(p => new ReporteRegistroVentaProductoMensual
                                     {
                                         Mes = p.Fecha.Date.Month.ToString("00"),
                                         IdProducto = p.CodigoProducto,
                                         NombreProducto = p.NombreProducto,
                                         DocContable = p.DocContable,
                                         IdProductoDetalle = p.IdProductoDetalle,
                                         CantidadDetalle = p.cantidad.Value,
                                         GrupoLlave = p.GrupoLlave,

                                     }).ToList();
                        }

                        List<ReporteRegistroVentaProductoMensual> ListaFiltrar = ConsideraDocContables == -1 ? Ventas.Concat(Guias).ToList() : ConsideraDocContables == 1 ? Ventas.Concat(Guias).Where(l => l.DocContable == 1).ToList() : Ventas.Concat(Guias).Where(l => l.DocContable == 0).ToList();

                        if (Agrupar == "VENDEDOR")
                        {
                            Ventas = Ventas.GroupBy(x => new { x.IdProductoDetalle, x.v_IdVendedor })
                                                      .Select(group => group.First()).AsQueryable().OrderBy(pstrt_Orden).ToList();

                        }
                        else
                        {

                            Ventas = Ventas.GroupBy(x => new { x.IdProductoDetalle })
                                                       .Select(group => group.First()).AsQueryable().OrderBy(pstrt_Orden).ToList();

                        }

                        foreach (var item in Ventas)
                        {
                            item.C_Enero = Agrupar == "VENDEDOR" ? ListaFiltrar.Where(l => l.Mes == "01" && l.IdProductoDetalle == item.IdProductoDetalle && l.v_IdVendedor == item.v_IdVendedor).Sum(l => l.CantidadDetalle) : ListaFiltrar.Where(l => l.Mes == "01" && l.IdProductoDetalle == item.IdProductoDetalle).Sum(l => l.CantidadDetalle);
                            item.C_Febrero = Agrupar == "VENDEDOR" ? ListaFiltrar.Where(l => l.Mes == "02" && l.IdProductoDetalle == item.IdProductoDetalle && l.v_IdVendedor == item.v_IdVendedor).Sum(l => l.CantidadDetalle) : ListaFiltrar.Where(l => l.Mes == "02" && l.IdProductoDetalle == item.IdProductoDetalle).Sum(l => l.CantidadDetalle);
                            item.C_Marzo = Agrupar == "VENDEDOR" ? ListaFiltrar.Where(l => l.Mes == "03" && l.IdProductoDetalle == item.IdProductoDetalle && l.v_IdVendedor == item.v_IdVendedor).Sum(l => l.CantidadDetalle) : ListaFiltrar.Where(l => l.Mes == "03" && l.IdProductoDetalle == item.IdProductoDetalle).Sum(l => l.CantidadDetalle);
                            item.C_Abril = Agrupar == "VENDEDOR" ? ListaFiltrar.Where(l => l.Mes == "04" && l.IdProductoDetalle == item.IdProductoDetalle && l.v_IdVendedor == item.v_IdVendedor).Sum(l => l.CantidadDetalle) : ListaFiltrar.Where(l => l.Mes == "04" && l.IdProductoDetalle == item.IdProductoDetalle).Sum(l => l.CantidadDetalle);
                            item.C_Mayo = Agrupar == "VENDEDOR" ? ListaFiltrar.Where(l => l.Mes == "05" && l.IdProductoDetalle == item.IdProductoDetalle && l.v_IdVendedor == item.v_IdVendedor).Sum(l => l.CantidadDetalle) : ListaFiltrar.Where(l => l.Mes == "05" && l.IdProductoDetalle == item.IdProductoDetalle).Sum(l => l.CantidadDetalle);
                            item.C_Junio = Agrupar == "VENDEDOR" ? ListaFiltrar.Where(l => l.Mes == "06" && l.IdProductoDetalle == item.IdProductoDetalle && l.v_IdVendedor == item.v_IdVendedor).Sum(l => l.CantidadDetalle) : ListaFiltrar.Where(l => l.Mes == "06" && l.IdProductoDetalle == item.IdProductoDetalle).Sum(l => l.CantidadDetalle);
                            item.C_Julio = Agrupar == "VENDEDOR" ? ListaFiltrar.Where(l => l.Mes == "07" && l.IdProductoDetalle == item.IdProductoDetalle && l.v_IdVendedor == item.v_IdVendedor).Sum(l => l.CantidadDetalle) : ListaFiltrar.Where(l => l.Mes == "07" && l.IdProductoDetalle == item.IdProductoDetalle).Sum(l => l.CantidadDetalle);
                            item.C_Agosto = Agrupar == "VENDEDOR" ? ListaFiltrar.Where(l => l.Mes == "08" && l.IdProductoDetalle == item.IdProductoDetalle && l.v_IdVendedor == item.v_IdVendedor).Sum(l => l.CantidadDetalle) : ListaFiltrar.Where(l => l.Mes == "08" && l.IdProductoDetalle == item.IdProductoDetalle).Sum(l => l.CantidadDetalle);
                            item.C_Setiembre = Agrupar == "VENDEDOR" ? ListaFiltrar.Where(l => l.Mes == "09" && l.IdProductoDetalle == item.IdProductoDetalle && l.v_IdVendedor == item.v_IdVendedor).Sum(l => l.CantidadDetalle) : ListaFiltrar.Where(l => l.Mes == "09" && l.IdProductoDetalle == item.IdProductoDetalle).Sum(l => l.CantidadDetalle);
                            item.C_Octubre = Agrupar == "VENDEDOR" ? ListaFiltrar.Where(l => l.Mes == "10" && l.IdProductoDetalle == item.IdProductoDetalle && l.v_IdVendedor == item.v_IdVendedor).Sum(l => l.CantidadDetalle) : ListaFiltrar.Where(l => l.Mes == "10" && l.IdProductoDetalle == item.IdProductoDetalle).Sum(l => l.CantidadDetalle);
                            item.C_Noviembre = Agrupar == "VENDEDOR" ? ListaFiltrar.Where(l => l.Mes == "11" && l.IdProductoDetalle == item.IdProductoDetalle && l.v_IdVendedor == item.v_IdVendedor).Sum(l => l.CantidadDetalle) : ListaFiltrar.Where(l => l.Mes == "11" && l.IdProductoDetalle == item.IdProductoDetalle).Sum(l => l.CantidadDetalle);
                            item.C_Diciembre = Agrupar == "VENDEDOR" ? ListaFiltrar.Where(l => l.Mes == "12" && l.IdProductoDetalle == item.IdProductoDetalle && l.v_IdVendedor == item.v_IdVendedor).Sum(l => l.CantidadDetalle) : ListaFiltrar.Where(l => l.Mes == "12" && l.IdProductoDetalle == item.IdProductoDetalle).Sum(l => l.CantidadDetalle);
                            if (Export)
                            {
                                item.T_Enero = Agrupar == "VENDEDOR" ? ListaFiltrar.Where(l => l.Mes == "01" && l.IdProductoDetalle == item.IdProductoDetalle && l.v_IdVendedor == item.v_IdVendedor).Sum(l => l.PrecioVentaDetalle) : ListaFiltrar.Where(l => l.Mes == "01" && l.IdProductoDetalle == item.IdProductoDetalle).Sum(l => l.PrecioVentaDetalle);
                                item.T_Febrero = Agrupar == "VENDEDOR" ? ListaFiltrar.Where(l => l.Mes == "02" && l.IdProductoDetalle == item.IdProductoDetalle && l.v_IdVendedor == item.v_IdVendedor).Sum(l => l.PrecioVentaDetalle) : ListaFiltrar.Where(l => l.Mes == "02" && l.IdProductoDetalle == item.IdProductoDetalle).Sum(l => l.PrecioVentaDetalle);
                                item.T_Marzo = Agrupar == "VENDEDOR" ? ListaFiltrar.Where(l => l.Mes == "03" && l.IdProductoDetalle == item.IdProductoDetalle && l.v_IdVendedor == item.v_IdVendedor).Sum(l => l.PrecioVentaDetalle) : ListaFiltrar.Where(l => l.Mes == "03" && l.IdProductoDetalle == item.IdProductoDetalle).Sum(l => l.PrecioVentaDetalle);
                                item.T_Abril = Agrupar == "VENDEDOR" ? ListaFiltrar.Where(l => l.Mes == "04" && l.IdProductoDetalle == item.IdProductoDetalle && l.v_IdVendedor == item.v_IdVendedor).Sum(l => l.PrecioVentaDetalle) : ListaFiltrar.Where(l => l.Mes == "04" && l.IdProductoDetalle == item.IdProductoDetalle).Sum(l => l.PrecioVentaDetalle);
                                item.T_Mayo = Agrupar == "VENDEDOR" ? ListaFiltrar.Where(l => l.Mes == "05" && l.IdProductoDetalle == item.IdProductoDetalle && l.v_IdVendedor == item.v_IdVendedor).Sum(l => l.PrecioVentaDetalle) : ListaFiltrar.Where(l => l.Mes == "05" && l.IdProductoDetalle == item.IdProductoDetalle).Sum(l => l.PrecioVentaDetalle);
                                item.T_Junio = Agrupar == "VENDEDOR" ? ListaFiltrar.Where(l => l.Mes == "06" && l.IdProductoDetalle == item.IdProductoDetalle && l.v_IdVendedor == item.v_IdVendedor).Sum(l => l.PrecioVentaDetalle) : ListaFiltrar.Where(l => l.Mes == "06" && l.IdProductoDetalle == item.IdProductoDetalle).Sum(l => l.PrecioVentaDetalle);
                                item.T_Julio = Agrupar == "VENDEDOR" ? ListaFiltrar.Where(l => l.Mes == "07" && l.IdProductoDetalle == item.IdProductoDetalle && l.v_IdVendedor == item.v_IdVendedor).Sum(l => l.PrecioVentaDetalle) : ListaFiltrar.Where(l => l.Mes == "07" && l.IdProductoDetalle == item.IdProductoDetalle).Sum(l => l.PrecioVentaDetalle);
                                item.T_Agosto = Agrupar == "VENDEDOR" ? ListaFiltrar.Where(l => l.Mes == "08" && l.IdProductoDetalle == item.IdProductoDetalle && l.v_IdVendedor == item.v_IdVendedor).Sum(l => l.PrecioVentaDetalle) : ListaFiltrar.Where(l => l.Mes == "08" && l.IdProductoDetalle == item.IdProductoDetalle).Sum(l => l.PrecioVentaDetalle);
                                item.T_Setiembre = Agrupar == "VENDEDOR" ? ListaFiltrar.Where(l => l.Mes == "09" && l.IdProductoDetalle == item.IdProductoDetalle && l.v_IdVendedor == item.v_IdVendedor).Sum(l => l.PrecioVentaDetalle) : ListaFiltrar.Where(l => l.Mes == "09" && l.IdProductoDetalle == item.IdProductoDetalle).Sum(l => l.PrecioVentaDetalle);
                                item.T_Octubre = Agrupar == "VENDEDOR" ? ListaFiltrar.Where(l => l.Mes == "10" && l.IdProductoDetalle == item.IdProductoDetalle && l.v_IdVendedor == item.v_IdVendedor).Sum(l => l.PrecioVentaDetalle) : ListaFiltrar.Where(l => l.Mes == "10" && l.IdProductoDetalle == item.IdProductoDetalle).Sum(l => l.PrecioVentaDetalle);
                                item.T_Noviembre = Agrupar == "VENDEDOR" ? ListaFiltrar.Where(l => l.Mes == "11" && l.IdProductoDetalle == item.IdProductoDetalle && l.v_IdVendedor == item.v_IdVendedor).Sum(l => l.PrecioVentaDetalle) : ListaFiltrar.Where(l => l.Mes == "11" && l.IdProductoDetalle == item.IdProductoDetalle).Sum(l => l.PrecioVentaDetalle);
                                item.T_Diciembre = Agrupar == "VENDEDOR" ? ListaFiltrar.Where(l => l.Mes == "12" && l.IdProductoDetalle == item.IdProductoDetalle && l.v_IdVendedor == item.v_IdVendedor).Sum(l => l.PrecioVentaDetalle) : ListaFiltrar.Where(l => l.Mes == "12" && l.IdProductoDetalle == item.IdProductoDetalle).Sum(l => l.PrecioVentaDetalle);
                                item.T_Total = item.T_Enero + item.T_Febrero + item.T_Marzo + item.T_Abril + item.T_Mayo + item.T_Junio + item.T_Julio + item.T_Agosto + item.T_Setiembre + item.T_Octubre + item.T_Noviembre + item.T_Diciembre;

                            }
                            ListaFinal.Add(item);
                        }
                        return ListaFinal;
                        #endregion
                    }
                    else
                    {

                        #region Valores
                        var Ventas = (from a in dbContext.ventadetalle

                                      join b in dbContext.venta on new { v = a.v_IdVenta, eliminado = 0 } equals new { v = b.v_IdVenta, eliminado = b.i_Eliminado.Value } into b_join
                                      from b in b_join.DefaultIfEmpty()

                                      join c in dbContext.cliente on new { c = b.v_IdCliente } equals new { c = c.v_IdCliente } into c_join
                                      from c in c_join.DefaultIfEmpty()

                                      join d in dbContext.productodetalle on new { pd = a.v_IdProductoDetalle } equals new { pd = d.v_IdProductoDetalle } into d_join
                                      from d in d_join.DefaultIfEmpty()

                                      join e in dbContext.documento on new { doc = b.i_IdTipoDocumento.Value, eliminado = 0 } equals new { doc = e.i_CodigoDocumento, eliminado = e.i_Eliminado.Value } into e_join
                                      from e in e_join.DefaultIfEmpty()

                                      join f in dbContext.producto on new { p = d.v_IdProducto, eliminado = 0 } equals new { p = f.v_IdProducto, eliminado = f.i_Eliminado.Value } into f_join
                                      from f in f_join.DefaultIfEmpty()

                                      join g in dbContext.linea on new { l = f.v_IdLinea, eliminado = 0 } equals new { l = g.v_IdLinea, eliminado = g.i_Eliminado.Value } into g_join
                                      from g in g_join.DefaultIfEmpty()

                                      join h in dbContext.vendedor on new { v = b.v_IdVendedor, eliminado = 0 } equals new { v = h.v_IdVendedor, eliminado = h.i_Eliminado.Value } into h_join
                                      from h in h_join.DefaultIfEmpty()


                                      where a.i_Eliminado == 0 && b.i_IdEstado == 1 && d.producto.v_IdProducto != "N002-PD000000000" && d.producto != null
                                      && (b.i_IdEstablecimiento == pstri_IdEstablecimiento || pstri_IdEstablecimiento == -1)
                                      && (c.v_CodCliente == CodCliente || CodCliente == "")
                                      && b.t_FechaRegistro >= pstrt_FechaRegistroIni && b.t_FechaRegistro <= pstrt_FechaRegistroFin
                                       && (d.producto.v_CodInterno == CodProducto || CodProducto == "")
                                       && (d != null && d.producto.v_IdLinea == IdLinea || IdLinea == "-1")
                                       && (d != null && d.producto.v_IdMarca == IdMarca || IdMarca == "-1")
                                       && (b.v_IdVendedor == IdVendedor || IdVendedor == "-1")
                                       && d_join.Any(o => o.v_IdProductoDetalle == a.v_IdProductoDetalle)
                                       && f_join.Any(p => p.v_IdProducto == f.v_IdProducto)

                                      select new
                                      {
                                          Fecha = b.t_FechaRegistro.Value,
                                          CodigoProducto = d != null ? d.producto.v_CodInterno : "",

                                          NombreProducto = d != null ? d.producto.v_Descripcion : "",
                                          DocContable = e == null ? 0 : e.i_UsadoDocumentoContable ?? 0,
                                          IdProductoDetalle = a.v_IdProductoDetalle,
                                          GrupoLlave = Agrupar == "LINEA" ? g == null ? "** LINEA NO EXISTE **" : "LINEA :" + g.v_Nombre : Agrupar == "VENDEDOR" ? h == null ? "VENDEDOR NO EXISTE" : "VENDEDOR : " + h.v_NombreCompleto : "",
                                          IdVendedor = b.v_IdVendedor,
                                          ValorVentaProducto = a.d_ValorVenta == null ? 0 : (a.i_Anticipio != null && a.i_Anticipio == 1) || (e.i_UsadoDocumentoInverso != null && e.i_UsadoDocumentoInverso == 1) ? b.i_IdMoneda == pIntMoneda ? a.d_ValorVenta * -1 : pIntMoneda == (int)Currency.Soles ? (a.d_ValorVenta * b.d_TipoCambio) * -1 : (a.d_ValorVenta / b.d_TipoCambio) * -1 : b.i_IdMoneda == pIntMoneda ? a.d_ValorVenta : pIntMoneda == (int)Currency.Soles ? (a.d_ValorVenta * b.d_TipoCambio) : (a.d_ValorVenta / b.d_TipoCambio),
                                          ValorVentaTotal = b.d_ValorVenta == null ? 0 : (b.i_DeduccionAnticipio != null && b.i_DeduccionAnticipio == 1) || (e.i_UsadoDocumentoInverso != null && e.i_UsadoDocumentoInverso == 1) ? b.i_IdMoneda == pIntMoneda ? b.d_ValorVenta * -1 : pIntMoneda == (int)Currency.Soles ? (b.d_ValorVenta * b.d_TipoCambio) * -1 : (b.d_ValorVenta / b.d_TipoCambio) * -1 : b.i_IdMoneda == pIntMoneda ? b.d_ValorVenta : pIntMoneda == (int)Currency.Soles ? (b.d_ValorVenta * b.d_TipoCambio) : (b.d_ValorVenta / b.d_TipoCambio),

                                          NumeroDoc = b.v_SerieDocumento + " " + b.v_CorrelativoDocumento,
                                          PrecioVentaProducto = a.d_PrecioVenta == null ? 0 : (a.i_Anticipio != null && a.i_Anticipio == 1) || (e.i_UsadoDocumentoInverso != null && e.i_UsadoDocumentoInverso == 1) ? b.i_IdMoneda == pIntMoneda ? a.d_PrecioVenta * -1 : pIntMoneda == (int)Currency.Soles ? (a.d_PrecioVenta * b.d_TipoCambio) * -1 : (a.d_PrecioVenta / b.d_TipoCambio) * -1 : b.i_IdMoneda == pIntMoneda ? a.d_PrecioVenta : pIntMoneda == (int)Currency.Soles ? (a.d_PrecioVenta * b.d_TipoCambio) : (a.d_PrecioVenta / b.d_TipoCambio),
                                          PrecioVentaTotal = b.d_Total == null ? 0 : (b.i_DeduccionAnticipio != null && b.i_DeduccionAnticipio == 1) || (e.i_UsadoDocumentoInverso != null && e.i_UsadoDocumentoInverso == 1) ? b.i_IdMoneda == pIntMoneda ? b.d_Total * -1 : pIntMoneda == (int)Currency.Soles ? (b.d_Total * b.d_TipoCambio) * -1 : (b.d_Total / b.d_TipoCambio) * -1 : b.i_IdMoneda == pIntMoneda ? b.d_Total : pIntMoneda == (int)Currency.Soles ? (b.d_Total * b.d_TipoCambio) : (b.d_Total / b.d_TipoCambio),

                                          cantidad = a == null || a.d_Cantidad == null ? 0 : (e.i_UsadoDocumentoInverso != null && e.i_UsadoDocumentoInverso == 1) || (a.i_Anticipio != null && a.i_Anticipio == 1) ? a.d_Cantidad * -1 : a.d_Cantidad,

                                      }).ToList().Select(p =>
                                      {

                                          if (p.CodigoProducto == "1000100120001")
                                          {
                                              string h = "";
                                          }
                                          return new ReporteRegistroVentaProductoMensual
                                          {
                                              Mes = p.Fecha.Date.Month.ToString("00"),
                                              IdProducto = p.CodigoProducto,
                                              NombreProducto = p.NombreProducto,
                                              DocContable = p.DocContable,
                                              IdProductoDetalle = p.IdProductoDetalle,
                                              // CantidadDetalle = p.cantidad.Value,
                                              GrupoLlave = p.GrupoLlave,
                                              v_IdVendedor = p.IdVendedor,
                                              PrecioVentaDetalle = p.PrecioVentaProducto.Value,
                                              PrecioTotal = p.PrecioVentaTotal.Value,
                                              IdProductoAux = p.NumeroDoc,
                                              ValorVentaDetalle = p.ValorVentaProducto.Value,
                                              ValorVentaTotal = p.ValorVentaTotal.Value,
                                              CantidadDetalle = p.cantidad.Value,
                                          };


                                      }).ToList();





                        List<ReporteRegistroVentaProductoMensual> Guias = new List<ReporteRegistroVentaProductoMensual>();
                        if (IdVendedor == "-1")
                        {
                            Guias = (from a in dbContext.guiaremisiondetalle

                                     join b in dbContext.guiaremision on new { v = a.v_IdGuiaRemision, eliminado = 0 } equals new { v = b.v_IdGuiaRemision, eliminado = b.i_Eliminado.Value } into b_join
                                     from b in b_join.DefaultIfEmpty()

                                     join c in dbContext.cliente on new { c = b.v_IdCliente } equals new { c = c.v_IdCliente } into c_join
                                     from c in c_join.DefaultIfEmpty()

                                     join d in dbContext.productodetalle on new { pd = a.v_IdProductoDetalle } equals new { pd = d.v_IdProductoDetalle } into d_join
                                     from d in d_join.DefaultIfEmpty()

                                     join e in dbContext.documento on new { doc = b.i_IdTipoDocumento.Value, eliminado = 0 } equals new { doc = e.i_CodigoDocumento, eliminado = e.i_Eliminado.Value } into e_join
                                     from e in e_join.DefaultIfEmpty()

                                     join f in dbContext.producto on new { p = d.v_IdProducto, eliminado = 0 } equals new { p = f.v_IdProducto, eliminado = f.i_Eliminado.Value } into f_join
                                     from f in f_join.DefaultIfEmpty()

                                     join g in dbContext.linea on new { l = f.v_IdLinea, eliminado = 0 } equals new { l = g.v_IdLinea, eliminado = g.i_Eliminado.Value } into g_join
                                     from g in g_join.DefaultIfEmpty()

                                     where a.i_Eliminado == 0 && b.i_IdEstado == 1 && d.producto.v_IdProducto != "N002-PD000000000" && d.producto != null
                                     && (b.i_IdEstablecimiento == pstri_IdEstablecimiento || pstri_IdEstablecimiento == -1)
                                     && (c.v_CodCliente == CodCliente || CodCliente == "")
                                     && b.t_FechaEmision >= pstrt_FechaRegistroIni && b.t_FechaEmision <= pstrt_FechaRegistroFin
                                      && (d.producto.v_CodInterno == CodProducto || CodProducto == "")
                                      && (d != null && d.producto.v_IdLinea == IdLinea || IdLinea == "-1")
                                      && (d != null && d.producto.v_IdMarca == IdMarca || IdMarca == "-1")
                                         //&& (b.v_IdVendedor == IdVendedor || IdVendedor == "-1")
                                      && b.i_IdTipoGuia != (int)TiposDocumentos.GuiaRemision

                                     select new
                                     {
                                         Fecha = b.t_FechaEmision.Value,
                                         CodigoProducto = d != null ? d.producto.v_CodInterno : "",
                                         cantidad = a == null || a.d_Cantidad == null ? 0 : a.d_Cantidad,
                                         NombreProducto = d != null ? d.producto.v_Descripcion : "",
                                         DocContable = e == null ? 0 : e.i_UsadoDocumentoContable ?? 0,
                                         IdProductoDetalle = a.v_IdProductoDetalle,
                                         GrupoLlave = Agrupar == "LINEA" ? g == null ? "** LINEA NO EXISTE **" : "LINEA :" + g.v_Nombre : Agrupar == "VENDEDOR" ? "VENDEDOR NO EXISTE" : "",

                                         ValorVentaProducto = a.d_Precio == null ? 0 : b.i_IdMoneda == pIntMoneda ? a.d_ValorVenta : pIntMoneda == (int)Currency.Soles ? (a.d_ValorVenta * b.d_TipoCambio) : (a.d_ValorVenta / b.d_TipoCambio),

                                         ValorVentaTotal = b.d_Total == null ? 0 : b.i_IdMoneda == pIntMoneda ? b.d_Total : pIntMoneda == (int)Currency.Soles ? (b.d_Total * b.d_TipoCambio) : (b.d_Total / b.d_TipoCambio),

                                         PrecioVentaProducto = a.d_Precio == null ? 0 : b.i_IdMoneda == pIntMoneda ? a.d_Precio : pIntMoneda == (int)Currency.Soles ? (a.d_Precio * b.d_TipoCambio) : (a.d_Precio / b.d_TipoCambio),

                                         PrecioVentaTotal = b.d_Total == null ? 0 : b.i_IdMoneda == pIntMoneda ? b.d_Total : pIntMoneda == (int)Currency.Soles ? (b.d_Total * b.d_TipoCambio) : (b.d_Total / b.d_TipoCambio),


                                     }).ToList().Select(p => new ReporteRegistroVentaProductoMensual
                                     {
                                         Mes = p.Fecha.Date.Month.ToString("00"),
                                         IdProducto = p.CodigoProducto,
                                         NombreProducto = p.NombreProducto,
                                         DocContable = p.DocContable,
                                         IdProductoDetalle = p.IdProductoDetalle,
                                         CantidadDetalle = p.cantidad.Value,
                                         GrupoLlave = p.GrupoLlave,
                                         PrecioVentaDetalle = p.PrecioVentaProducto.Value,
                                         PrecioTotal = p.PrecioVentaTotal.Value,
                                         ValorVentaTotal = p.ValorVentaTotal.Value,
                                         ValorVentaDetalle = p.ValorVentaProducto.Value,

                                     }).ToList();
                        }

                        //List<ReporteRegistroVentaProductoMensual> ListaFiltrar = ConsideraDocContables == 1 ? Ventas.Concat(Guias).ToList() : Ventas.Concat(Guias).Where(l => l.DocContable == 1).ToList();
                        List<ReporteRegistroVentaProductoMensual> ListaFiltrar = ConsideraDocContables == -1 ? Ventas.Concat(Guias).ToList() : ConsideraDocContables == 1 ? Ventas.Concat(Guias).Where(l => l.DocContable == 1).ToList() : Ventas.Concat(Guias).Where(l => l.DocContable == 0).ToList();

                        if (Agrupar == "VENDEDOR")
                        {
                            Ventas = Ventas.GroupBy(x => new { x.IdProductoDetalle, x.v_IdVendedor })
                                                      .Select(group => group.First()).AsQueryable().OrderBy(pstrt_Orden).ToList();

                        }
                        else
                        {

                            Ventas = Ventas.GroupBy(x => new { x.IdProductoDetalle })
                                                       .Select(group => group.First()).AsQueryable().OrderBy(pstrt_Orden).ToList();

                        }

                        foreach (var item in Ventas)
                        {

                            if (item.IdProductoDetalle == "N001-PE000000036")
                            {

                                var h = ListaFiltrar.Where(l => l.Mes == "01" && l.IdProductoDetalle == item.IdProductoDetalle).ToList();
                            }
                            item.T_Enero = Agrupar == "VENDEDOR" ? ListaFiltrar.Where(l => l.Mes == "01" && l.IdProductoDetalle == item.IdProductoDetalle && l.v_IdVendedor == item.v_IdVendedor).Sum(l => l.ValorVentaDetalle) : ListaFiltrar.Where(l => l.Mes == "01" && l.IdProductoDetalle == item.IdProductoDetalle).Sum(l => l.ValorVentaDetalle);
                            item.T_Febrero = Agrupar == "VENDEDOR" ? ListaFiltrar.Where(l => l.Mes == "02" && l.IdProductoDetalle == item.IdProductoDetalle && l.v_IdVendedor == item.v_IdVendedor).Sum(l => l.ValorVentaDetalle) : ListaFiltrar.Where(l => l.Mes == "02" && l.IdProductoDetalle == item.IdProductoDetalle).Sum(l => l.ValorVentaDetalle);
                            item.T_Marzo = Agrupar == "VENDEDOR" ? ListaFiltrar.Where(l => l.Mes == "03" && l.IdProductoDetalle == item.IdProductoDetalle && l.v_IdVendedor == item.v_IdVendedor).Sum(l => l.ValorVentaDetalle) : ListaFiltrar.Where(l => l.Mes == "03" && l.IdProductoDetalle == item.IdProductoDetalle).Sum(l => l.ValorVentaDetalle);
                            item.T_Abril = Agrupar == "VENDEDOR" ? ListaFiltrar.Where(l => l.Mes == "04" && l.IdProductoDetalle == item.IdProductoDetalle && l.v_IdVendedor == item.v_IdVendedor).Sum(l => l.ValorVentaDetalle) : ListaFiltrar.Where(l => l.Mes == "04" && l.IdProductoDetalle == item.IdProductoDetalle).Sum(l => l.ValorVentaDetalle);
                            item.T_Mayo = Agrupar == "VENDEDOR" ? ListaFiltrar.Where(l => l.Mes == "05" && l.IdProductoDetalle == item.IdProductoDetalle && l.v_IdVendedor == item.v_IdVendedor).Sum(l => l.ValorVentaDetalle) : ListaFiltrar.Where(l => l.Mes == "05" && l.IdProductoDetalle == item.IdProductoDetalle).Sum(l => l.ValorVentaDetalle);
                            item.T_Junio = Agrupar == "VENDEDOR" ? ListaFiltrar.Where(l => l.Mes == "06" && l.IdProductoDetalle == item.IdProductoDetalle && l.v_IdVendedor == item.v_IdVendedor).Sum(l => l.ValorVentaDetalle) : ListaFiltrar.Where(l => l.Mes == "06" && l.IdProductoDetalle == item.IdProductoDetalle).Sum(l => l.ValorVentaDetalle);
                            item.T_Julio = Agrupar == "VENDEDOR" ? ListaFiltrar.Where(l => l.Mes == "07" && l.IdProductoDetalle == item.IdProductoDetalle && l.v_IdVendedor == item.v_IdVendedor).Sum(l => l.ValorVentaDetalle) : ListaFiltrar.Where(l => l.Mes == "07" && l.IdProductoDetalle == item.IdProductoDetalle).Sum(l => l.ValorVentaDetalle);
                            item.T_Agosto = Agrupar == "VENDEDOR" ? ListaFiltrar.Where(l => l.Mes == "08" && l.IdProductoDetalle == item.IdProductoDetalle && l.v_IdVendedor == item.v_IdVendedor).Sum(l => l.ValorVentaDetalle) : ListaFiltrar.Where(l => l.Mes == "08" && l.IdProductoDetalle == item.IdProductoDetalle).Sum(l => l.ValorVentaDetalle);
                            item.T_Setiembre = Agrupar == "VENDEDOR" ? ListaFiltrar.Where(l => l.Mes == "09" && l.IdProductoDetalle == item.IdProductoDetalle && l.v_IdVendedor == item.v_IdVendedor).Sum(l => l.ValorVentaDetalle) : ListaFiltrar.Where(l => l.Mes == "09" && l.IdProductoDetalle == item.IdProductoDetalle).Sum(l => l.ValorVentaDetalle);
                            item.T_Octubre = Agrupar == "VENDEDOR" ? ListaFiltrar.Where(l => l.Mes == "10" && l.IdProductoDetalle == item.IdProductoDetalle && l.v_IdVendedor == item.v_IdVendedor).Sum(l => l.ValorVentaDetalle) : ListaFiltrar.Where(l => l.Mes == "10" && l.IdProductoDetalle == item.IdProductoDetalle).Sum(l => l.ValorVentaDetalle);
                            item.T_Noviembre = Agrupar == "VENDEDOR" ? ListaFiltrar.Where(l => l.Mes == "11" && l.IdProductoDetalle == item.IdProductoDetalle && l.v_IdVendedor == item.v_IdVendedor).Sum(l => l.ValorVentaDetalle) : ListaFiltrar.Where(l => l.Mes == "11" && l.IdProductoDetalle == item.IdProductoDetalle).Sum(l => l.ValorVentaDetalle);
                            item.T_Diciembre = Agrupar == "VENDEDOR" ? ListaFiltrar.Where(l => l.Mes == "12" && l.IdProductoDetalle == item.IdProductoDetalle && l.v_IdVendedor == item.v_IdVendedor).Sum(l => l.ValorVentaDetalle) : ListaFiltrar.Where(l => l.Mes == "12" && l.IdProductoDetalle == item.IdProductoDetalle).Sum(l => l.ValorVentaDetalle);
                            item.T_Total = item.T_Enero + item.T_Febrero + item.T_Marzo + item.T_Abril + item.T_Mayo + item.T_Junio + item.T_Julio + item.T_Agosto + item.T_Setiembre + item.T_Octubre + item.T_Noviembre + item.T_Diciembre;



                            if (Export)
                            {



                                item.C_Enero = Agrupar == "VENDEDOR" ? ListaFiltrar.Where(l => l.Mes == "01" && l.IdProductoDetalle == item.IdProductoDetalle && l.v_IdVendedor == item.v_IdVendedor).Sum(l => l.CantidadDetalle) : ListaFiltrar.Where(l => l.Mes == "01" && l.IdProductoDetalle == item.IdProductoDetalle).Sum(l => l.CantidadDetalle);
                                item.C_Febrero = Agrupar == "VENDEDOR" ? ListaFiltrar.Where(l => l.Mes == "02" && l.IdProductoDetalle == item.IdProductoDetalle && l.v_IdVendedor == item.v_IdVendedor).Sum(l => l.CantidadDetalle) : ListaFiltrar.Where(l => l.Mes == "02" && l.IdProductoDetalle == item.IdProductoDetalle).Sum(l => l.CantidadDetalle);
                                item.C_Marzo = Agrupar == "VENDEDOR" ? ListaFiltrar.Where(l => l.Mes == "03" && l.IdProductoDetalle == item.IdProductoDetalle && l.v_IdVendedor == item.v_IdVendedor).Sum(l => l.CantidadDetalle) : ListaFiltrar.Where(l => l.Mes == "03" && l.IdProductoDetalle == item.IdProductoDetalle).Sum(l => l.CantidadDetalle);
                                item.C_Abril = Agrupar == "VENDEDOR" ? ListaFiltrar.Where(l => l.Mes == "04" && l.IdProductoDetalle == item.IdProductoDetalle && l.v_IdVendedor == item.v_IdVendedor).Sum(l => l.CantidadDetalle) : ListaFiltrar.Where(l => l.Mes == "04" && l.IdProductoDetalle == item.IdProductoDetalle).Sum(l => l.CantidadDetalle);
                                item.C_Mayo = Agrupar == "VENDEDOR" ? ListaFiltrar.Where(l => l.Mes == "05" && l.IdProductoDetalle == item.IdProductoDetalle && l.v_IdVendedor == item.v_IdVendedor).Sum(l => l.CantidadDetalle) : ListaFiltrar.Where(l => l.Mes == "05" && l.IdProductoDetalle == item.IdProductoDetalle).Sum(l => l.CantidadDetalle);
                                item.C_Junio = Agrupar == "VENDEDOR" ? ListaFiltrar.Where(l => l.Mes == "06" && l.IdProductoDetalle == item.IdProductoDetalle && l.v_IdVendedor == item.v_IdVendedor).Sum(l => l.CantidadDetalle) : ListaFiltrar.Where(l => l.Mes == "06" && l.IdProductoDetalle == item.IdProductoDetalle).Sum(l => l.CantidadDetalle);
                                item.C_Julio = Agrupar == "VENDEDOR" ? ListaFiltrar.Where(l => l.Mes == "07" && l.IdProductoDetalle == item.IdProductoDetalle && l.v_IdVendedor == item.v_IdVendedor).Sum(l => l.CantidadDetalle) : ListaFiltrar.Where(l => l.Mes == "07" && l.IdProductoDetalle == item.IdProductoDetalle).Sum(l => l.CantidadDetalle);
                                item.C_Agosto = Agrupar == "VENDEDOR" ? ListaFiltrar.Where(l => l.Mes == "08" && l.IdProductoDetalle == item.IdProductoDetalle && l.v_IdVendedor == item.v_IdVendedor).Sum(l => l.CantidadDetalle) : ListaFiltrar.Where(l => l.Mes == "08" && l.IdProductoDetalle == item.IdProductoDetalle).Sum(l => l.CantidadDetalle);
                                item.C_Setiembre = Agrupar == "VENDEDOR" ? ListaFiltrar.Where(l => l.Mes == "09" && l.IdProductoDetalle == item.IdProductoDetalle && l.v_IdVendedor == item.v_IdVendedor).Sum(l => l.CantidadDetalle) : ListaFiltrar.Where(l => l.Mes == "09" && l.IdProductoDetalle == item.IdProductoDetalle).Sum(l => l.CantidadDetalle);
                                item.C_Octubre = Agrupar == "VENDEDOR" ? ListaFiltrar.Where(l => l.Mes == "10" && l.IdProductoDetalle == item.IdProductoDetalle && l.v_IdVendedor == item.v_IdVendedor).Sum(l => l.CantidadDetalle) : ListaFiltrar.Where(l => l.Mes == "10" && l.IdProductoDetalle == item.IdProductoDetalle).Sum(l => l.CantidadDetalle);
                                item.C_Noviembre = Agrupar == "VENDEDOR" ? ListaFiltrar.Where(l => l.Mes == "11" && l.IdProductoDetalle == item.IdProductoDetalle && l.v_IdVendedor == item.v_IdVendedor).Sum(l => l.CantidadDetalle) : ListaFiltrar.Where(l => l.Mes == "11" && l.IdProductoDetalle == item.IdProductoDetalle).Sum(l => l.CantidadDetalle);
                                item.C_Diciembre = Agrupar == "VENDEDOR" ? ListaFiltrar.Where(l => l.Mes == "12" && l.IdProductoDetalle == item.IdProductoDetalle && l.v_IdVendedor == item.v_IdVendedor).Sum(l => l.CantidadDetalle) : ListaFiltrar.Where(l => l.Mes == "12" && l.IdProductoDetalle == item.IdProductoDetalle).Sum(l => l.CantidadDetalle);

                            }


                            ListaFinal.Add(item);
                        }
                        return ListaFinal;


                        #endregion


                    }

                }




            }
            catch (Exception ex)
            {
                objOperationResult.Success = 0;
                return null;
            }

        }

        public List<ReporteStockConsolidado> ReporteRegistroVentaProductoEmpresa(ref OperationResult objOperationResult, DateTime pstrt_FechaRegistroIni, DateTime pstrt_FechaRegistroFin, int pIntMoneda, string CodProducto, int ConsideraDocInternos, int TipoConsiderar)
        {
            try
            {
                objOperationResult.Success = 1;
                var ListaFinal = new List<ReporteStockConsolidado>();
                using (SAMBHSEntitiesModelWin dbContext = new SAMBHSEntitiesModelWin())
                {
                    if (TipoConsiderar == (int)TipoReporteVentasMensual.Unidades)
                    {
                        #region Unidades
                        var Ventas = (from a in dbContext.ventadetalle

                                      join b in dbContext.venta on new { v = a.v_IdVenta, eliminado = 0 } equals new { v = b.v_IdVenta, eliminado = b.i_Eliminado.Value } into b_join
                                      from b in b_join.DefaultIfEmpty()

                                      join c in dbContext.establecimiento on new { i = b.i_IdEstablecimiento.Value, del = 0 } equals new { i = c.i_IdEstablecimiento, del = 0 } into c_join
                                      from c in c_join.DefaultIfEmpty()

                                      join d in dbContext.productodetalle on new { pd = a.v_IdProductoDetalle } equals new { pd = d.v_IdProductoDetalle } into d_join
                                      from d in d_join.DefaultIfEmpty()

                                      join e in dbContext.documento on new { doc = b.i_IdTipoDocumento.Value, eliminado = 0 } equals new { doc = e.i_CodigoDocumento, eliminado = e.i_Eliminado.Value } into e_join
                                      from e in e_join.DefaultIfEmpty()

                                      join f in dbContext.producto on new { p = d.v_IdProducto, eliminado = 0 } equals new { p = f.v_IdProducto, eliminado = f.i_Eliminado.Value } into f_join
                                      from f in f_join.DefaultIfEmpty()

                                      where a.i_Eliminado == 0 && b.i_IdEstado == 1 && d.producto.v_IdProducto != "N002-PD000000000" && d.producto != null
                                      && b.t_FechaRegistro >= pstrt_FechaRegistroIni && b.t_FechaRegistro <= pstrt_FechaRegistroFin
                                       && (d.producto.v_CodInterno == CodProducto || CodProducto == "")
                                       && b.i_IdEstablecimiento == Globals.ClientSession.i_IdEstablecimiento.Value
                                      orderby a.v_IdProductoDetalle
                                      select new
                                      {
                                          cantidad = a == null || a.d_Cantidad == null ? 0 : (e.i_UsadoDocumentoInverso != null && e.i_UsadoDocumentoInverso == 1) || (a.i_Anticipio != null && a.i_Anticipio == 1) ? a.d_Cantidad * -1 : a.d_Cantidad,
                                          NombreProducto = f != null ? f.v_Descripcion : "",
                                          CodigoProducto = f != null ? f.v_CodInterno : "",
                                          DocContable = e == null ? 0 : e.i_UsadoDocumentoContable ?? 0,
                                          c.i_IdEstablecimiento,
                                          NombreEstablecimiento = c.v_Nombre,
                                          IdProductoDetalle = a.v_IdProductoDetalle,
                                      }).ToList();


                        //List<ReporteRegistroVentaProductoMensual> Guias = new List<ReporteRegistroVentaProductoMensual>();

                        //List<ReporteRegistroVentaProductoMensual> ListaFiltrar = ConsideraDocInternos == 1 ? Ventas.Concat(Guias).ToList() : Ventas.Concat(Guias).Where(l => l.DocContable == 1).ToList();
                        var type = typeof(ReporteStockConsolidado);
                        var prods = Ventas.GroupBy(r => r.IdProductoDetalle);
                        foreach (var prop in prods)
                        {
                            var first = prop.FirstOrDefault();
                            if (first == null) continue;
                            var item = new ReporteStockConsolidado();
                            item.v_IdProductoDetalle = first.IdProductoDetalle;
                            item.descripcionProducto = first.NombreProducto;
                            item.codigoProducto = first.CodigoProducto;
                            var ems = prop.GroupBy(t => t.i_IdEstablecimiento);
                            var count = 1;
                            foreach (var em in ems)
                            {
                                var head = em.FirstOrDefault();
                                if (head == null) continue;
                                var prope = type.GetProperty("cantidadAlmacen" + count);
                                prope.SetValue(item, em.Sum(t => t.cantidad), null);
                                prope = type.GetProperty("almacen" + count);
                                prope.SetValue(item, head.NombreEstablecimiento, null);
                                count++;
                            }
                            ListaFinal.Add(item);
                        }
                        return ListaFinal;
                        #endregion
                    }
                    else
                    {
                        #region Valores
                        var Ventas = (from a in dbContext.ventadetalle

                                      join b in dbContext.venta on new { v = a.v_IdVenta, eliminado = 0 } equals new { v = b.v_IdVenta, eliminado = b.i_Eliminado.Value } into b_join
                                      from b in b_join.DefaultIfEmpty()

                                      join c in dbContext.establecimiento on new { i = b.i_IdEstablecimiento.Value, del = 0 } equals new { i = c.i_IdEstablecimiento, del = 0 } into c_join
                                      from c in c_join.DefaultIfEmpty()

                                      join d in dbContext.productodetalle on new { pd = a.v_IdProductoDetalle } equals new { pd = d.v_IdProductoDetalle } into d_join
                                      from d in d_join.DefaultIfEmpty()

                                      join e in dbContext.documento on new { doc = b.i_IdTipoDocumento.Value, eliminado = 0 } equals new { doc = e.i_CodigoDocumento, eliminado = e.i_Eliminado.Value } into e_join
                                      from e in e_join.DefaultIfEmpty()

                                      join f in dbContext.producto on new { p = d.v_IdProducto, eliminado = 0 } equals new { p = f.v_IdProducto, eliminado = f.i_Eliminado.Value } into f_join
                                      from f in f_join.DefaultIfEmpty()

                                      where a.i_Eliminado == 0 && b.i_IdEstado == 1 && d.producto.v_IdProducto != "N002-PD000000000" && d.producto != null
                                      && b.t_FechaRegistro >= pstrt_FechaRegistroIni && b.t_FechaRegistro <= pstrt_FechaRegistroFin
                                       && (d.producto.v_CodInterno == CodProducto || CodProducto == "")
                                       && b.i_IdEstablecimiento == Globals.ClientSession.i_IdEstablecimiento.Value
                                      select new
                                      {
                                          CodigoProducto = d != null ? d.producto.v_CodInterno : "",
                                          NombreProducto = d != null ? d.producto.v_Descripcion : "",
                                          DocContable = e == null ? 0 : e.i_UsadoDocumentoContable ?? 0,
                                          IdProductoDetalle = a.v_IdProductoDetalle,
                                          c.i_IdEstablecimiento,
                                          NombreEstablecimiento = c.v_Nombre,
                                          PrecioVentaProducto = a.d_ValorVenta == null ? 0 : (a.i_Anticipio != null && a.i_Anticipio == 1) || (e.i_UsadoDocumentoInverso != null && e.i_UsadoDocumentoInverso == 1) ? b.i_IdMoneda == pIntMoneda ? a.d_ValorVenta * -1 : pIntMoneda == (int)Currency.Soles ? (a.d_ValorVenta * b.d_TipoCambio) * -1 : (a.d_ValorVenta / b.d_TipoCambio) * -1 :
                                          b.i_IdMoneda == pIntMoneda ? a.d_ValorVenta : pIntMoneda == (int)Currency.Soles ? (a.d_ValorVenta * b.d_TipoCambio) : (a.d_ValorVenta / b.d_TipoCambio),
                                          NumeroDoc = b.v_SerieDocumento + " " + b.v_CorrelativoDocumento,
                                      }).ToList();

                        var type = typeof(ReporteStockConsolidado);
                        var prods = Ventas.GroupBy(r => r.IdProductoDetalle);
                        foreach (var prod in prods)
                        {
                            var first = prod.FirstOrDefault();
                            if (first == null) continue;
                            var item = new ReporteStockConsolidado();
                            item.v_IdProductoDetalle = first.IdProductoDetalle;
                            item.descripcionProducto = first.NombreProducto;
                            item.codigoProducto = first.CodigoProducto;
                            var ems = prod.GroupBy(t => t.i_IdEstablecimiento);
                            var count = 1;
                            foreach (var em in ems)
                            {
                                var head = em.FirstOrDefault();
                                if (head == null) continue;
                                var prop = type.GetProperty("cantidadAlmacen" + count);
                                prop.SetValue(item, em.Sum(t => t.PrecioVentaProducto), null);
                                prop = type.GetProperty("almacen" + count);
                                prop.SetValue(item, head.NombreEstablecimiento, null);
                                count++;
                            }
                            ListaFinal.Add(item);
                        }
                        return ListaFinal;
                        #endregion
                    }

                }
            }
            catch (Exception ex)
            {
                objOperationResult.Success = 0;
                objOperationResult.ExceptionMessage = ex.Message;
                return null;
            }

        }
        public List<ReporteMonitoreoVenta> ReporteMonitoreoVenta(string pstrv_Periodo, int pstri_IdEstablecimiento, DateTime? pstrt_FechaRegistroIni, DateTime? pstrt_FechaRegistroFin, int pintIdAlmacen, string pstrt_Orden)
        {
            //mon.IsActive = true;
            try
            {
                OperationResult objOperationResult = new OperationResult();
                List<string> Retonar = new List<string>();
                EstablecimientoBL objNodeBL = new EstablecimientoBL();
                int _intNodeId = pintIdAlmacen;

                var y = objNodeBL.GetEstablecimiento_Serie(ref objOperationResult, _intNodeId);
                string parametro;
                if (y == null)
                {

                    Retonar.Add("-1");
                    parametro = Retonar[0];
                }
                else
                {

                    Retonar.Add(y.v_Serie);
                    parametro = Retonar[0];

                }


                SAMBHSEntitiesModelWin dbContext = new SAMBHSEntitiesModelWin();

                #region Query

                //1. query para obtener toda la data filtrada por los parametros
                var query =
                        (from A in dbContext.venta
                         //from A1 in dbContext.ventadetalle 

                         //join A1 in dbContext.establecimientodetalle on A.v_SerieDocumento equals "0001" into A1_join
                         //from A1 in A1_join.DefaultIfEmpty().Distinct()
                         join B in dbContext.establecimiento on A.i_IdEstablecimiento equals B.i_IdEstablecimiento



                         where (A.i_Eliminado == 0 && A.i_IdEstado == 1) && B.i_Eliminado == 0 &&

                              A.v_Periodo == pstrv_Periodo && (A.t_FechaRegistro >= pstrt_FechaRegistroIni
                         && A.t_FechaRegistro <= pstrt_FechaRegistroFin)
                         //&& (A1.i_Almacen == 1 && A1.i_Eliminado == 0)
                         //&& A.v_SerieDocumento == parametro

                         orderby A.i_IdEstablecimiento ascending
                         select new ReporteMonitoreoVenta
                         {

                             NombreEstablecimiento = B.v_Nombre,
                             Total = A.i_IdTipoDocumentoRef.Value == (int)DocumentType.NotaCredito ? A.d_Valor.Value * -1 : A.d_Valor.Value,
                             TotalD = A.i_IdTipoDocumentoRef.Value == (int)DocumentType.NotaCredito ? A.d_Valor.Value * -1 : A.d_Valor.Value,
                             IdEstablecimiento = A.i_IdEstablecimiento.Value,
                         }).ToList();

                //2.- Query para hacer càculos en memoria 
                var query1 = (from A in query.ToList()
                              //let ValorVenta = CalcularVentaDetalle(A.IdTipoDocumento, 1, 1, A.ValorVentaDetalle, 1, A.PrecioVentaDetalle, 1, A.TipoCambio, A.IdMoneda)
                              let CalcularSumaTotal = CalcularSumaMonitoreoVenta(query, A.IdEstablecimiento).ToList()
                              select new ReporteMonitoreoVenta
                              {
                                  NombreEstablecimiento = A.NombreEstablecimiento,
                                  Total = CalcularSumaTotal[0],
                                  TotalD = CalcularSumaTotal[1],
                                  IdEstablecimiento = A.IdEstablecimiento,
                              }).ToList();


                //3.- Query para agrupary ordenar 
                var objData = new List<ReporteMonitoreoVenta>();
                objData = query1.GroupBy(x => new { x.IdEstablecimiento })
                                            .Select(group => group.First())
                                            .OrderByDescending(o => pstrt_Orden == "ValorVentaDetalle" ? o.IdEstablecimiento : o.IdEstablecimiento).ToList();


                #endregion

                return objData.ToList();
            }
            catch (Exception ex)
            {
                return null;
            }
        }


        public List<ReporteVentaClienteMensual> ReporteVentasClienteMensual(ref  OperationResult objOperationResult, DateTime FechaInicio, DateTime FechaFin, string IdCliente, int Establecimiento, int MonedaReporte, string Agrupar, int Departamento, int ConsideraDocContables, string Orden)
        {
            List<ReporteVentaClienteMensual> VentasMensuales = new List<ReporteVentaClienteMensual>();


            using (SAMBHSEntitiesModelWin dbContext = new SAMBHSEntitiesModelWin())
            {

                SystemParameterBL _objSystemParameterBL = new SystemParameterBL();
                var Ubigeo = _objSystemParameterBL.GetSystemParameterForCombo(ref objOperationResult, 112, "");
                var Ventas = (from a in dbContext.venta
                              join b in dbContext.cliente on new { cliente = a.v_IdCliente, eliminado = 0 } equals new { cliente = b.v_IdCliente, eliminado = b.i_Eliminado.Value } into b_join
                              from b in b_join.DefaultIfEmpty()
                              join c in dbContext.documento on new { doc = a.i_IdTipoDocumento.Value, eliminado = 0 } equals new { doc = c.i_CodigoDocumento, eliminado = c.i_Eliminado.Value } into c_join
                              from c in c_join.DefaultIfEmpty()
                              where a.t_FechaRegistro >= FechaInicio && a.t_FechaRegistro <= FechaFin
                              && (a.v_IdCliente == IdCliente || IdCliente == "") && a.i_IdEstablecimiento == Establecimiento
                              && (b.i_IdDepartamento == Departamento || Departamento == -1)
                              && b.v_IdCliente != "N002-CL999999999" && a.i_Eliminado == 0 && a.i_IdEstado == 1
                              select new
                              {
                                  CodigoCliente = b.v_CodCliente,
                                  NombreCliente = (b.v_ApePaterno + " " + b.v_ApeMaterno + " " + b.v_PrimerNombre + " " + b.v_RazonSocial).Trim(),
                                  Fecha = a.t_FechaRegistro.Value,
                                  iDepartamento = b.i_IdDepartamento,
                                  v_IdCliente = b.v_IdCliente,
                                  PrecioVenta = a.d_ValorVenta == null ? 0 : (c.i_UsadoDocumentoInverso != null && c.i_UsadoDocumentoInverso == 1) || (a.i_DeduccionAnticipio != null && a.i_DeduccionAnticipio == 1) ? a.i_IdMoneda == MonedaReporte ? a.d_ValorVenta * -1 : MonedaReporte == (int)Currency.Soles ? (a.d_ValorVenta * a.d_TipoCambio) * -1 : (a.d_ValorVenta / a.d_TipoCambio) * -1 : a.i_IdMoneda == MonedaReporte ? a.d_ValorVenta : MonedaReporte == (int)Currency.Soles ? a.d_ValorVenta * a.d_TipoCambio : a.d_Total / a.d_TipoCambio,
                                  IdVenta = a.v_IdVenta,
                                  DocContable = c.i_UsadoDocumentoContable ?? 0,
                              }).ToList().Select(p =>
                              {
                                  var departamento = p.iDepartamento == -1 || p.iDepartamento == null ? "" : Ubigeo.Where(l => l.Id == p.iDepartamento.ToString()) != null ? Ubigeo.Where(l => l.Id == p.iDepartamento.ToString()).FirstOrDefault().Value1 : "";
                                  return new ReporteVentaClienteMensual
                                  {

                                      CodigoCliente = p.CodigoCliente,
                                      NombreCliente = p.NombreCliente,
                                      MesRegistro = p.Fecha.Date.Month.ToString("00"),
                                      Departamento = departamento,
                                      IdCliente = p.v_IdCliente,
                                      PrecioVenta = p.PrecioVenta.Value,
                                      Grupo = Agrupar == "DEPARTAMENTO" ? departamento : "",
                                      IdVenta = p.IdVenta,
                                      DocContable = p.DocContable,

                                  };
                              }).GroupBy(l => new { l.IdCliente, l.IdVenta }).Select(a => a.Last()).ToList();

                var Guias = (from a in dbContext.guiaremision
                             join b in dbContext.cliente on new { cliente = a.v_IdCliente, eliminado = 0 } equals new { cliente = b.v_IdCliente, eliminado = b.i_Eliminado.Value } into b_join
                             from b in b_join.DefaultIfEmpty()
                             join c in dbContext.documento on new { doc = a.i_IdTipoDocumento.Value, eliminado = 0 } equals new { doc = c.i_CodigoDocumento, eliminado = c.i_Eliminado.Value } into c_join
                             from c in c_join.DefaultIfEmpty()
                             where a.t_FechaEmision >= FechaInicio && a.t_FechaEmision <= FechaFin
                             && (a.v_IdCliente == IdCliente || IdCliente == "") && a.i_IdEstablecimiento == Establecimiento
                             && (b.i_IdDepartamento == Departamento || Departamento == -1)
                             && b.v_IdCliente != "N002-CL999999999" && a.i_Eliminado == 0 && a.i_IdEstado == 1
                             && (a.i_IdTipoGuia == (int)TiposDocumentos.GuiaInterna)
                             select new
                             {
                                 CodigoCliente = b.v_CodCliente,
                                 NombreCliente = (b.v_ApePaterno + " " + b.v_ApeMaterno + " " + b.v_PrimerNombre + " " + b.v_RazonSocial).Trim(),
                                 Fecha = a.t_FechaEmision.Value,
                                 iDepartamento = b.i_IdDepartamento,
                                 v_IdCliente = b.v_IdCliente,
                                 PrecioVenta = a.d_Total == null ? 0 : a.i_IdMoneda == MonedaReporte ? a.d_Total * -1 : MonedaReporte == (int)Currency.Soles ? (a.d_Total * a.d_TipoCambio) : (a.d_Total / a.d_TipoCambio),
                                 IdVenta = a.v_IdGuiaRemision,
                                 DocContable = c.i_UsadoDocumentoContable ?? 0,
                             }).ToList().Select(p =>
                             {
                                 var departamento = p.iDepartamento == -1 || p.iDepartamento == null ? "" : Ubigeo.Where(l => l.Id == p.iDepartamento.ToString()) != null ? Ubigeo.Where(l => l.Id == p.iDepartamento.ToString()).FirstOrDefault().Value1 : "";  //  _objSystemParameterBL.GetSystemParameterForComboUbigeoKeyValueDto(ref objOperationResult, 1, 112, "").ToList().Where(a => a.Id == x.IdDepartamento.ToString()).FirstOrDefault().Value1.ToString();
                                 return new ReporteVentaClienteMensual
                                 {

                                     CodigoCliente = p.CodigoCliente,
                                     NombreCliente = p.NombreCliente,
                                     MesRegistro = p.Fecha.Date.Month.ToString("00"),
                                     Departamento = departamento,
                                     IdCliente = p.v_IdCliente,
                                     PrecioVenta = p.PrecioVenta.Value,
                                     Grupo = Agrupar == "DEPARTAMENTO" ? departamento : "",
                                     IdVenta = p.IdVenta,
                                     DocContable = p.DocContable,

                                 };
                             }).GroupBy(l => new { l.IdCliente, l.IdVenta }).Select(a => a.Last()).ToList();


                //Ventas = ConsideraDocInternos == 1 ? Ventas.Concat(Guias).ToList() : Ventas.Concat(Guias).Where(l => l.DocContable == 1).ToList();
                Ventas = ConsideraDocContables == -1 ? Ventas.Concat(Guias).ToList() : ConsideraDocContables == 1 ? Ventas.Concat(Guias).Where(l => l.DocContable == 1).ToList() : Ventas.Concat(Guias).Where(l => l.DocContable == 0).ToList();
                foreach (var itemVentas in Ventas)
                {

                    itemVentas.MesEnero = Utils.Windows.DevuelveValorRedondeado(Ventas.Where(l => l.MesRegistro == "01" && l.IdCliente == itemVentas.IdCliente).ToList().Sum(l => l.PrecioVenta), 2);
                    itemVentas.MesFebrero = Utils.Windows.DevuelveValorRedondeado(Ventas.Where(l => l.MesRegistro == "02" && l.IdCliente == itemVentas.IdCliente).ToList().Sum(l => l.PrecioVenta), 2);
                    itemVentas.MesMarzo = Utils.Windows.DevuelveValorRedondeado(Ventas.Where(l => l.MesRegistro == "03" && l.IdCliente == itemVentas.IdCliente).ToList().Sum(l => l.PrecioVenta), 2);
                    itemVentas.MesAbril = Utils.Windows.DevuelveValorRedondeado(Ventas.Where(l => l.MesRegistro == "04" && l.IdCliente == itemVentas.IdCliente).ToList().Sum(l => l.PrecioVenta), 2);
                    itemVentas.MesMayo = Utils.Windows.DevuelveValorRedondeado(Ventas.Where(l => l.MesRegistro == "05" && l.IdCliente == itemVentas.IdCliente).ToList().Sum(l => l.PrecioVenta), 2);
                    itemVentas.MesJunio = Utils.Windows.DevuelveValorRedondeado(Ventas.Where(l => l.MesRegistro == "06" && l.IdCliente == itemVentas.IdCliente).ToList().Sum(l => l.PrecioVenta), 2);
                    itemVentas.MesJulio = Utils.Windows.DevuelveValorRedondeado(Ventas.Where(l => l.MesRegistro == "07" && l.IdCliente == itemVentas.IdCliente).ToList().Sum(l => l.PrecioVenta), 2);
                    itemVentas.MesAgosto = Utils.Windows.DevuelveValorRedondeado(Ventas.Where(l => l.MesRegistro == "08" && l.IdCliente == itemVentas.IdCliente).ToList().Sum(l => l.PrecioVenta), 2);
                    itemVentas.MesSetiembre = Utils.Windows.DevuelveValorRedondeado(Ventas.Where(l => l.MesRegistro == "09" && l.IdCliente == itemVentas.IdCliente).ToList().Sum(l => l.PrecioVenta), 2);
                    itemVentas.MesOctubre = Utils.Windows.DevuelveValorRedondeado(Ventas.Where(l => l.MesRegistro == "10" && l.IdCliente == itemVentas.IdCliente).ToList().Sum(l => l.PrecioVenta), 2);
                    itemVentas.MesNoviembre = Utils.Windows.DevuelveValorRedondeado(Ventas.Where(l => l.MesRegistro == "11" && l.IdCliente == itemVentas.IdCliente).ToList().Sum(l => l.PrecioVenta), 2);
                    itemVentas.MesDiciembre = Utils.Windows.DevuelveValorRedondeado(Ventas.Where(l => l.MesRegistro == "12" && l.IdCliente == itemVentas.IdCliente).ToList().Sum(l => l.PrecioVenta), 2);
                    itemVentas.Total = itemVentas.MesEnero + itemVentas.MesFebrero + itemVentas.MesMarzo + itemVentas.MesAbril + itemVentas.MesMayo + itemVentas.MesJunio + itemVentas.MesJulio + itemVentas.MesJulio + itemVentas.MesAgosto + itemVentas.MesSetiembre + itemVentas.MesOctubre + itemVentas.MesNoviembre + itemVentas.MesDiciembre;
                    VentasMensuales.Add(itemVentas);
                }

            }

            return VentasMensuales.GroupBy(l => new { l.IdCliente }).Select(h => h.Last()).ToList().AsQueryable().OrderBy(Orden).ToList();


        }

        public List<ReporteCuadredeCaja> ReporteCuadreCaja(int pstri_IdEstablecimiento, DateTime? pstrt_FechaRegistroIni, DateTime? pstrt_FechaRegistroFin, int pintIdAlmacen, int? rolId, int systemUserId )
        {

            try
            {
                OperationResult objOperationResult = new OperationResult();
                using (var dbContext = new SAMBHSEntitiesModelWin())
                {
                    //var establecimiento =
                    //    dbContext.establecimientoalmacen.Where(a => a.i_IdAlmacen == pintIdAlmacen && a.i_Eliminado == 0)
                    //        .Select(b => b.i_IdEstablecimiento.Value)
                    //        .FirstOrDefault();

                    if (rolId == 16)
                    {
                        #region Query

                        //1. query para obtener toda la data filtrada por los parametros
                        var query =
                        (from A in dbContext.venta
                         join B in dbContext.cobranzadetalle on new { A.v_IdVenta, eliminado = 0 } equals
                         new { B.v_IdVenta, eliminado = B.i_Eliminado.Value } into B_join
                         from B in B_join.DefaultIfEmpty()
                         join C in dbContext.cobranza on new { B.v_IdCobranza, eliminado = 0 } equals
                         new { C.v_IdCobranza, eliminado = C.i_Eliminado.Value } into C_join
                         from C in C_join.DefaultIfEmpty()
                         join D in dbContext.datahierarchy on
                         new { Med = B.i_IdFormaPago.Value, eliminado = 0, Grupo = 46 } equals
                         new { Med = D.i_ItemId, eliminado = D.i_IsDeleted.Value, Grupo = D.i_GroupId } into D_join
                         from D in D_join.DefaultIfEmpty()
                         join E in dbContext.documento on new { Doc = A.i_IdTipoDocumento.Value, eliminado = 0 } equals
                         new { Doc = E.i_CodigoDocumento, eliminado = E.i_Eliminado.Value } into E_join
                         from E in E_join.DefaultIfEmpty()
                         join F in dbContext.documento on new { DocRef = B.i_IdTipoDocumentoRef.Value, eliminado = 0 }
                         equals new { DocRef = F.i_CodigoDocumento, eliminado = F.i_Eliminado.Value } into F_join
                         from F in F_join.DefaultIfEmpty()

                         where (A.i_Eliminado == 0 && A.i_IdEstado == 1)
                               && (A.t_FechaRegistro >= pstrt_FechaRegistroIni
                                   && A.t_FechaRegistro <= pstrt_FechaRegistroFin)
                               && A.i_IdEstablecimiento == pstri_IdEstablecimiento  // Globals.ClientSession.i_IdEstablecimiento.Value

                         orderby D.v_Value1 ascending

                         select new ReporteCuadredeCaja
                         {
                             Documento =
                             (E.v_Siglas.Trim() + " " + A.v_SerieDocumento.Trim() + "-" +
                              A.v_CorrelativoDocumento.Trim()),
                             CondicionPago = D == null ? "NO PAGADO" : D.v_Value1,
                             i_IdTipoDocumento =  A.i_IdTipoDocumento,
                             TotalS = B == null ? 0 : F.i_UsadoDocumentoInverso.Value == 1 ? 0 : A.i_IdTipoDocumento == 500 || A.i_IdTipoDocumento == 502 || A.i_IdTipoDocumento == 504 || A.i_IdTipoDocumento == 509 || A.i_IdTipoDocumento == 510 || A.i_IdTipoDocumento == 511 ? -1 * (B.d_ImporteSoles.Value) : B.d_ImporteSoles.Value, // B.d_ImporteSoles.Value,
                             TotalGS = 0,
                             i_ClienteEsAgente = A.i_ClienteEsAgente.Value
                         }).ToList();

                        #endregion

                        return query;
                    }
                    else
                    {
                        #region Query

                        var query =
                        (from A in dbContext.venta
                         join B in dbContext.cobranzadetalle on new { A.v_IdVenta, eliminado = 0 } equals
                         new { B.v_IdVenta, eliminado = B.i_Eliminado.Value } into B_join
                         from B in B_join.DefaultIfEmpty()
                         join C in dbContext.cobranza on new { B.v_IdCobranza, eliminado = 0 } equals
                         new { C.v_IdCobranza, eliminado = C.i_Eliminado.Value } into C_join
                         from C in C_join.DefaultIfEmpty()
                         join D in dbContext.datahierarchy on
                         new { Med = B.i_IdFormaPago.Value, eliminado = 0, Grupo = 46 } equals
                         new { Med = D.i_ItemId, eliminado = D.i_IsDeleted.Value, Grupo = D.i_GroupId } into D_join
                         from D in D_join.DefaultIfEmpty()
                         join E in dbContext.documento on new { Doc = A.i_IdTipoDocumento.Value, eliminado = 0 } equals
                         new { Doc = E.i_CodigoDocumento, eliminado = E.i_Eliminado.Value } into E_join
                         from E in E_join.DefaultIfEmpty()
                         join F in dbContext.documento on new { DocRef = B.i_IdTipoDocumentoRef.Value, eliminado = 0 }
                         equals new { DocRef = F.i_CodigoDocumento, eliminado = F.i_Eliminado.Value } into F_join
                         from F in F_join.DefaultIfEmpty()

                         where (A.i_Eliminado == 0 && A.i_IdEstado == 1)
                               && (A.t_FechaRegistro >= pstrt_FechaRegistroIni
                                   && A.t_FechaRegistro <= pstrt_FechaRegistroFin)
                                   && A.i_InsertaIdUsuario == systemUserId
                               && A.i_IdEstablecimiento == pstri_IdEstablecimiento  // Globals.ClientSession.i_IdEstablecimiento.Value

                         orderby D.v_Value1 ascending

                         select new ReporteCuadredeCaja
                         {
                             Documento =
                             (E.v_Siglas.Trim() + " " + A.v_SerieDocumento.Trim() + "-" +
                              A.v_CorrelativoDocumento.Trim()),
                             CondicionPago = D == null ? "NO PAGADO" : D.v_Value1,
                            
                             i_IdTipoDocumento = A.i_IdTipoDocumento,
                             TotalS = B == null ? 0 : F.i_UsadoDocumentoInverso.Value == 1 ? 0 : A.i_IdTipoDocumento == 500 || A.i_IdTipoDocumento == 502 || A.i_IdTipoDocumento == 504 || A.i_IdTipoDocumento == 509 || A.i_IdTipoDocumento == 510 || A.i_IdTipoDocumento == 511 ? -1 * (B.d_ImporteSoles.Value) : B.d_ImporteSoles.Value, // B.d_ImporteSoles.Value,
                             i_ClienteEsAgente = A.i_ClienteEsAgente.Value,
                             TotalGS = 0,
                         }).ToList();

                        #endregion

                        return query;
                    }
                  
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        public List<CuadreCajaModeloUno> ReporteCuadreCajaModeloUno(int pstri_IdEstablecimiento, DateTime? pstrt_FechaRegistroIni, DateTime? pstrt_FechaRegistroFin, int pintIdAlmacen, int? rolId, int systemUserId)
        {
            try
            {
                 OperationResult objOperationResult = new OperationResult();
                 using (var dbContext = new SAMBHSEntitiesModelWin())
                 {
                     var query = new List<CuadreCajaModeloUno>();

                     if (rolId == 16)
                     {
                         query =
                        (from A in dbContext.venta
                         join E in dbContext.documento on new { Doc = A.i_IdTipoDocumento.Value, eliminado = 0 } equals
                            new { Doc = E.i_CodigoDocumento, eliminado = E.i_Eliminado.Value } into E_join
                            from E in E_join.DefaultIfEmpty()
                         where (A.i_Eliminado == 0 && A.i_IdEstado == 1)
                               && (A.t_FechaRegistro >= pstrt_FechaRegistroIni
                                   && A.t_FechaRegistro <= pstrt_FechaRegistroFin)
                               && A.i_IdEstablecimiento == pstri_IdEstablecimiento

                         select new CuadreCajaModeloUno
                         {
                            i_TipoDocumento = A.i_IdTipoDocumento,
                             NroDocumento =
                             (E.v_Siglas.Trim() + " " + A.v_SerieDocumento.Trim() + "-" +
                              A.v_CorrelativoDocumento.Trim()),
                             Descripcion = A.v_Concepto,
                              Monto = A.d_Total,
                             i_ClienteEsAgente = A.i_ClienteEsAgente.Value
                         }).ToList();
                     }
                     else
                     {
                         query =
                       (from A in dbContext.venta
                        join E in dbContext.documento on new { Doc = A.i_IdTipoDocumento.Value, eliminado = 0 } equals
                           new { Doc = E.i_CodigoDocumento, eliminado = E.i_Eliminado.Value } into E_join
                        from E in E_join.DefaultIfEmpty()
                        where (A.i_Eliminado == 0 && A.i_IdEstado == 1)
                              && (A.t_FechaRegistro >= pstrt_FechaRegistroIni
                                  && A.t_FechaRegistro <= pstrt_FechaRegistroFin)
                              && A.i_IdEstablecimiento == pstri_IdEstablecimiento
                               && A.i_InsertaIdUsuario == systemUserId

                        select new CuadreCajaModeloUno
                        {
                            i_TipoDocumento = A.i_IdTipoDocumento,
                            NroDocumento =
                            (E.v_Siglas.Trim() + " " + A.v_SerieDocumento.Trim() + "-" +
                             A.v_CorrelativoDocumento.Trim()),
                             Descripcion = A.v_Concepto,
                            Monto = A.d_Total,
                            i_ClienteEsAgente = A.i_ClienteEsAgente.Value
                        }).ToList();

                     }

                     var result = new List<CuadreCajaModeloUno>();

                     var egresos = query.FindAll(p => p.i_TipoDocumento == 500 || p.i_TipoDocumento == 502).ToList();                    
                     var countEgresos = 1;
                     foreach (var egreso in egresos)
                     {
                         var oCuadreCajaModeloUno = new CuadreCajaModeloUno();
                         oCuadreCajaModeloUno.Tipo = "EGRESO";
                         oCuadreCajaModeloUno.Item = countEgresos.ToString();
                         oCuadreCajaModeloUno.NroDocumento = egreso.NroDocumento;
                         oCuadreCajaModeloUno.Descripcion = egreso.Descripcion;
                         oCuadreCajaModeloUno.Monto = egreso.Monto;
                         countEgresos++;

                         result.Add(oCuadreCajaModeloUno);
                     }

                     var ingresos = query.FindAll(p => p.i_TipoDocumento != 500 || p.i_TipoDocumento != 502).ToList();
                     var countIngreso = 1;
                     foreach (var ingreso in ingresos)
                     {
                         var oCuadreCajaModeloUno = new CuadreCajaModeloUno();
                         oCuadreCajaModeloUno.Tipo = "INGRESO";
                         oCuadreCajaModeloUno.Item = countIngreso.ToString();
                         oCuadreCajaModeloUno.NroDocumento = ingreso.NroDocumento;
                         oCuadreCajaModeloUno.Descripcion = ingreso.Descripcion;
                         oCuadreCajaModeloUno.Monto = ingreso.Monto;
                         countIngreso++;

                         result.Add(oCuadreCajaModeloUno);
                     }

                     return result;

                 }

               
            }
            catch (Exception ex)
            {                
                throw;
            }
        }

        public class CuadreCajaModeloUno
        {
            public string Item { get; set; }
            public string Tipo { get; set; }
            public string NroDocumento { get; set; }
            public string Descripcion { get; set; }
            public decimal? Monto { get; set; }
            public int? i_ClienteEsAgente { get; set; }
            public int? i_TipoDocumento { get; set; }
        }
        public List<ReporteCuadredeCaja> ReporteCuadreCajaResumen(int pstri_IdEstablecimiento, DateTime? pstrt_FechaRegistroIni, DateTime? pstrt_FechaRegistroFin, int pintIdAlmacen)
        {
            //mon.IsActive = true;
            try
            {
                OperationResult objOperationResult = new OperationResult();
                using (var dbContext = new SAMBHSEntitiesModelWin())
                {
                    var establecimiento =
                        dbContext.establecimientoalmacen.Where(a => a.i_IdAlmacen == pintIdAlmacen && a.i_Eliminado == 0)
                            .Select(b => b.i_IdEstablecimiento.Value)
                            .FirstOrDefault();
                    string pstrt_Orden = "";

                    #region Query

                    //1. query para obtener toda la data filtrada por los parametros
                    var query =
                    (from A in dbContext.venta
                     join B in dbContext.cobranzadetalle on new { A.v_IdVenta, eliminado = 0 } equals
                     new { B.v_IdVenta, eliminado = B.i_Eliminado.Value } into B_join
                     from B in B_join.DefaultIfEmpty()
                     join C in dbContext.cobranza on new { B.v_IdCobranza, eliminado = 0 } equals
                     new { C.v_IdCobranza, eliminado = C.i_Eliminado.Value } into C_join
                     from C in C_join.DefaultIfEmpty()
                     join D in dbContext.datahierarchy on
                     new { Med = B.i_IdFormaPago.Value, eliminado = 0, Grupo = 46 } equals
                     new { Med = D.i_ItemId, eliminado = D.i_IsDeleted.Value, Grupo = D.i_GroupId } into D_join
                     from D in D_join.DefaultIfEmpty()
                     join E in dbContext.documento on new { Doc = A.i_IdTipoDocumento.Value, eliminado = 0 } equals
                     new { Doc = E.i_CodigoDocumento, eliminado = E.i_Eliminado.Value } into E_join
                     from E in E_join.DefaultIfEmpty()
                     join F in dbContext.documento on new { DocRef = B.i_IdTipoDocumentoRef.Value, eliminado = 0 }
                     equals new { DocRef = F.i_CodigoDocumento, eliminado = F.i_Eliminado.Value } into F_join
                     from F in F_join.DefaultIfEmpty()

                     where (A.i_Eliminado == 0 && A.i_IdEstado == 1)
                           && (A.t_FechaRegistro >= pstrt_FechaRegistroIni
                               && A.t_FechaRegistro <= pstrt_FechaRegistroFin)
                           && A.i_IdEstablecimiento == Globals.ClientSession.i_IdEstablecimiento.Value

                     orderby D.v_Value1 ascending

                     select new ReporteCuadredeCaja
                     {
                         Documento =
                         (E.v_Siglas.Trim() + " " + A.v_SerieDocumento.Trim() + "-" +
                          A.v_CorrelativoDocumento.Trim()),
                         CondicionPago = D == null ? "NO PAGADO" : D.v_Value1,
                         TotalS =
                             B == null
                                 ? 0
                                 : F.i_UsadoDocumentoInverso.Value == 1
                                     ? B.d_ImporteSoles == null ? 0 : B.d_ImporteSoles.Value * -1
                                     : B.d_ImporteSoles.Value,
                         //TotalD = B == null ? 0 : F.i_UsadoDocumentoInverso.Value == 1 ? B.d_ImporteDolares == null ? 0 : B.d_ImporteDolares.Value * -1 : B.d_ImporteDolares.Value,
                         TotalGS = 0,
                     }).ToList();

                    //2.- Query para agrupary ordenar 
                    var objData = new List<ReporteCuadredeCaja>();
                    objData = query.GroupBy(x => new { x.CondicionPago })
                        .Select(group => group.First())
                        .OrderByDescending(o => pstrt_Orden == "ValorVentaDetalle" ? o.CondicionPago : o.CondicionPago)
                        .ToList();


                    //3.- Query para hacer càculos en memoria 
                    var query1 = (from A in objData

                                  select new ReporteCuadredeCaja
                                  {
                                      Documento = A.Documento,
                                      CondicionPago = A.CondicionPago,
                                      TotalS = query.Where(x => x.CondicionPago == A.CondicionPago).Sum(x => x.TotalS),
                                      TotalD = query.Where(x => x.CondicionPago == A.CondicionPago).Sum(x => x.TotalD),
                                      TotalGS = query.Where(x => x.CondicionPago == A.CondicionPago).Sum(x => x.TotalGS),
                                  }).ToList();



                    #endregion

                    return query1;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public List<ReporteRegistroVentaAlmacenResumen> ReporteVentaAlmacenResumen(int pstri_IdEstablecimiento, DateTime? pstrt_FechaRegistroIni, DateTime? pstrt_FechaRegistroFin, int pintIdAlmacen, string pstrt_Orden)
        {
            //mon.IsActive = true;
            try
            {
                OperationResult objOperationResult = new OperationResult();
                List<string> Retonar = new List<string>();
                EstablecimientoBL objNodeBL = new EstablecimientoBL();
                int _intNodeId = pintIdAlmacen;
                using (SAMBHSEntitiesModelWin dbContext = new SAMBHSEntitiesModelWin())
                {
                    var establecimiento = dbContext.establecimientoalmacen.Where(x => x.i_IdAlmacen == pintIdAlmacen && x.i_Eliminado == 0).Select(x => x.i_IdEstablecimiento.Value).FirstOrDefault();

                    #region Query

                    //1. query para obtener toda la data filtrada por los parametros
                    var query =
                            (from A in dbContext.venta
                             join B in dbContext.cobranzadetalle on new { A.v_IdVenta, eliminado = 0 } equals new { B.v_IdVenta, eliminado = B.i_Eliminado.Value } into B_join
                             from B in B_join.DefaultIfEmpty()
                             join C in dbContext.cobranza on new { B.v_IdCobranza, eliminado = 0 } equals new { C.v_IdCobranza, eliminado = C.i_Eliminado.Value } into C_join
                             from C in C_join.DefaultIfEmpty()
                             join D in dbContext.datahierarchy on new { Med = B.i_IdFormaPago.Value, eliminado = 0, Grupo = 46 } equals new { Med = D.i_ItemId, eliminado = D.i_IsDeleted.Value, Grupo = D.i_GroupId } into D_join
                             from D in D_join.DefaultIfEmpty()
                             join E in dbContext.documento on new { tipodoc = A.i_IdTipoDocumento.Value, eliminado = 0 } equals new { tipodoc = E.i_CodigoDocumento, eliminado = E.i_Eliminado.Value } into E_join
                             from E in E_join.DefaultIfEmpty()
                             join I in dbContext.establecimientoalmacen on new { Establecimiento = A.i_IdEstablecimiento.Value, eliminado = 0 } equals new { Establecimiento = I.i_IdEstablecimiento.Value, eliminado = I.i_Eliminado.Value } into I_join
                             from I in I_join.DefaultIfEmpty()
                             join J in dbContext.establecimientodetalle on new { TipoDoc = A.i_IdTipoDocumento.Value, eliminado = 0, Serie = A.v_SerieDocumento } equals new { TipoDoc = J.i_IdTipoDocumento.Value, eliminado = J.i_Eliminado.Value, Serie = J.v_Serie } into J_join
                             from J in J_join.DefaultIfEmpty()
                             join K in dbContext.establecimiento on new { est = I.i_IdEstablecimiento.Value, eliminado = 0 } equals new { est = K.i_IdEstablecimiento, eliminado = K.i_Eliminado.Value } into K_join
                             from K in K_join.DefaultIfEmpty()
                             join L in dbContext.almacen on new { alm = I.i_IdAlmacen.Value, eliminado = 0 } equals new { alm = L.i_IdAlmacen, eliminado = L.i_Eliminado.Value } into L_join
                             from L in L_join.DefaultIfEmpty()
                             join M in dbContext.documento on new { DocRef = B.i_IdTipoDocumentoRef.Value, eliminado = 0 } equals new { DocRef = M.i_CodigoDocumento, eliminado = M.i_Eliminado.Value } into M_join
                             from M in M_join.DefaultIfEmpty()
                             where (A.i_Eliminado == 0 && A.i_IdEstado == 1)
                             && (A.t_FechaRegistro >= pstrt_FechaRegistroIni
                             && A.t_FechaRegistro <= pstrt_FechaRegistroFin)
                            && I.i_IdAlmacen == pintIdAlmacen
                           && A.i_IdEstablecimiento == Globals.ClientSession.i_IdEstablecimiento.Value

                             select new ReporteRegistroVentaAlmacenResumen
                             {
                                 Documento = "",
                                 CondicionPago = D.v_Value1,
                                 TotalS = B == null ? 0 : A.i_IdMoneda == (int)Currency.Soles ? M.i_UsadoDocumentoInverso == 1 ? B.d_ImporteSoles.Value * -1 : B.d_ImporteSoles.Value : M.i_UsadoDocumentoInverso == 1 ? (B.d_ImporteSoles.Value * -1) * A.d_TipoCambio.Value : B.d_ImporteSoles.Value * A.d_TipoCambio.Value,
                                 // TotalD = B == null ? 0 : E.i_UsadoDocumentoInverso == 1 ? B.d_ImporteDolares.Value * -1 : B.d_ImporteDolares.Value,
                                 Establecimiento = K.v_Nombre,
                                 Almacen = L.v_Nombre,
                                 v_SerieDocumento = A.v_SerieDocumento,
                                 TipoDocumento = A.i_IdTipoDocumento.Value,

                             }).ToList();

                    //3.- Query para agrupary ordenar 
                    var objData = new List<ReporteRegistroVentaAlmacenResumen>();
                    objData = query.GroupBy(x => new { x.CondicionPago })
                                                .Select(group => group.First())
                                                .OrderByDescending(o => pstrt_Orden == "ValorVentaDetalle" ? o.CondicionPago : o.CondicionPago).ToList();


                    //2.- Query para hacer càculos en memoria 
                    var query1 = (from A in objData


                                  select new ReporteRegistroVentaAlmacenResumen
                                  {
                                      Documento = A.Documento,
                                      CondicionPago = A.CondicionPago,
                                      TotalS = query.Where(x => x.CondicionPago == A.CondicionPago).Sum(x => x.TotalS),
                                      TotalD = 0,
                                      Establecimiento = A.Establecimiento,
                                      Almacen = A.Almacen,
                                  }).ToList();


                    #endregion

                    return query1;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public List<ReporteRegistroVentaAlmacenResumen> ReporteVentaAlmacenResumenDocumentos(int pstri_IdEstablecimiento, DateTime? pstrt_FechaRegistroIni, DateTime? pstrt_FechaRegistroFin, int pintIdAlmacen, string pstrt_Orden)
        {
            //mon.IsActive = true;
            try
            {
                OperationResult objOperationResult = new OperationResult();
                List<string> Retonar = new List<string>();
                EstablecimientoBL objNodeBL = new EstablecimientoBL();
                int _intNodeId = pintIdAlmacen;
                using (SAMBHSEntitiesModelWin dbContext = new SAMBHSEntitiesModelWin())
                {
                    var establecimiento = dbContext.establecimientoalmacen.Where(x => x.i_IdAlmacen == pintIdAlmacen && x.i_Eliminado == 0).Select(x => x.i_IdEstablecimiento.Value).FirstOrDefault();

                    #region Query

                    //1. query para obtener toda la data filtrada por los parametros
                    var query =
                            (from A in dbContext.venta
                             join B in dbContext.cobranzadetalle on new { A.v_IdVenta, eliminado = 0 } equals new { B.v_IdVenta, eliminado = B.i_Eliminado.Value } into B_join
                             from B in B_join.DefaultIfEmpty()
                             join C in dbContext.cobranza on new { B.v_IdCobranza, eliminado = 0 } equals new { C.v_IdCobranza, eliminado = C.i_Eliminado.Value } into C_join
                             from C in C_join.DefaultIfEmpty()
                             join D in dbContext.datahierarchy on new { Item = C.i_IdMedioPago.Value, eliminado = 0, Grupo = 46 } equals new { Item = D.i_ItemId, eliminado = D.i_IsDeleted.Value, Grupo = D.i_GroupId } into D_join
                             from D in D_join.DefaultIfEmpty()
                             join E in dbContext.documento on new { tipodoc = A.i_IdTipoDocumento.Value, eliminado = 0 } equals new { tipodoc = E.i_CodigoDocumento, eliminado = E.i_Eliminado.Value } into E_join
                             from E in E_join.DefaultIfEmpty()
                             join I in dbContext.establecimientoalmacen on new { Establecimiento = A.i_IdEstablecimiento.Value, eliminado = 0 } equals new { Establecimiento = I.i_IdEstablecimiento.Value, eliminado = I.i_Eliminado.Value } into I_join
                             from I in I_join.DefaultIfEmpty()
                             join J in dbContext.establecimientodetalle on new { TipoDoc = A.i_IdTipoDocumento.Value, eliminado = 0, Serie = A.v_SerieDocumento } equals new { TipoDoc = J.i_IdTipoDocumento.Value, eliminado = J.i_Eliminado.Value, Serie = J.v_Serie } into J_join
                             from J in J_join.DefaultIfEmpty()
                             join K in dbContext.establecimiento on new { est = I.i_IdEstablecimiento.Value, eliminado = 0 } equals new { est = K.i_IdEstablecimiento, eliminado = K.i_Eliminado.Value } into K_join
                             from K in K_join.DefaultIfEmpty()
                             join L in dbContext.almacen on new { alm = I.i_IdAlmacen.Value, eliminado = 0 } equals new { alm = L.i_IdAlmacen, eliminado = L.i_Eliminado.Value } into L_join
                             from L in L_join.DefaultIfEmpty()
                             join M in dbContext.documento on new { DocRef = B.i_IdTipoDocumentoRef.Value, eliminado = 0 } equals new { DocRef = M.i_CodigoDocumento, eliminado = M.i_Eliminado.Value } into M_join
                             from M in M_join.DefaultIfEmpty()
                             where (A.i_Eliminado == 0 && A.i_IdEstado == 1)
                             && (A.t_FechaRegistro >= pstrt_FechaRegistroIni
                             && A.t_FechaRegistro <= pstrt_FechaRegistroFin)
                            && I.i_IdAlmacen == pintIdAlmacen
                         && A.i_IdEstablecimiento == Globals.ClientSession.i_IdEstablecimiento.Value

                             select new ReporteRegistroVentaAlmacenResumen
                             {
                                 Documento = E.v_Siglas,
                                 CondicionPago = D.v_Value1,

                                 TotalS = B == null ? 0 : A.i_IdMoneda == (int)Currency.Soles ? M.i_UsadoDocumentoInverso == 1 ? B.d_ImporteSoles.Value * -1 : B.d_ImporteSoles.Value : M.i_UsadoDocumentoInverso == 1 ? (B.d_ImporteSoles.Value * -1) * A.d_TipoCambio.Value : B.d_ImporteSoles.Value * A.d_TipoCambio.Value,
                                 // TotalS = B == null ? 0 : B.i_IdTipoDocumentoRef.Value == (int)DocumentType.NotaCredito ? B.d_ImporteSoles.Value * -1 : B.d_ImporteSoles.Value,
                                 //TotalD = B == null ? 0 : B.i_IdTipoDocumentoRef.Value == (int)DocumentType.NotaCredito ? B.d_ImporteDolares.Value * -1 : B.d_ImporteDolares.Value,
                                 Establecimiento = K.v_Nombre,
                                 Almacen = L.v_Nombre,
                                 v_SerieDocumento = A.v_SerieDocumento,
                                 TipoDocumento = A.i_IdTipoDocumento.Value,

                             }).ToList();

                    //2.- Query para hacer càculos en memoria 

                    var xxxx = query.Where(x => x.TipoDocumento == (int)TiposDocumentos.NotaCredito).ToList();

                    var objData = new List<ReporteRegistroVentaAlmacenResumen>();
                    objData = query.GroupBy(x => new { x.Documento })
                                                .Select(group => group.First())
                                                .OrderByDescending(o => pstrt_Orden == "ValorVentaDetalle" ? o.CondicionPago : o.CondicionPago).ToList();





                    //3.- Query para agrupary ordenar 
                    var query1 = (from A in objData
                                  select new ReporteRegistroVentaAlmacenResumen
                                  {
                                      Documento = A.Documento,
                                      CondicionPago = A.CondicionPago,
                                      TotalS = query.Where(x => x.Documento == A.Documento).Sum(x => x.TotalS),
                                      TotalD = 0,
                                      Establecimiento = A.Establecimiento,
                                      Almacen = A.Almacen,
                                  }).ToList();


                    #endregion

                    return query1.Where(x => x.TotalS != 0).ToList();
                    // return query1.ToList();
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public List<ReporteRegistroVentaAnaliticoDAOT> ReporteRegistroVentaAnaliticoDAOT(ref OperationResult objOperationResult, int pstri_IdEstablecimiento, DateTime? pstrt_FechaRegistroIni, DateTime? pstrt_FechaRegistroFin, string pstrt_IdCliente, int pintTipoVenta, decimal Tope, string pstrt_Orden)
        {
            //mon.IsActive = true;
            try
            {
                objOperationResult.Success = 1;

                SAMBHSEntitiesModelWin dbContext = new SAMBHSEntitiesModelWin();
                // pstrt_Orden = "NombreCliente";
                #region Query
                var query =
                        (from A in dbContext.venta
                         join B in dbContext.cliente on new { IdCliente = A.v_IdCliente, eliminado = 0 } equals new { IdCliente = B.v_IdCliente, eliminado = B.i_Eliminado.Value } into B_join
                         from B in B_join.DefaultIfEmpty()
                         join C in dbContext.documento on new { TipoDoc = A.i_IdTipoDocumento.Value, eliminado = 0 } equals new { TipoDoc = C.i_CodigoDocumento, eliminado = C.i_Eliminado.Value } into C_join
                         from C in C_join.DefaultIfEmpty()
                         join D in dbContext.vendedor on new { IdVendedor = A.v_IdVendedor, eliminado = 0 } equals new { IdVendedor = D.v_IdVendedor, eliminado = D.i_Eliminado.Value } into D_join
                         from D in D_join.DefaultIfEmpty()

                         join F in dbContext.datahierarchy on new { IdMon = A.i_IdMoneda.Value, eliminado = 0, Grupo = 18 } equals new { IdMon = F.i_ItemId, eliminado = F.i_IsDeleted.Value, Grupo = F.i_GroupId } into F_join

                         from F in F_join.DefaultIfEmpty()

                         where
                         (A.i_Eliminado == 0 && A.i_IdEstado == 1)
                         && (A.t_FechaRegistro >= pstrt_FechaRegistroIni
                         && A.t_FechaRegistro <= pstrt_FechaRegistroFin)
                         && (B.v_NroDocIdentificacion == pstrt_IdCliente || pstrt_IdCliente == "")
                         && (A.i_IdTipoVenta == pintTipoVenta || pintTipoVenta == -1)
                         && C.i_UsadoDocumentoContable == 1
                         //&& A.i_IdEstablecimiento == Globals.ClientSession.i_IdEstablecimiento.Value
                         select new ReporteRegistroVentaAnaliticoDAOT
                         {

                             Correlativo = C.v_Siglas.Trim() + "-" + A.v_Mes + A.v_Correlativo,
                             NombreCliente = A.v_NombreClienteTemporal == "" ? (B.v_ApePaterno + " " + B.v_ApeMaterno + " " + B.v_PrimerNombre + " " + B.v_SegundoNombre + " " + B.v_RazonSocial).Trim() : (B.v_ApePaterno + " " + B.v_ApeMaterno + " " + B.v_PrimerNombre + " " + B.v_SegundoNombre + " " + A.v_NombreClienteTemporal).Trim(),
                             NroDocCliente = B.v_NroDocIdentificacion,
                             FechaRegistro = A.t_FechaRegistro.Value,
                             TipoDocumento = C.v_Siglas,
                             IdTipoDocumento = A.i_IdTipoDocumento.Value,
                             Documento = (A.v_SerieDocumento.Trim() + "-" + A.v_CorrelativoDocumento.Trim()),
                             ValorVentaS = A.d_ValorVenta.Value,
                             ValorVentaD = 0,
                             IGVS = A.d_IGV.Value,
                             IGVD = 0,
                             TOTALS = A.d_Total.Value,
                             TOTALD = 0,
                             NombreMoneda = F.v_Value2,
                             IdMoneda = A.i_IdMoneda.Value,
                             NombreClienteAux = (B.i_Eliminado == 1 || B.i_Eliminado == null) ? " ****CLIENTE NO EXISTE*****" : A.v_NombreClienteTemporal == "" ? ("CLIENTE : " + " " + B.v_CodCliente.Trim() + " / " + B.v_ApePaterno.Trim() + " " + B.v_ApeMaterno.Trim() + " " + B.v_PrimerNombre.Trim() + " " + B.v_SegundoNombre.Trim() + " " + B.v_RazonSocial.Trim() + " / " + "" + B.v_NroDocIdentificacion).Trim() : ("CLIENTE : " + " " + B.v_CodCliente.Trim() + " / " + B.v_ApePaterno.Trim() + " " + B.v_ApeMaterno.Trim() + " " + B.v_PrimerNombre.Trim() + " " + B.v_SegundoNombre.Trim() + " " + A.v_NombreClienteTemporal.Trim() + " / " + B.v_NroDocIdentificacion.Trim()).Trim(),
                             TipoCambio = A.d_TipoCambio.Value,
                             NroDocDeclarado = A.v_Mes.Trim() + A.v_Correlativo,

                         });

                query = query.OrderBy(pstrt_Orden);

                var query1 = (from A in query.ToList()

                              let ValorVenta = CalcularVenta(A.IdTipoDocumento, A.ValorVentaS, A.IGVS, A.TOTALS, 0, A.TipoCambio, A.IdMoneda)
                              select new ReporteRegistroVentaAnaliticoDAOT
                              {
                                  Correlativo = A.Correlativo,
                                  NombreCliente = A.NombreCliente,
                                  NroDocCliente = A.NroDocCliente,
                                  FechaRegistro = A.FechaRegistro,
                                  TipoDocumento = A.TipoDocumento,
                                  IdTipoDocumento = A.IdTipoDocumento,
                                  Documento = A.Documento,
                                  ValorVentaS = ValorVenta.ValorVentaSoles,
                                  ValorVentaD = ValorVenta.ValorVentaDolares,
                                  IGVS = ValorVenta.IgvSoles,
                                  IGVD = ValorVenta.IgvDolares,
                                  TOTALS = ValorVenta.TotalSoles,
                                  TOTALD = ValorVenta.TotalDolares,
                                  NombreMoneda = A.NombreMoneda,
                                  IdMoneda = A.IdMoneda,
                                  NombreClienteAux = A.NombreClienteAux,

                              });

                #endregion
                if (Tope > 0)
                {
                    return query1.Where(o => o.ValorVentaS >= Tope).ToList();

                }
                else
                {

                    return query1.ToList();
                }
            }
            catch (Exception ex)
            {
                objOperationResult.Success = 0;
                return null;
            }
        }

        public List<ReporteRegistroVentaResumenDAOT> ReporteRegistroVentaResumenDAOT(ref OperationResult objOperationResult, DateTime? pstrt_FechaRegistroIni, DateTime? pstrt_FechaRegistroFin, int pintMonedaId, string NroDocCliente, int pintTipoVenta, string Ordenar, decimal Tope)
        {
            //mon.IsActive = true;
            try
            {
                objOperationResult.Success = 1;

                List<ReporteRegistroVentaResumenDAOT> ListaReporte = new List<ReporteRegistroVentaResumenDAOT>();
                SAMBHSEntitiesModelWin dbContext = new SAMBHSEntitiesModelWin();
                //pstrt_Orden = "NombreCliente";
                #region Query
                var query =
                        (from A in dbContext.venta
                         join B in dbContext.cliente on new { cliente = A.v_IdCliente, eliminado = 0, Flag = "C" } equals new { cliente = B.v_IdCliente, eliminado = B.i_Eliminado.Value, Flag = B.v_FlagPantalla } into B_join
                         from B in B_join.DefaultIfEmpty()
                         join C in dbContext.documento on new { doc = A.i_IdTipoDocumento.Value, eliminado = 0 } equals new { doc = C.i_CodigoDocumento, eliminado = C.i_Eliminado.Value } into C_join
                         from C in C_join.DefaultIfEmpty()
                         join D in dbContext.vendedor on new { A.v_IdVendedor, eliminado = 0 } equals new { D.v_IdVendedor, eliminado = D.i_Eliminado.Value } into D_join
                         from D in D_join.DefaultIfEmpty()
                         join E in dbContext.documento on new { tipo = A.i_IdTipoDocumento.Value, eliminado = 0 } equals new { tipo = E.i_CodigoDocumento, eliminado = E.i_Eliminado.Value } into E_join
                         from E in E_join.DefaultIfEmpty()
                         join F in dbContext.datahierarchy on new { mon = A.i_IdMoneda.Value, Grupo = 18, eliminado = 0 } equals new { mon = F.i_ItemId, Grupo = F.i_GroupId, eliminado = F.i_IsDeleted.Value } into F_join
                         from F in F_join.DefaultIfEmpty()

                         where F.i_GroupId == 18
                         && (A.i_Eliminado == 0 && A.i_IdEstado == 1)
                         && (A.t_FechaRegistro >= pstrt_FechaRegistroIni
                         && A.t_FechaRegistro <= pstrt_FechaRegistroFin)
                         && (B.v_NroDocIdentificacion.Trim() == NroDocCliente || NroDocCliente == "" || B.v_NroDocIdentificacion.Trim() == NroDocCliente)
                         && (A.i_IdTipoVenta == pintTipoVenta || pintTipoVenta == -1) && E.i_UsadoDocumentoContable == 1


                         select new ReporteRegistroVentaResumenDAOT
                         {
                             Correlativo = C.v_Siglas.Trim() + "-" + A.v_Mes + A.v_Correlativo,
                             IdCliente = B.v_CodCliente.Trim(),
                             NombreCliente = A.v_NombreClienteTemporal == "" ? (B.v_ApePaterno + " " + B.v_ApeMaterno + " " + B.v_PrimerNombre + " " + B.v_SegundoNombre + " " + B.v_RazonSocial).Trim() : (B.v_ApePaterno + " " + B.v_ApeMaterno + " " + B.v_PrimerNombre + " " + B.v_SegundoNombre + " " + A.v_NombreClienteTemporal).Trim(),
                             NroDocCliente = B.v_NroDocIdentificacion,
                             TipoDocumento = C.v_Siglas,
                             IdTipoDocumento = A.i_IdTipoDocumento.Value,
                             Documento = (A.v_SerieDocumento.Trim() + "-" + A.v_CorrelativoDocumento.Trim()),
                             ValorVentaS = A.d_ValorVenta.Value,
                             ValorVentaD = 0,
                             IGVS = A.d_IGV.Value,
                             IGVD = 0,
                             TOTALS = A.d_Total.Value,
                             TOTALD = 0,
                             NombreMoneda = F.v_Value2,
                             IdMoneda = A.i_IdMoneda.Value,
                             NombreClienteAux = (B.i_Eliminado == 1 || B.i_Eliminado == null) ? " ****CLIENTE NO EXISTE*****" : A.v_NombreClienteTemporal == "" ? ("CLIENTE : " + " " + B.v_CodCliente.Trim() + " / " + B.v_ApePaterno.Trim() + " " + B.v_ApeMaterno.Trim() + " " + B.v_PrimerNombre.Trim() + " " + B.v_SegundoNombre.Trim() + " " + B.v_RazonSocial.Trim() + " / " + "" + B.v_NroDocIdentificacion).Trim() : ("CLIENTE : " + " " + B.v_CodCliente.Trim() + " / " + B.v_ApePaterno.Trim() + " " + B.v_ApeMaterno.Trim() + " " + B.v_PrimerNombre.Trim() + " " + B.v_SegundoNombre.Trim() + " " + A.v_NombreClienteTemporal.Trim() + " / " + B.v_NroDocIdentificacion.Trim()).Trim(),
                             TipoCambio = A.d_TipoCambio.Value,
                             Key = B.v_IdCliente,
                             TipoPersona = B.i_IdTipoPersona.Value,
                             TipoDocumentoCliente = B.i_IdTipoIdentificacion.Value,
                             ApePaterno = B.v_ApePaterno,
                             ApeMaterno = B.v_ApeMaterno,
                             RazonSocial = B.v_RazonSocial,
                             PrimerNombre = B.v_PrimerNombre,
                             SegundoNombre = B.v_SegundoNombre,
                             DocumentoContable = C.i_UsadoDocumentoContable ?? 0,



                         }).ToList().Select(n => new ReporteRegistroVentaResumenDAOT
                         {
                             Correlativo = n.Correlativo,
                             IdCliente = n.IdCliente,
                             NombreCliente = n.NombreCliente,
                             NroDocCliente = n.NroDocCliente,
                             TipoDocumento = n.TipoDocumento,
                             Documento = n.Documento,

                             ValorVentaS = pintMonedaId == (int)Currency.Soles && n.IdMoneda == (int)Currency.Soles ? _objDocumentoBL.DocumentoEsInverso(n.IdTipoDocumento) ? n.ValorVentaS * -1 : n.ValorVentaS :
                                           pintMonedaId == (int)Currency.Soles && n.IdMoneda == (int)Currency.Dolares ? _objDocumentoBL.DocumentoEsInverso(n.IdTipoDocumento) ? (n.ValorVentaS * -1) * n.TipoCambio : n.ValorVentaS * n.TipoCambio : 0,

                             IGVS = pintMonedaId == (int)Currency.Soles && n.IdMoneda == (int)Currency.Soles ? _objDocumentoBL.DocumentoEsInverso(n.IdTipoDocumento) ? n.IGVS * -1 : n.IGVS :
                                             pintMonedaId == (int)Currency.Soles && n.IdMoneda == (int)Currency.Dolares ? _objDocumentoBL.DocumentoEsInverso(n.IdTipoDocumento) ? (n.IGVS * -1) * n.TipoCambio : n.IGVS * n.TipoCambio : 0,

                             TOTALS = pintMonedaId == (int)Currency.Soles && n.IdMoneda == (int)Currency.Soles ? _objDocumentoBL.DocumentoEsInverso(n.IdTipoDocumento) ? n.TOTALS * -1 : n.TOTALS :
                             pintMonedaId == (int)Currency.Soles && n.IdMoneda == (int)Currency.Dolares ? _objDocumentoBL.DocumentoEsInverso(n.IdTipoDocumento) ? (n.TOTALS * -1) * n.TipoCambio : n.TOTALS * n.TipoCambio : 0,
                             Key = n.Key,
                             TipoPersona = n.TipoPersona,
                             TipoDocumentoCliente = n.TipoDocumentoCliente,
                             ApePaterno = n.ApePaterno,
                             ApeMaterno = n.ApeMaterno,
                             PrimerNombre = n.PrimerNombre,
                             SegundoNombre = n.SegundoNombre,
                             RazonSocial = n.RazonSocial,
                             DocumentoContable = n.DocumentoContable,
                         }).ToList();


                #endregion


                //3.- Query para agrupary ordenar 
                var objData = new List<ReporteRegistroVentaResumenDAOT>();
                objData = query.GroupBy(x => new { x.Key })
                                            .Select(group => group.First())
                                            .OrderByDescending(o => Ordenar == "ValorVentaDetalle" ? o.NombreCliente : o.NombreCliente).ToList();
                ReporteRegistroVentaResumenDAOT objReporte = new ReporteRegistroVentaResumenDAOT();
                foreach (var item in objData)
                {


                    var ListaCliente = query.Where(x => x.IdCliente == item.IdCliente).ToList();
                    objReporte = new ReporteRegistroVentaResumenDAOT();
                    objReporte.IdCliente = item.IdCliente;
                    objReporte.NombreCliente = item.NombreCliente;
                    objReporte.NroDocCliente = item.NroDocCliente;
                    objReporte.ValorVentaS = ListaCliente.Any() ? ListaCliente.Sum(x => x.ValorVentaS) : 0;
                    objReporte.IGVS = ListaCliente.Any() ? ListaCliente.Sum(x => x.IGVS) : 0;
                    objReporte.TOTALS = ListaCliente.Any() ? ListaCliente.Sum(x => x.TOTALS) : 0;
                    objReporte.TipoPersona = item.TipoPersona;
                    objReporte.TipoDocumentoCliente = item.TipoDocumentoCliente;


                    objReporte.ApeMaterno = item.ApeMaterno;
                    objReporte.ApePaterno = item.ApePaterno;
                    objReporte.PrimerNombre = item.PrimerNombre;
                    objReporte.SegundoNombre = item.SegundoNombre;
                    objReporte.RazonSocial = item.RazonSocial;
                    ListaReporte.Add(objReporte);

                }



                if (Tope > 0)
                {
                    return ListaReporte.Where(o => o.ValorVentaS >= Tope).ToList();

                }
                else
                {

                    return ListaReporte.ToList();
                }



                return ListaReporte.AsQueryable().OrderBy(Ordenar).ToList();
            }
            catch (Exception ex)
            {
                objOperationResult.Success = 0;
                return null;
            }
        }

        private List<decimal> CalcularSumaDetallerRegistroVentaResumenDAOT(List<ReporteRegistroVentaResumenDAOT> Lista, string pstrIdCliente)
        {

            var objData = new valoresRegistroVenta();

            List<decimal> Retonar = new List<decimal>();
            var xx = Lista.Where(p => p.IdCliente == pstrIdCliente);

            decimal TotalS, ValorVentaS, IGVS;
            ValorVentaS = xx.Sum(x => x.ValorVentaS);
            IGVS = xx.Sum(x => x.IGVS);
            TotalS = xx.Sum(x => x.TOTALS);

            var ValorVenta = new valoresRegistroVenta();
            ValorVenta = CalcularVenta(Lista.FirstOrDefault().IdTipoDocumento, ValorVentaS, IGVS, TotalS, 0, Lista.FirstOrDefault().TipoCambio, Lista.FirstOrDefault().IdMoneda);

            Retonar.Add(ValorVenta.ValorVentaSoles);
            Retonar.Add(ValorVenta.IgvSoles);
            Retonar.Add(ValorVenta.TotalSoles);
            return Retonar;
        }

        private decimal CalcularSuma_(List<ReporteRegistroVentaProductoResumen> Lista, string pstrIdProducto)
        {

            var xx = Lista.Where(p => p.IdProducto == pstrIdProducto);

            return xx.Sum(x => x.CantidadDetalle);
        }

        private List<decimal> CalcularSumaDetalleCuadreCaja(List<ReporteCuadredeCaja> Lista, string pstrCondicionPago)
        {

            var objData = new valoresRegistroVenta();

            List<decimal> Retonar = new List<decimal>();
            var xx = Lista.Where(p => p.CondicionPago == pstrCondicionPago);

            decimal TotalS, TotalD;
            TotalS = xx.Sum(x => x.TotalS);
            TotalD = xx.Sum(x => x.TotalS);
            Retonar.Add(xx.Sum(x => x.TotalS));
            Retonar.Add(xx.Sum(x => x.TotalD));
            return Retonar;
        }
        private List<decimal> CalcularSumaMonitoreoVenta(List<ReporteMonitoreoVenta> Lista, int IdEstablecimiento)
        {

            var objData = new valoresRegistroVenta();

            //List<ReporteRegistroVentaProductoResumen> RetonaRLISTA = new List<ReporteRegistroVentaProductoResumen>();
            //RetonaRLISTA=Lista;
            List<decimal> Retonar = new List<decimal>();
            var xx = Lista.Where(p => p.IdEstablecimiento == IdEstablecimiento);

            decimal TotalS, TotalD;
            TotalS = xx.Sum(x => x.Total);
            TotalD = xx.Sum(x => x.TotalD);
            //objData = CalcularVentaDetalle(Lista.FirstOrDefault().IdTipoDocumento, 1, 1, ValorVentaDetalle, 1, PrecioVentaDetalle, CantidadDetalle, Lista.FirstOrDefault().TipoCambio, Lista.FirstOrDefault().IdMoneda);

            Retonar.Add(xx.Sum(x => x.Total));
            Retonar.Add(xx.Sum(x => x.TotalD));
            return Retonar;
        }

        private List<decimal> CalcularSumaDetallerVentaAlmacenResumen(List<ReporteRegistroVentaAlmacenResumen> Lista, string pstrCondicionPago)
        {

            var objData = new valoresRegistroVenta();

            //List<ReporteRegistroVentaProductoResumen> RetonaRLISTA = new List<ReporteRegistroVentaProductoResumen>();
            //RetonaRLISTA=Lista;
            List<decimal> Retonar = new List<decimal>();
            var xx = Lista.Where(p => p.CondicionPago == pstrCondicionPago);

            decimal TotalS, TotalD;
            TotalS = xx.Sum(x => x.TotalS);
            TotalD = xx.Sum(x => x.TotalS);
            //objData = CalcularVentaDetalle(Lista.FirstOrDefault().IdTipoDocumento, 1, 1, ValorVentaDetalle, 1, PrecioVentaDetalle, CantidadDetalle, Lista.FirstOrDefault().TipoCambio, Lista.FirstOrDefault().IdMoneda);

            Retonar.Add(xx.Sum(x => x.TotalS));
            Retonar.Add(xx.Sum(x => x.TotalD));
            return Retonar;
        }

        private List<decimal> CalcularSumaDetallerVentaAlmacenResumenDocumentos(List<ReporteRegistroVentaAlmacenResumen> Lista, string pstrDocumento)
        {

            var objData = new valoresRegistroVenta();

            //List<ReporteRegistroVentaProductoResumen> RetonaRLISTA = new List<ReporteRegistroVentaProductoResumen>();
            //RetonaRLISTA=Lista;
            List<decimal> Retonar = new List<decimal>();
            var xx = Lista.Where(p => p.Documento == pstrDocumento);

            decimal TotalS, TotalD;
            TotalS = xx.Sum(x => x.TotalS);
            TotalD = xx.Sum(x => x.TotalS);
            //objData = CalcularVentaDetalle(Lista.FirstOrDefault().IdTipoDocumento, 1, 1, ValorVentaDetalle, 1, PrecioVentaDetalle, CantidadDetalle, Lista.FirstOrDefault().TipoCambio, Lista.FirstOrDefault().IdMoneda);

            Retonar.Add(xx.Sum(x => x.TotalS));
            Retonar.Add(xx.Sum(x => x.TotalD));
            return Retonar;
        }

        private List<decimal> CalcularSumaDetalleMensual(List<ReporteRegistroVentaProductoMensual> Lista, string IdProductoAux)
        {

            var objData = new valoresRegistroVenta();
            List<decimal> Retonar = new List<decimal>();
            var xx = Lista.Where(p => p.IdProductoAux == IdProductoAux);
            decimal CantidadDetalle, ValorVentaDetalle, PrecioVentaDetalle, Enero, Febrero, Marzo, Abril, Mayo, Junio, Julio, Agosto, Setiembre, Octubre, Noviembre, Diciembre, C_Enero, C_Febrero, C_Marzo, C_Abril, C_Mayo, C_Junio, C_Julio, C_Agosto, C_Setiembre, C_Octubre, C_Noviembre, C_Diciembre;
            CantidadDetalle = xx.Sum(x => x.CantidadDetalle);
            ValorVentaDetalle = xx.Sum(x => x.ValorVentaDetalle);
            PrecioVentaDetalle = xx.Sum(x => x.PrecioVentaDetalle);
            Enero = xx.Sum(x => x.T_Enero);
            Febrero = xx.Sum(x => x.T_Febrero);
            Marzo = xx.Sum(x => x.T_Marzo);
            Abril = xx.Sum(x => x.T_Abril);
            Mayo = xx.Sum(x => x.T_Mayo);
            Junio = xx.Sum(x => x.T_Junio);
            Julio = xx.Sum(x => x.T_Julio);
            Agosto = xx.Sum(x => x.T_Agosto);
            Setiembre = xx.Sum(x => x.T_Setiembre);
            Octubre = xx.Sum(x => x.T_Octubre);
            Noviembre = xx.Sum(x => x.T_Noviembre);
            Diciembre = xx.Sum(x => x.T_Diciembre);
            C_Enero = xx.Sum(x => x.C_Enero);
            C_Febrero = xx.Sum(x => x.C_Febrero);
            C_Marzo = xx.Sum(x => x.C_Marzo);
            C_Abril = xx.Sum(x => x.C_Abril);
            C_Mayo = xx.Sum(x => x.C_Mayo);
            C_Junio = xx.Sum(x => x.C_Junio);
            C_Julio = xx.Sum(x => x.C_Julio);
            C_Agosto = xx.Sum(x => x.C_Agosto);
            C_Setiembre = xx.Sum(x => x.C_Setiembre);
            C_Octubre = xx.Sum(x => x.C_Octubre);
            C_Noviembre = xx.Sum(x => x.C_Noviembre);
            C_Diciembre = xx.Sum(x => x.C_Diciembre);

            objData = CalcularVentaDetalleMensual(Lista.FirstOrDefault().IdTipoDocumento, 1, 1, ValorVentaDetalle, 1, PrecioVentaDetalle, CantidadDetalle, Lista.FirstOrDefault().TipoCambio, Lista.FirstOrDefault().IdMoneda, Enero, Febrero, Marzo, Abril, Mayo, Junio, Julio, Agosto, Setiembre, Octubre, Noviembre, Diciembre, C_Enero, C_Febrero, C_Marzo, C_Abril, C_Mayo, C_Junio, C_Julio, C_Agosto, C_Setiembre, C_Octubre, C_Noviembre, C_Diciembre);

            Retonar.Add(xx.Sum(x => x.CantidadDetalle));
            Retonar.Add(objData.Enero);
            Retonar.Add(objData.Febrero);
            Retonar.Add(objData.Marzo);
            Retonar.Add(objData.Abril);
            Retonar.Add(objData.Mayo);
            Retonar.Add(objData.Junio);
            Retonar.Add(objData.Julio);
            Retonar.Add(objData.Agosto);
            Retonar.Add(objData.Setiembre);
            Retonar.Add(objData.Octubre);
            Retonar.Add(objData.Noviembre);
            Retonar.Add(objData.Diciembre);
            Retonar.Add(C_Enero);
            Retonar.Add(C_Febrero);
            Retonar.Add(C_Marzo);
            Retonar.Add(C_Abril);
            Retonar.Add(C_Mayo);
            Retonar.Add(C_Junio);
            Retonar.Add(C_Julio);
            Retonar.Add(C_Agosto);
            Retonar.Add(C_Setiembre);
            Retonar.Add(C_Octubre);
            Retonar.Add(C_Noviembre);
            Retonar.Add(C_Diciembre);

            Retonar.Add(objData.ValorVentaDetalleSoles);
            Retonar.Add(objData.ValorVentaDetalleDolares);
            Retonar.Add(objData.PrecioVentaDetalleSoles);
            Retonar.Add(objData.PrecioVentaDetalleDolares);

            return Retonar;
        }

        private List<decimal> CalcularSumaCabecera(List<ReporteRegistroVentaClienteResumen> Lista, string pintIdCliente)
        {

            var ValorVenta = new valoresRegistroVenta();

            List<decimal> Retonar = new List<decimal>();
            var xx = Lista.Where(p => p.IdCliente == pintIdCliente);

            decimal Total, Descuento;
            Total = xx.Sum(x => x.Total);
            Descuento = xx.Sum(x => x.Descuento);
            ValorVenta = CalcularVenta(Lista.FirstOrDefault().IdTipoDocumento, 1, 1, Total, Descuento, Lista.FirstOrDefault().TipoCambio, Lista.FirstOrDefault().IdMoneda);
            Retonar.Add(ValorVenta.TotalSoles);
            Retonar.Add(ValorVenta.TotalDolares);
            Retonar.Add(ValorVenta.DescuentoSoles);
            Retonar.Add(ValorVenta.DescuentoDolares);
            return Retonar;
        }



        public List<EstadisticasVentas> EstadisticasVentas(ref OperationResult objOperationResult, bool IncluirProductosNoVendidos, int IdEstablecimiento, string IdAlmacen, string IdLinea, string IdMarca, string IdVendedor, List<MesesEstadisticas> MesesUtilizados, string CodigoProducto, int Almacen, string periodoEstadistica, int TipoUnidades = (int)FormatoCantidad.UnidadMedidaProducto)
        {

            try
            {
                objOperationResult.Success = 1;
                string sPeriodo = periodoEstadistica;
                List<EstadisticasVentas> ListaProductosNoVendidos = new List<EstadisticasVentas>();
                List<EstadisticasVentas> VentasReporte = new List<EstadisticasVentas>();
                using (SAMBHSEntitiesModelWin dbContext = new SAMBHSEntitiesModelWin())
                {
                    dbContext.CommandTimeout = 0;
                    DateTime fecha1 = DateTime.Parse("01/01/" + periodoEstadistica);
                    DateTime fecha2 = DateTime.Parse("31/12/" + periodoEstadistica + " 23:59");
                    List<ReporteStockConsolidado> ProductoAlmacen = new List<ReporteStockConsolidado>();
                    var Kardex = new AlmacenBL().ReporteStockConsolidado(ref objOperationResult, fecha1, int.Parse(periodoEstadistica) < DateTime.Now.Year ? fecha2 : DateTime.Now, "", "-1", IdEstablecimiento, CodigoProducto, "-1", false, false, false, false, -1, Almacen, TipoUnidades);

                    if (objOperationResult.Success == 0)
                    {
                        return null;
                    }

                    var SaldoInicial1 = (
                                        from b in dbContext.movimientodetalle
                                        join d in dbContext.productodetalle on new { pd = b.v_IdProductoDetalle, eliminado = 0 } equals new { pd = d.v_IdProductoDetalle, eliminado = d.i_Eliminado.Value } into d_join
                                        from d in d_join.DefaultIfEmpty()

                                        join e in dbContext.producto on new { p = d.v_IdProducto, eliminado = 0 } equals new { p = e.v_IdProducto, eliminado = e.i_Eliminado.Value } into e_join
                                        from e in e_join.DefaultIfEmpty()

                                        join f in dbContext.linea on new { l = e.v_IdLinea, eliminado = 0 } equals new { l = f.v_IdLinea, eliminado = f.i_Eliminado.Value } into f_join
                                        from f in f_join.DefaultIfEmpty()

                                        join g in dbContext.marca on new { m = e.v_IdMarca, eliminado = 0 } equals new { m = g.v_IdMarca, eliminado = g.i_Eliminado.Value } into g_join
                                        from g in g_join.DefaultIfEmpty()

                                        join h in dbContext.datahierarchy on new { UnidadMedida = e.i_IdUnidadMedida.Value, eliminado = 0, Grupo = 17 } equals new { UnidadMedida = h.i_ItemId, eliminado = h.i_IsDeleted.Value, Grupo = h.i_GroupId } into h_join
                                        from h in h_join.DefaultIfEmpty()

                                        join a in dbContext.movimiento on new { m = b.v_IdMovimiento, eliminado = 0 } equals new { m = a.v_IdMovimiento, eliminado = a.i_Eliminado.Value } into a_join
                                        from a in a_join.DefaultIfEmpty()

                                        where a.i_Eliminado == 0 && a.i_IdTipoMotivo == (int)TipoDeMovimiento.Inicial && a.i_IdEstablecimiento == IdEstablecimiento

                                        && (d.producto.v_CodInterno == CodigoProducto || CodigoProducto == "")
                                        && a.v_Periodo == sPeriodo && d.producto.i_EsActivoFijo == 0 && d.producto.i_EsServicio == 0
                                        && a.i_IdEstablecimiento == IdEstablecimiento && b.i_Eliminado == 0
                                        && d_join.Any(o => o.v_IdProducto == e.v_IdProducto)
                                        && d_join.Any(o => d.v_IdProductoDetalle == b.v_IdProductoDetalle)
                                        && e_join.Any(o => o.v_IdLinea == f.v_IdLinea)
                                        select new
                                        {
                                            CodigoProducto = d.producto.v_CodInterno.Trim(),
                                            DescripcionProducto = d.producto.v_Descripcion.Trim(),
                                            v_IdProductoDetalle = b.v_IdProductoDetalle,
                                            idAlmacen = a.i_IdAlmacenOrigen.Value,
                                            // dCantidad = b.d_Cantidad.Value,
                                            dCantidad = b == null ? 0 : b.d_CantidadEmpaque == null ? b.d_Cantidad == null ? 0 : b.d_Cantidad.Value : b.d_CantidadEmpaque.Value,
                                            IdMovimientoDetalle = b.v_IdMovimientoDetalle,
                                            Linea = f != null ? f.v_Nombre : "",
                                            Marca = g != null ? g.v_Nombre : "",
                                            ValorUM = string.IsNullOrEmpty(h.v_Value2) ? "0" : h.v_Value2,
                                            UnidadMedida = TipoUnidades == (int)FormatoCantidad.UnidadMedidaProducto ? h == null ? "" : h.v_Value1 : "UNIDADES",
                                            TipoEstadtistica = "SI"

                                        }).ToList().Select(o => new EstadisticasVentas
                                        {
                                            CodigoProducto = o.CodigoProducto,
                                            DescripcionProducto = o.DescripcionProducto,
                                            v_IdProductoDetalle = o.v_IdProductoDetalle,
                                            idAlmacen = o.idAlmacen,
                                            dCantidad = o.dCantidad == 0 || int.Parse(o.ValorUM) == 0 ? 0 : TipoUnidades == (int)FormatoCantidad.UnidadMedidaProducto ? o.dCantidad / int.Parse(o.ValorUM) : o.dCantidad,
                                            IdMovimientoDetalle = o.IdMovimientoDetalle,
                                            Linea = o.Linea,
                                            Marca = o.Marca,
                                            ValorUM = o.ValorUM,
                                            UnidadMedida = o.UnidadMedida,
                                            TipoEstadtistica = o.TipoEstadtistica,
                                        }).ToList().AsQueryable();

                    if (!string.IsNullOrEmpty(IdAlmacen))
                    {
                        SaldoInicial1 = SaldoInicial1.Where(IdAlmacen);
                    }


                    List<EstadisticasVentas> SaldoInicial = SaldoInicial1.ToList();
                    SaldoInicial1 = null;

                    var VentasGuias_ = (
                                        from b in dbContext.movimientodetalle
                                        join d in dbContext.productodetalle on new { pd = b != null ? b.v_IdProductoDetalle ?? "" : "", eliminado = 0 } equals new { pd = d.v_IdProductoDetalle, eliminado = d.i_Eliminado.Value } into d_join
                                        from d in d_join.DefaultIfEmpty()


                                        join f in dbContext.producto on new { p = d != null ? d.v_IdProducto ?? "" : "", eliminado = 0 } equals new { p = f.v_IdProducto, eliminado = f.i_Eliminado.Value } into f_join
                                        from f in f_join.DefaultIfEmpty()

                                        join g in dbContext.linea on new { l = f != null ? f.v_IdLinea ?? "" : "", eliminado = 0 } equals new { l = g.v_IdLinea, eliminado = g.i_Eliminado.Value } into g_join
                                        from g in g_join.DefaultIfEmpty()

                                        join h in dbContext.marca on new { m = f != null ? f.v_IdMarca ?? "" : "", eliminado = 0 } equals new { m = h.v_IdMarca, eliminado = h.i_Eliminado.Value } into h_join
                                        from h in h_join.DefaultIfEmpty()

                                        join e in dbContext.datahierarchy on new { eliminado = 0, Grupo = 17, um = f == null ? -1 : f.i_IdUnidadMedida.Value } equals new { eliminado = e.i_IsDeleted.Value, Grupo = e.i_GroupId, um = e.i_ItemId } into e_join
                                        from e in e_join.DefaultIfEmpty()

                                        join a in dbContext.movimiento on new { eliminado = 0, m = b.v_IdMovimiento } equals new { eliminado = a.i_Eliminado.Value, m = a.v_IdMovimiento } into a_join
                                        from a in a_join.DefaultIfEmpty()

                                        where a != null && a.i_Eliminado == 0 && a.i_IdEstablecimiento == IdEstablecimiento
                                        && (a.v_OrigenTipo == Constants.OrigenVenta || a.v_OrigenTipo == Constants.OrigenGuiaInterna)
                                        && (d.producto.v_CodInterno == CodigoProducto || CodigoProducto == "")
                                        && a.i_IdTipoMovimiento == (int)TipoDeMovimiento.NotadeSalida
                                        && a.v_OrigenTipo.Trim() != ""
                                        && d.producto.i_IdUnidadMedida == e.i_ItemId
                                        && a.v_Periodo == sPeriodo && (d.producto.i_EsActivoFijo == 0 && d.producto.i_EsServicio == 0)
                                        && b != null && d != null && b.v_IdProductoDetalle != null && b.i_Eliminado == 0
                                        //&& d_join.Any(o => o.v_IdProductoDetalle == b.v_IdProductoDetalle)
                                        //&& d_join.Any(o => o.v_IdProducto == f.v_IdProducto)
                                        && b.v_IdProductoDetalle ==d.v_IdProductoDetalle 
                                        select new
                                        {
                                            CodigoProducto = d.producto == null ? "" : d.producto.v_CodInterno.Trim(),
                                            DescripcionProducto = d.producto == null ? "" : d.producto.v_Descripcion.Trim(),
                                            UnidadMedida = TipoUnidades == (int)FormatoCantidad.UnidadMedidaProducto ? e == null ? "" : e.v_Value1 : "UNIDADES",
                                            v_IdProductoDetalle = b == null ? "" : b.v_IdProductoDetalle,
                                            idAlmacen = a == null ? -1 : a.i_IdAlmacenOrigen.Value,
                                            dCantidad = a == null ? 0 : a.i_EsDevolucion == 0 ? b.d_CantidadEmpaque == null ? b.d_Cantidad == null ? 0 : b.d_Cantidad.Value : b.d_CantidadEmpaque.Value : b.d_CantidadEmpaque == null ? b.d_Cantidad == null ? 0 : b.d_Cantidad.Value * -1 : b.d_CantidadEmpaque.Value * -1,
                                            IdMovimientoDetalle = b.v_IdMovimientoDetalle,
                                            v_IdProducto = d.producto == null ? "" : d.producto.v_IdProducto,
                                            Linea = g != null ? g.v_Nombre : "",
                                            Marca = h != null ? h.v_Nombre : "",
                                            ValorUM = string.IsNullOrEmpty(e.v_Value2) ? "0" : e.v_Value2,
                                            TipoEstadtistica = "V",
                                            Fecha = a.t_Fecha.Value,

                                        }).ToList().Select(o => new EstadisticasVentas
                                        {
                                            CodigoProducto = o.CodigoProducto,
                                            DescripcionProducto = o.DescripcionProducto,
                                            UnidadMedida = o.UnidadMedida,
                                            v_IdProductoDetalle = o.v_IdProductoDetalle,
                                            idAlmacen = o.idAlmacen,
                                            dCantidad = o.dCantidad == 0 || decimal.Parse(o.ValorUM) == 0 ? 0 : TipoUnidades == (int)FormatoCantidad.UnidadMedidaProducto ? o.dCantidad / decimal.Parse(o.ValorUM) : o.dCantidad,
                                            IdMovimientoDetalle = o.IdMovimientoDetalle,
                                            Mes = o.Fecha.Month.ToString("00"),
                                            v_IdProducto = o.v_IdProducto,
                                            Linea = o.Linea,
                                            Marca = o.Marca,
                                            ValorUM = o.ValorUM,
                                            TipoEstadtistica = o.TipoEstadtistica,




                                        }).ToList().AsQueryable();


                    if (!string.IsNullOrEmpty(IdAlmacen))
                    {
                        VentasGuias_ = VentasGuias_.Where(IdAlmacen);
                    }

                    var ComprasImportaciones_ = (from b in dbContext.movimientodetalle
                                                 join d in dbContext.productodetalle on new { pd = b != null ? b.v_IdProductoDetalle ?? "" : "", eliminado = 0 } equals new { pd = d.v_IdProductoDetalle, eliminado = d.i_Eliminado.Value } into d_join
                                                 from d in d_join.DefaultIfEmpty()

                                                 join f in dbContext.producto on new { p = d != null ? d.v_IdProducto ?? "" : "", eliminado = 0 } equals new { p = f.v_IdProducto, eliminado = f.i_Eliminado.Value } into f_join
                                                 from f in f_join.DefaultIfEmpty()

                                                 join g in dbContext.linea on new { l = f != null ? f.v_IdLinea ?? "" : "", eliminado = 0 } equals new { l = g.v_IdLinea, eliminado = g.i_Eliminado.Value } into g_join
                                                 from g in g_join.DefaultIfEmpty()

                                                 join h in dbContext.marca on new { m = f != null ? f.v_IdMarca ?? "" : "", eliminado = 0 } equals new { m = h.v_IdMarca, eliminado = h.i_Eliminado.Value } into h_join
                                                 from h in h_join.DefaultIfEmpty()

                                                 join e in dbContext.datahierarchy on new { eliminado = 0, Grupo = 17, um = f == null ? -1 : f.i_IdUnidadMedida.Value } equals new { eliminado = e.i_IsDeleted.Value, Grupo = e.i_GroupId, um = e.i_ItemId } into e_join
                                                 from e in e_join.DefaultIfEmpty()

                                                 join a in dbContext.movimiento on new { eliminado = 0, m = b.v_IdMovimiento } equals new { eliminado = a.i_Eliminado.Value, m = a.v_IdMovimiento } into a_join
                                                 from a in a_join.DefaultIfEmpty()

                                                 where a != null && a.i_Eliminado == 0 && a.i_IdEstablecimiento == IdEstablecimiento
                                                 && (a.v_OrigenTipo == Constants.OrigenCompra || a.v_OrigenTipo == Constants.OrigenImportacion)
                                                 && (d.producto.v_CodInterno == CodigoProducto || CodigoProducto == "")
                                                 && a.i_IdTipoMovimiento == (int)TipoDeMovimiento.NotadeIngreso
                                                 && a.v_OrigenTipo.Trim() != ""
                                                  && d.producto.i_IdUnidadMedida == e.i_ItemId
                                                  && a.v_Periodo == sPeriodo
                                                  && d.producto.i_EsServicio == 0 && d.producto.i_EsActivoFijo == 0 && b.i_Eliminado == 0
                                                  //&& d_join.Any(o => o.v_IdProductoDetalle == b.v_IdProductoDetalle)
                                                  //&& d_join.Any(o => o.v_IdProducto == f.v_IdProducto)
                                                  //&& f_join.Any(o => o.v_IdLinea == g.v_IdLinea)
                                                  && b.v_IdProductoDetalle ==d.v_IdProductoDetalle 
                                                 select new
                                                 {
                                                     CodigoProducto = d.producto.v_CodInterno.Trim(),
                                                     DescripcionProducto = d.producto.v_Descripcion.Trim(),
                                                     v_IdProductoDetalle = b.v_IdProductoDetalle,
                                                     idAlmacen = a.i_IdAlmacenOrigen.Value,
                                                     dCantidad = a == null ? 0 : a.i_EsDevolucion == 0 ? b.d_CantidadEmpaque == null ? b.d_Cantidad == null ? 0 : b.d_Cantidad.Value : b.d_CantidadEmpaque.Value : b.d_CantidadEmpaque == null ? b.d_Cantidad == null ? 0 : b.d_Cantidad.Value * -1 : b.d_CantidadEmpaque.Value * -1,
                                                     IdMovimientoDetalle = b.v_IdMovimientoDetalle,
                                                     Mes = a.v_Mes.Trim(),
                                                     v_IdProducto = d.producto.v_IdProducto,
                                                     Linea = g != null ? g.v_Nombre : "",
                                                     Marca = h != null ? h.v_Nombre : "",
                                                     ValorUM = string.IsNullOrEmpty(e.v_Value2) ? "0" : e.v_Value2,
                                                     UnidadMedida = TipoUnidades == (int)FormatoCantidad.UnidadMedidaProducto ? h == null ? "" : e.v_Value1 : "UNIDADES",
                                                     TipoEstadtistica = "C",
                                                     Fecha = a.t_Fecha.Value,
                                                 }).ToList().AsQueryable().Select(o => new EstadisticasVentas
                                                 {

                                                     CodigoProducto = o.CodigoProducto,
                                                     DescripcionProducto = o.DescripcionProducto,
                                                     UnidadMedida = o.UnidadMedida,
                                                     v_IdProductoDetalle = o.v_IdProductoDetalle,
                                                     idAlmacen = o.idAlmacen,
                                                     dCantidad = o.dCantidad == 0 || decimal.Parse(o.ValorUM) == 0 ? 0 : TipoUnidades == (int)FormatoCantidad.UnidadMedidaProducto ? o.dCantidad / decimal.Parse(o.ValorUM) : o.dCantidad,
                                                     IdMovimientoDetalle = o.IdMovimientoDetalle,
                                                     Mes = o.Fecha.Month.ToString("00"),
                                                     v_IdProducto = o.v_IdProducto,
                                                     Linea = o.Linea,
                                                     Marca = o.Marca,
                                                     ValorUM = o.ValorUM,
                                                     TipoEstadtistica = o.TipoEstadtistica,



                                                 }).ToList().AsQueryable();
                    if (!string.IsNullOrEmpty(IdAlmacen))
                    {
                        ComprasImportaciones_ = ComprasImportaciones_.Where(IdAlmacen);
                    }
                    var ComprasImportaciones = ComprasImportaciones_.ToList();
                    var VentasGuias = VentasGuias_.ToList();


                    var VentasAgrupadasProducto = VentasGuias.Concat(ComprasImportaciones).GroupBy(x => new { x.v_IdProducto })
             .Select(group => group.Last())
             .OrderBy(o => o.CodigoProducto).ToList();


                    VentasReporte = GetCalculoEstadistica(VentasGuias.Concat(ComprasImportaciones).ToList().AsQueryable(), Kardex, SaldoInicial.ToList(), Almacen);
                    var periodo = Globals.ClientSession.i_Periodo.ToString();

                    if (IncluirProductosNoVendidos)
                    {


                        var CodigosProductosVendidos = VentasAgrupadasProducto.Select(x => x.v_IdProductoDetalle).ToList();
                        var TodosProductos = (from a in dbContext.producto
                                              join b in dbContext.datahierarchy on new { um = a.i_IdUnidadMedida.Value, eliminado = 0, Grupo = 17 } equals new { um = b.i_ItemId, eliminado = b.i_IsDeleted.Value, Grupo = b.i_GroupId } into b_join
                                              from b in b_join.DefaultIfEmpty()
                                              join c in dbContext.productodetalle on new { pd = a.v_IdProducto, eliminado = 0 } equals new { pd = c.v_IdProducto, eliminado = c.i_Eliminado.Value } into c_join
                                              from c in c_join.DefaultIfEmpty()

                                              join d in dbContext.productoalmacen on new { pa = c.v_IdProductoDetalle, eliminado = 0, p = periodo } equals new { pa = d.v_ProductoDetalleId, eliminado = d.i_Eliminado.Value, p = d.v_Periodo } into d_join
                                              from d in d_join.DefaultIfEmpty()
                                              join e in dbContext.linea on new { l = a.v_IdLinea } equals new { l = e.v_IdLinea } into e_join
                                              from e in e_join.DefaultIfEmpty()

                                              join f in dbContext.marca on new { m = a.v_IdMarca } equals new { m = f.v_IdMarca } into f_join

                                              from f in f_join.DefaultIfEmpty()
                                              where a.i_Eliminado == 0 && a.i_EsActivoFijo == 0 && a.v_IdProducto != "N002-PD000000000"

                                               && (a.v_CodInterno == CodigoProducto || CodigoProducto == "")


                                              select new EstadisticasVentas
                                              {

                                                  CodigoProducto = a.v_CodInterno.Trim(),
                                                  DescripcionProducto = a.v_Descripcion.Trim(),

                                                  UnidadMedida = TipoUnidades == (int)FormatoCantidad.UnidadMedidaProducto ? e == null ? "" : b.v_Value1 : "UNIDADES",
                                                  v_IdProducto = a.v_IdProducto,
                                                  Linea = e.v_Nombre,
                                                  Marca = f.v_Nombre,
                                                  v_IdProductoDetalle = c.v_IdProductoDetalle,
                                                  idAlmacen = d.i_IdAlmacen
                                              }).ToList().AsQueryable();
                        if (!string.IsNullOrEmpty(IdAlmacen))
                        {
                            TodosProductos = TodosProductos.Where(IdAlmacen);
                        }

                        var CodigosTodosProductos = (TodosProductos.Select(x => x.v_IdProductoDetalle)).ToList();
                        var CodigosProductosNoVendidos = CodigosTodosProductos.Except(CodigosProductosVendidos).ToList();
                        int i = 1;


                        var SaldoInicialAgrupados = SaldoInicial.ToList().GroupBy(o => o.v_IdProductoDetalle).Select(y =>
                        {
                            var primero = y.FirstOrDefault() != null ? y.FirstOrDefault() : new EstadisticasVentas();
                            return new EstadisticasVentas
                            {


                                dCantidad = y.Sum(o => o.dCantidad),
                                CodigoProducto = primero.CodigoProducto,
                                DescripcionProducto = primero.DescripcionProducto,
                                UnidadMedida = primero.UnidadMedida,
                                v_IdProductoDetalle = primero.v_IdProductoDetalle,
                                idAlmacen = primero.idAlmacen,
                                //dCantidad = o.dCantidad == 0 || int.Parse(o.ValorUM) == 0 ? 0 : TipoUnidades == (int)FormatoCantidad.UnidadMedidaProducto ? o.dCantidad / int.Parse(o.ValorUM) : o.dCantidad,
                                IdMovimientoDetalle = primero.IdMovimientoDetalle,
                                Mes = primero.Mes,
                                v_IdProducto = primero.v_IdProducto,
                                Linea = primero.Linea,
                                Marca = primero.Marca,
                                ValorUM = primero.ValorUM,
                                TipoEstadtistica = primero.TipoEstadtistica,


                            };
                        }
                          ).ToList();



                        var SaldoInicialDictonary = SaldoInicialAgrupados.ToDictionary(o => o.v_IdProductoDetalle, o => o);


                        var TodoProductosAgrupados = TodosProductos.ToList().GroupBy(o => o.v_IdProductoDetalle).Select(y =>
                        {
                            var primero = y.FirstOrDefault() != null ? y.FirstOrDefault() : new EstadisticasVentas();
                            return new EstadisticasVentas
                            {


                                CodigoProducto = primero.CodigoProducto,
                                DescripcionProducto = primero.DescripcionProducto,

                                UnidadMedida = primero.UnidadMedida,
                                v_IdProducto = primero.v_IdProducto,
                                Linea = primero.Linea,
                                Marca = primero.Marca,
                                v_IdProductoDetalle = primero.v_IdProductoDetalle,
                                idAlmacen = primero.idAlmacen,


                            };
                        }
                      ).ToList();

                        var TodosProductosDictonary = TodoProductosAgrupados.ToDictionary(o => o.v_IdProductoDetalle, o => o);

                        var KardexAgrupado = Kardex.ToList().GroupBy(o => o.v_IdProductoDetalle).Select(y =>
                        {
                            var primero = y.FirstOrDefault() != null ? y.FirstOrDefault() : new ReporteStockConsolidado();
                            return new ReporteStockConsolidado
                            {

                                cantidad = y.Sum(o => o.cantidad),
                                cantidadAlmacen1 = y.Sum(o => o.cantidadAlmacen1),
                                v_IdProductoDetalle = primero.v_IdProductoDetalle,
                                IdProducto = primero.IdProducto,



                            };
                        }
                   ).ToList();

                        var KardexDictionary = KardexAgrupado.ToDictionary(o => o.v_IdProductoDetalle, o => o);
                        ListaProductosNoVendidos = CodigosProductosNoVendidos.ToList().Select(IdProductoDetalle =>
                        {
                            EstadisticasVentas si;
                            EstadisticasVentas Prod;
                            ReporteStockConsolidado stockActualPa;
                            //pd = prodSinMovDiccionario.TryGetValue(idProducto, out pd) ? pd : new productodetalleDto();
                            //Inv = InventarioDiccionario.TryGetValue(idProducto, out Inv) ? Inv : new productoinventarioDto();
                            if (IdProductoDetalle == "N001-PE000003081")
                            {
                                string h = "";
                            }
                            si = SaldoInicialDictonary.TryGetValue(IdProductoDetalle, out si) ? si : new EstadisticasVentas();
                            Prod = TodosProductosDictonary.TryGetValue(IdProductoDetalle, out Prod) ? Prod : new EstadisticasVentas();
                            stockActualPa = KardexDictionary.TryGetValue(IdProductoDetalle, out stockActualPa) ? stockActualPa : new ReporteStockConsolidado();
                            return new EstadisticasVentas
                            {
                                CodigoProducto = Prod != null ? Prod.CodigoProducto.Trim() : "",
                                DescripcionProducto = Prod != null ? Prod.DescripcionProducto.Trim() : "",

                                v_IdProducto = Prod != null ? Prod.v_IdProducto : "",
                                UnidadMedida = Prod != null ? Prod.UnidadMedida : "",
                                dCantidadSaldoInicial = si.dCantidad,

                                dCantidad1 = 0,
                                dCantidad2 = 0,
                                dCantidad3 = 0,
                                dCantidad4 = 0,
                                dCantidad5 = 0,
                                dCantidad6 = 0,
                                dCantidad7 = 0,
                                dCantidad8 = 0,
                                dCantidad9 = 0,
                                dCantidad10 = 0,
                                dCantidad11 = 0,
                                dCantidad12 = 0,
                                Total = 0,
                                Linea = Prod != null ? Prod.Linea : "",
                                Marca = Prod != null ? Prod.Marca : "",
                                dCantidadC1 = 0,
                                dCantidadC2 = 0,
                                dCantidadC3 = 0,
                                dCantidadC4 = 0,
                                dCantidadC5 = 0,
                                dCantidadC6 = 0,
                                dCantidadC7 = 0,
                                dCantidadC8 = 0,
                                dCantidadC9 = 0,
                                dCantidadC10 = 0,
                                dCantidadC11 = 0,
                                dCantidadC12 = 0,
                                TotalCompras = 0,
                                UnidadMedidaPa = TipoUnidades == (int)FormatoCantidad.UnidadMedidaProducto ? Prod.UnidadMedida : "UNIDADES",
                                StockActual = Almacen == -1 ? stockActualPa != null ? !string.IsNullOrEmpty(IdAlmacen) ? stockActualPa.cantidad : stockActualPa.cantidad : 0 : stockActualPa != null ? stockActualPa.cantidadAlmacen1 : 0,
                            };
                        }
                           ).ToList();
                    }

                    return VentasReporte.Concat(ListaProductosNoVendidos).OrderBy(x => x.CodigoProducto).ToList();
                }

            }
            catch (Exception ex)
            {
                objOperationResult.Success = 0;
                objOperationResult.AdditionalInformation = "VentaBL.EstadisticaVentas()";
                objOperationResult.ErrorMessage = ex.Message;
                objOperationResult.ExceptionMessage = ex.InnerException != null ? ex.InnerException.Message : string.Empty;
                Utils.ExceptionToLog(Globals.ClientSession.i_SystemUserId, objOperationResult);
                return null;
            }

        }

        private List<EstadisticasVentas> GetCalculoEstadistica(IQueryable<EstadisticasVentas> q, List<ReporteStockConsolidado> StockConsolidado, List<EstadisticasVentas> SaldoInicial, int IdAlmacen)
        {
            // var queryList = q.GroupBy(x => x.codigoProducto);

            var queryList = q.GroupBy(x => new { x.v_IdProducto });
            //.Select(group => group.Last())
            //.OrderBy(o => o.CodigoProducto).ToList();

            var listReport = new List<EstadisticasVentas>();
            var ty = typeof(EstadisticasVentas);
            foreach (var prod in queryList)
            {
                var first = prod.FirstOrDefault();// prod.FirstOrDefault();
                if (first == null) continue;
                decimal? total = 0;
                decimal? totalC = 0;
                for (var i = 1; i <= 12; i++)
                {

                    var prop = ty.GetProperty("almacen" + (i + 1));
                    var sum = prod.Where(r => r.Mes == i.ToString("00") && r.TipoEstadtistica == "V")
                        .Sum(r =>
                        {
                            var val = r.dCantidad;
                            return val;
                        });
                    total += sum;
                    prop = ty.GetProperty("dCantidad" + (i));
                    prop.SetValue(first, sum, null);
                    var sumC = prod.Where(r => r.Mes == i.ToString("00") && r.TipoEstadtistica == "C")
                        .Sum(r =>
                        {
                            var val = r.dCantidad;
                            return val;
                        });
                    totalC += sumC;
                    prop = ty.GetProperty("dCantidadC" + (i));
                    prop.SetValue(first, sumC, null);

                    var stock = StockConsolidado.Where(o => o.v_IdProductoDetalle == first.v_IdProductoDetalle).ToList().AsQueryable();
                    decimal stockActual = 0;

                    if (IdAlmacen == -1)
                    {
                        stockActual = stock.Any() ? stock.Sum(o => o.cantidad ?? 0) : 0;
                    }
                    else
                    {
                        stockActual = stock.Any() ? stock.Sum(o => o.cantidadAlmacen1 ?? 0) : 0;
                    }

                    prop = ty.GetProperty("StockActual");
                    prop.SetValue(first, stockActual, null);

                    decimal saldoInicial = SaldoInicial.Any() ? SaldoInicial.Where(o => o.v_IdProductoDetalle == first.v_IdProductoDetalle).Any() ? SaldoInicial.Where(o => o.v_IdProductoDetalle == first.v_IdProductoDetalle).Sum(o => o.dCantidad) : 0 : 0;
                    prop = ty.GetProperty("dCantidadSaldoInicial");
                    prop.SetValue(first, saldoInicial, null);
                    prop = ty.GetProperty("UnidadMedidaPa");
                    prop.SetValue(first, first.UnidadMedida, null);

                }
                first.Total = total.Value;
                first.TotalCompras = totalC.Value;
                listReport.Add(first);
            }
            return listReport;
        }



        public List<EstadisticasVentas> VentasTotales(ref OperationResult objOperationResult)
        {

            try
            {
                objOperationResult.Success = 1;
                string sPeriodo = Globals.ClientSession.i_Periodo.ToString();
                using (SAMBHSEntitiesModelWin dbContext = new SAMBHSEntitiesModelWin())
                {

                    var ventasTotales = (from a in dbContext.ventadetalle
                                         join b in dbContext.productodetalle on new { pd = a.v_IdProductoDetalle, eliminado = 0 } equals new { pd = b.v_IdProductoDetalle, eliminado = b.i_Eliminado.Value } into b_join

                                         from b in b_join.DefaultIfEmpty()

                                         join c in dbContext.producto on new { p = b.v_IdProducto, eliminado = 0 } equals new { p = c.v_IdProducto, eliminado = c.i_Eliminado.Value } into c_join
                                         from c in c_join.DefaultIfEmpty()

                                         join d in dbContext.datahierarchy on new { um = c.i_IdUnidadMedida.Value, eliminado = 0, Grupo = 17 } equals new { um = d.i_ItemId, eliminado = d.i_IsDeleted.Value, Grupo = d.i_GroupId } into d_join
                                         from d in d_join.DefaultIfEmpty()

                                         join e in dbContext.venta on new { v = a.v_IdVenta, eliminado = 0 } equals new { v = e.v_IdVenta, eliminado = e.i_Eliminado.Value } into e_join
                                         from e in e_join.DefaultIfEmpty()

                                         join f in dbContext.documento on new { d = e.i_IdTipoDocumento.Value, eliminado = 0 } equals new { d = f.i_CodigoDocumento, eliminado = f.i_Eliminado.Value } into f_join
                                         from f in f_join.DefaultIfEmpty()

                                         where a.i_Eliminado == 0 && e.i_IdEstado == 1 && c.i_EsActivoFijo == 0 && c.v_IdProducto != "N002-PD000000000"

                                         select new EstadisticasVentas
                                         {
                                             CodigoProducto = c.v_CodInterno.Trim(),
                                             DescripcionProducto = c.v_Descripcion.Trim(),
                                             UnidadMedida = d.v_Field.Trim(),
                                             v_IdProducto = c.v_IdProducto,
                                             FechaRegistro = e.t_FechaRegistro.Value,
                                             dCantidad = f.i_UsadoDocumentoInverso.Value == 1 ? a.d_CantidadEmpaque.Value * -1 : a.d_CantidadEmpaque.Value,
                                             Periodo = e.v_Periodo.Trim(),
                                         }).ToList().Select(x => new EstadisticasVentas
                                         {

                                             CodigoProducto = x.CodigoProducto,
                                             DescripcionProducto = x.DescripcionProducto,
                                             UnidadMedida = x.UnidadMedida,
                                             Mes = x.FechaRegistro.Date.Month.ToString("00"),
                                             v_IdProducto = x.v_IdProducto,
                                             dCantidad = x.dCantidad,
                                             Periodo = x.Periodo,


                                         }).ToList().Where(x => x.Periodo == sPeriodo).ToList();


                    return ventasTotales;



                }

            }
            catch (Exception ex)
            {
                objOperationResult.Success = 0;
                return null;
            }

        }


        public decimal CalcularCantidadMes(List<EstadisticasVentas> ListaVentas, string Mes, string IdProducto)
        {


            decimal CantidadMes = 0;
            switch (Mes)
            {
                case "01":
                    CantidadMes = ListaVentas.Any() ? ListaVentas.Where(x => x.Mes == Mes && x.v_IdProducto == IdProducto).Sum(x => x.dCantidad) : 0;
                    break;
                case "02":
                    CantidadMes = ListaVentas.Any() ? ListaVentas.Where(x => x.Mes == Mes && x.v_IdProducto == IdProducto).Sum(x => x.dCantidad) : 0;
                    break;
                case "03":
                    if (IdProducto == "N001-PD000000000")
                    {
                        string x = "";
                    }
                    var z = ListaVentas.Where(x => x.Mes == Mes && x.v_IdProducto == IdProducto).ToList();
                    CantidadMes = ListaVentas.Any() ? ListaVentas.Where(x => x.Mes == Mes && x.v_IdProducto == IdProducto).Sum(x => x.dCantidad) : 0;
                    break;
                case "04":

                    if (IdProducto == "N001-PD000000000")
                    {
                        string x = "";
                    }
                    var y = ListaVentas.Where(x => x.Mes == Mes && x.v_IdProducto == IdProducto).ToList();

                    CantidadMes = ListaVentas.Any() ? ListaVentas.Where(x => x.Mes == Mes && x.v_IdProducto == IdProducto).Sum(x => x.dCantidad) : 0;
                    break;
                case "05":
                    CantidadMes = ListaVentas.Any() ? ListaVentas.Where(x => x.Mes == Mes && x.v_IdProducto == IdProducto).Sum(x => x.dCantidad) : 0;
                    break;
                case "06":
                    CantidadMes = ListaVentas.Any() ? ListaVentas.Where(x => x.Mes == Mes && x.v_IdProducto == IdProducto).Sum(x => x.dCantidad) : 0;
                    break;
                case "07":
                    CantidadMes = ListaVentas.Any() ? ListaVentas.Where(x => x.Mes == Mes && x.v_IdProducto == IdProducto).Sum(x => x.dCantidad) : 0;
                    break;
                case "08":
                    CantidadMes = ListaVentas.Any() ? ListaVentas.Where(x => x.Mes == Mes && x.v_IdProducto == IdProducto).Sum(x => x.dCantidad) : 0;
                    break;
                case "09":
                    CantidadMes = ListaVentas.Any() ? ListaVentas.Where(x => x.Mes == Mes && x.v_IdProducto == IdProducto).Sum(x => x.dCantidad) : 0;
                    break;
                case "10":
                    CantidadMes = ListaVentas.Any() ? ListaVentas.Where(x => x.Mes == Mes && x.v_IdProducto == IdProducto).Sum(x => x.dCantidad) : 0;
                    break;
                case "11":
                    CantidadMes = ListaVentas.Any() ? ListaVentas.Where(x => x.Mes == Mes && x.v_IdProducto == IdProducto).Sum(x => x.dCantidad) : 0;
                    break;
                case "12":
                    CantidadMes = ListaVentas.Any() ? ListaVentas.Where(x => x.Mes == Mes && x.v_IdProducto == IdProducto).Sum(x => x.dCantidad) : 0;
                    break;
            }
            return CantidadMes;
        }
        public List<MesesEstadisticas> ObtenerMesesEstadisticasVentas(int Establecimiento, string PeriodoEstadistica)
        {
            using (SAMBHSEntitiesModelWin dbContext = new SAMBHSEntitiesModelWin())
            {
                var Periodo = PeriodoEstadistica;
                var VentasTotales = (from a in dbContext.venta
                                     where a.i_Eliminado == 0 && a.i_IdEstado == 1 && a.v_Periodo == Periodo && a.i_IdEstablecimiento == Establecimiento
                                     select new MesesEstadisticas
                                     {
                                         iMes = a.v_Mes.Trim(),
                                     }).ToList();
                var GuiasTotales = (from a in dbContext.guiaremision
                                    where a.i_Eliminado == 0 && a.i_IdEstado == 1 && a.v_Periodo == Periodo && a.i_IdEstablecimiento == Establecimiento
                                    && a.i_IdTipoGuia == (int)TiposDocumentos.GuiaInterna
                                    select new MesesEstadisticas
                                    {
                                        iMes = a.v_Mes.Trim(),
                                    }).ToList();

                var gvTotales = VentasTotales.Concat(GuiasTotales).ToList().GroupBy(x => new { x.iMes })
                              .Select(group => group.Last())
                              .OrderBy(o => o.iMes).ToList();
                return gvTotales;


            }

        }
        public List<MesesEstadisticas> ObtenerMesesEstadisticasCompras(int Establecimiento, string PeriodoEstadistica)
        {
            using (SAMBHSEntitiesModelWin dbContext = new SAMBHSEntitiesModelWin())
            {
                var Periodo = PeriodoEstadistica;
                var VentasTotales = (from a in dbContext.compra
                                     where a.i_Eliminado == 0 && a.i_IdEstado == 1 && a.v_Periodo == Periodo && a.i_IdEstablecimiento == Establecimiento
                                     select new MesesEstadisticas
                                     {
                                         iMes = a.v_Mes.Trim(),
                                     }).ToList();


                var gvTotales = VentasTotales.ToList().GroupBy(x => new { x.iMes })
                              .Select(group => group.Last())
                              .OrderBy(o => o.iMes).ToList();
                return gvTotales;


            }

        }
        public List<ReporteVendedorAnalitico> ReporteVendedorAnalitico(ref  OperationResult objOperationResult, DateTime FechaInicio, DateTime FechaFin, int TipoDoc, string IdVendedor, string Agrupar, int IdMoneda, string Marca, string Linea, string CodigoProducto, string Ordenar, int Establecimiento, int TipoDocumentoContable)
        {
            try
            {

                objOperationResult.Success = 1;
                using (SAMBHSEntitiesModelWin dbContext = new SAMBHSEntitiesModelWin())
                {


                    var Ventas =
                     (from A in dbContext.ventadetalle

                      join B in dbContext.venta on new { v = A.v_IdVenta, eliminado = 0 } equals new { v = B.v_IdVenta, eliminado = B.i_Eliminado.Value } into B_join
                      from B in B_join.DefaultIfEmpty()

                      join C in dbContext.documento on new { IdTipoDocumento = B.i_IdTipoDocumento.Value, eliminado = 0 } equals new { IdTipoDocumento = C.i_CodigoDocumento, eliminado = C.i_Eliminado.Value } into C_join
                      from C in C_join.DefaultIfEmpty()

                      join D in dbContext.vendedor on new { IdVendedor = B.v_IdVendedor, eliminado = 0 } equals new { IdVendedor = D.v_IdVendedor, eliminado = D.i_Eliminado.Value } into D_join
                      from D in D_join.DefaultIfEmpty()


                      join I in dbContext.productodetalle on new { pd = A.v_IdProductoDetalle, eliminado = 0 } equals new { pd = I.v_IdProductoDetalle, eliminado = I.i_Eliminado.Value } into I_join

                      from I in I_join.DefaultIfEmpty()

                      join J in dbContext.producto on new { p = I.v_IdProducto, eliminado = 0 } equals new { p = J.v_IdProducto, eliminado = J.i_Eliminado.Value } into J_join
                      from J in J_join.DefaultIfEmpty()

                      join K in dbContext.cliente on new { c = B.v_IdCliente } equals new { c = K.v_IdCliente } into K_join
                      from K in K_join.DefaultIfEmpty()

                      where (A.i_Eliminado == 0)
                      && (B.t_FechaRegistro >= FechaInicio
                      && B.t_FechaRegistro <= FechaFin)
                      && (B.i_IdTipoDocumento == TipoDoc || TipoDoc == -1)
                      && (B.v_IdVendedor == IdVendedor || IdVendedor == "-1")
                      && (J.v_IdLinea == Linea || Linea == "-1")
                      && (J.v_IdMarca == Marca || Marca == "-1")
                      && (J.v_CodInterno.Trim() == CodigoProducto || CodigoProducto == "")
                      && B.i_IdEstablecimiento == Establecimiento
                      select new
                      {


                          NroRegistro = B.v_Mes.Trim() + "-" + B.v_Correlativo.Trim(),
                          DFecha = B.t_FechaRegistro.Value,
                          NroDocumento = C.v_Siglas + " " + B.v_SerieDocumento.Trim() + "-" + B.v_CorrelativoDocumento.Trim(),
                          Producto = J == null ? "** PRODUCTO NO EXISTE **" : J.v_CodInterno.Trim() + "   " + J.v_Descripcion.Trim(),
                          Cantidad = B.i_IdEstado == 0 ? 0 : A.d_Cantidad == null ? 0 : C.i_UsadoDocumentoInverso != null && C.i_UsadoDocumentoInverso == 1 ? A.d_Cantidad.Value * -1 : A.d_Cantidad.Value,
                          PrecioUnitario = A.d_Precio == null ? 0 : C.i_UsadoDocumentoInverso != null && C.i_UsadoDocumentoInverso == 1 ? A.d_Precio.Value * -1 : A.d_Precio.Value,
                          ValorVenta = B.i_IdEstado == 0 ? 0 : A.d_ValorVenta == null ? 0 : C.i_UsadoDocumentoInverso != null && C.i_UsadoDocumentoInverso == 1 ? A.d_ValorVenta.Value * -1 : A.d_ValorVenta.Value,
                          PorcentajeComision = B.i_IdEstado == 0 ? 0 : 0,
                          Comision = B.i_IdEstado == 0 ? 0 : 0,
                          IdEstado = B.i_IdEstado.Value,
                          Estado = B.i_IdEstado == 0 ? "** A N U L A D O **" : "",
                          Grupo1 = D == null ? "VENDEDOR NO EXISTE" : "VENDEDOR :" + D.v_CodVendedor + " " + D.v_NombreCompleto.Trim(),
                          Grupo2 = Agrupar == "PRODUCTO" ? J == null ? "** PRODUCTO NO EXISTE **" : "PRODUCTO :" + J.v_CodInterno.Trim() + "   " + J.v_Descripcion.Trim() : Agrupar == "CLIENTE" ? "CLIENTE :" + (K.v_CodCliente + " " + K.v_ApePaterno + " " + K.v_ApeMaterno + " " + K.v_PrimerNombre + " " + K.v_RazonSocial).Trim() : Agrupar == "DOCUMENTO" ? "DOCUMENTO :" + C.v_Siglas + " " + B.v_SerieDocumento.Trim() + "-" + B.v_CorrelativoDocumento.Trim() : "",
                          NombreVendedor = D == null ? "VENDEDOR NO EXISTE" : D.v_NombreCompleto.Trim(),
                          IdMoneda = B.i_IdMoneda.Value,
                          Vendedor = D == null ? "VENDEDOR NO EXISTE" : D.v_CodVendedor.Trim() + " " + D.v_NombreCompleto.Trim(),
                          TipoCambio = B.d_TipoCambio.Value,
                          PrecioVenta = B.i_IdEstado == 0 ? 0 : A.d_PrecioVenta == null ? 0 : C.i_UsadoDocumentoInverso != null && C.i_UsadoDocumentoInverso == 1 ? A.d_PrecioVenta.Value * -1 : A.d_PrecioVenta.Value,
                          DocumentoContable = C.i_UsadoDocumentoContable == 1 ? "CONTABLE" : "NO CONTABLE",
                          UsadoDocumentoContable = C.i_UsadoDocumentoContable == 1 ? true : false,
                      }).ToList().Select(x => new ReporteVendedorAnalitico
                      {
                          NroRegistro = x.NroRegistro,
                          Fecha = x.DFecha.Date.Day.ToString("00") + "/" + x.DFecha.Date.Month.ToString("00") + "/" + x.DFecha.Date.Year.ToString(),
                          NroDocumento = x.NroDocumento,
                          Producto = x.Producto,
                          Cantidad = x.Cantidad,
                          PrecioUnitario = x.PrecioUnitario == 0 || x.TipoCambio == 0 ? 0 : x.IdMoneda == IdMoneda ? x.PrecioUnitario : IdMoneda == (int)Currency.Soles ? x.PrecioUnitario * x.TipoCambio : x.PrecioUnitario / x.TipoCambio,
                          ValorVenta = x.ValorVenta == 0 || x.TipoCambio == 0 ? 0 : x.IdMoneda == IdMoneda ? x.ValorVenta : IdMoneda == (int)Currency.Soles ? x.ValorVenta * x.TipoCambio : x.ValorVenta / x.TipoCambio,
                          PorcentajeComision = x.PorcentajeComision,
                          Comision = x.Comision,
                          IdEstado = x.IdEstado,
                          Estado = x.Estado,
                          Grupo1 = x.Grupo1,
                          Grupo2 = x.Grupo2,
                          SubTotal = "TOTAL " + x.NombreVendedor + " : ",
                          SubTotalGrupo2 = "SUB TOTAL " + Agrupar + " : ",
                          Vendedor = x.Vendedor,
                          PrecioVenta = x.PrecioVenta == 0 || x.TipoCambio == 0 ? 0 : x.IdMoneda == IdMoneda ? x.PrecioVenta : IdMoneda == (int)Currency.Soles ? x.PrecioVenta * x.TipoCambio : x.PrecioVenta / x.TipoCambio,
                          DFecha = x.DFecha,
                          DocumentoContable = x.DocumentoContable,
                          UsadoDocumentoContable = x.UsadoDocumentoContable,
                      }).ToList().AsQueryable();

                    if (TipoDocumentoContable == -1)
                    {

                        return Ventas.OrderBy(Ordenar).ToList();
                    }
                    else
                    {
                        if (TipoDocumentoContable == 1)
                        {
                            return Ventas.Where(o => o.UsadoDocumentoContable).OrderBy(Ordenar).ToList();
                        }
                        else return Ventas.Where(o => !o.UsadoDocumentoContable).OrderBy(Ordenar).ToList();
                    }
                }


            }
            catch (Exception ex)
            {

                objOperationResult.Success = 0;
                return null;



            }
        }

        public List<ReporteVendedorResumen> ReporteVendedorResumen(ref  OperationResult objOperationResult, DateTime FechaInicio, DateTime FechaFin, string Agrupar, int IdMoneda, int Documento, string Linea, string Marca, string Vendedor, string Producto, int Establecimiento, string Ordenar, int TipoDocumentoContable)
        {

            try
            {
                ReporteVendedorResumen objReporte = new ReporteVendedorResumen();
                List<ReporteVendedorResumen> ListaFinal = new List<ReporteVendedorResumen>();
                List<ReporteVendedorResumen> ListaAgrupada = new List<ReporteVendedorResumen>();
                objOperationResult.Success = 1;
                using (SAMBHSEntitiesModelWin dbContext = new SAMBHSEntitiesModelWin())
                {

                    List<ReporteVendedorResumen> Ventas = (from a in dbContext.ventadetalle

                                                           join b in dbContext.venta on new { vd = a.v_IdVenta, eliminado = 0 } equals new { vd = b.v_IdVenta, eliminado = b.i_Eliminado.Value } into b_join

                                                           from b in b_join.DefaultIfEmpty()

                                                           join c in dbContext.documento on new { d = b.i_IdTipoDocumento.Value, eliminado = 0 } equals new { d = c.i_CodigoDocumento, eliminado = c.i_Eliminado.Value } into c_join

                                                           from c in c_join.DefaultIfEmpty()
                                                           join d in dbContext.vendedor on new { v = b.v_IdVendedor, eliminado = 0 } equals new { v = d.v_IdVendedor, eliminado = d.i_Eliminado.Value } into d_join
                                                           from d in d_join.DefaultIfEmpty()

                                                           join e in dbContext.productodetalle on new { pd = a.v_IdProductoDetalle, eliminado = 0 } equals new { pd = e.v_IdProductoDetalle, eliminado = e.i_Eliminado.Value } into e_join

                                                           from e in e_join.DefaultIfEmpty()

                                                           join g in dbContext.producto on new { p = e.v_IdProducto, eliminado = 0 } equals new { p = g.v_IdProducto, eliminado = g.i_Eliminado.Value } into g_join

                                                           from g in g_join.DefaultIfEmpty()

                                                           join f in dbContext.cliente on new { c = b.v_IdCliente, eliminado = 0 } equals new { c = f.v_IdCliente, eliminado = f.i_Eliminado.Value } into f_join

                                                           from f in f_join.DefaultIfEmpty()

                                                           join h in dbContext.datahierarchy on new { cp = b.i_IdCondicionPago.Value, Grupo = 23, eliminado = 0 } equals new { cp = h.i_ItemId, Grupo = h.i_GroupId, eliminado = h.i_IsDeleted.Value } into h_join

                                                           from h in h_join.DefaultIfEmpty()

                                                           where a.i_Eliminado == 0
                                                           && b.t_FechaRegistro >= FechaInicio && b.t_FechaRegistro <= FechaFin
                                                           && (b.i_IdTipoDocumento == Documento || Documento == -1)
                                                           && (g.v_IdLinea == Linea || Linea == "-1")
                                                           && (g.v_IdMarca == Marca || Marca == "-1")
                                                           && (b.v_IdVendedor == Vendedor || Vendedor == "-1")
                                                           && (e.producto.v_CodInterno.Trim() == Producto.Trim() || Producto.Trim() == "")
                                                           && e_join.Any(o => o.v_IdProductoDetalle == a.v_IdProductoDetalle)
                                                           && b.i_IdEstablecimiento == Establecimiento
                                                           select new
                                                           {

                                                               ValorVentaTotal = b.i_IdEstado == 0 ? 0 : b.d_ValorVenta == null ? 0 : IdMoneda == b.i_IdMoneda ? c.i_UsadoDocumentoInverso != null && c.i_UsadoDocumentoInverso.Value == 1 ? b.d_ValorVenta.Value * -1 : b.d_ValorVenta.Value :
                                                                                      IdMoneda == (int)Currency.Soles ? c.i_UsadoDocumentoInverso != null && c.i_UsadoDocumentoInverso == 1 ? b.d_ValorVenta.Value * b.d_TipoCambio.Value * -1 : b.d_ValorVenta.Value * b.d_TipoCambio.Value :
                                                                                      IdMoneda == (int)Currency.Dolares ? c.i_UsadoDocumentoInverso != null && c.i_UsadoDocumentoInverso == 1 ? (b.d_ValorVenta.Value / b.d_TipoCambio.Value) * -1 : b.d_ValorVenta.Value / b.d_TipoCambio.Value : 0,

                                                               Vendedor = d == null ? "** SIN VENDEDOR**" : d.v_CodVendedor.Trim() + " " + d.v_NombreCompleto.Trim(),
                                                               IdVendedor = d.v_IdVendedor,
                                                               Grupo1 = d == null ? "VENDEDOR NO EXISTE" : d.v_CodVendedor.Trim() + " " + d.v_NombreCompleto.Trim(),
                                                               Grupo2 = Agrupar == "SINAGRUPAR" ? c == null ? "VENDEDOR NO EXISTE" : d.v_CodVendedor.Trim() + " " + d.v_NombreCompleto.Trim() : Agrupar == "PRODUCTO" ? e == null ? "** PRODUCTO NO EXISTE **" : e.producto.v_CodInterno.Trim() + " " + e.producto.v_Descripcion.Trim() : Agrupar == "CLIENTE" ? f == null ? "** CLIENTE NO EXISTE **" : (f.v_ApePaterno + " " + f.v_ApeMaterno + " " + f.v_PrimerNombre + " " + f.v_RazonSocial).Trim() : Agrupar == "DOCUMENTO" ? c.v_Siglas + " " + b.v_SerieDocumento.Trim() + "-" + b.v_CorrelativoDocumento.Trim() : "",
                                                               ValorVentaProducto = b.i_IdEstado == 0 ? 0 : a.d_ValorVenta == null ? 0 : IdMoneda == b.i_IdMoneda ? c.i_UsadoDocumentoInverso != null && c.i_UsadoDocumentoInverso.Value == 1 ? a.d_ValorVenta.Value * -1 : a.d_ValorVenta.Value :
                                                                                      IdMoneda == (int)Currency.Soles ? c.i_UsadoDocumentoInverso != null && c.i_UsadoDocumentoInverso == 1 ? a.d_ValorVenta.Value * b.d_TipoCambio.Value * -1 : a.d_ValorVenta.Value * b.d_TipoCambio.Value :
                                                                                      IdMoneda == (int)Currency.Dolares ? c.i_UsadoDocumentoInverso != null && c.i_UsadoDocumentoInverso == 1 ? (a.d_ValorVenta.Value / b.d_TipoCambio.Value) * -1 : a.d_ValorVenta.Value / b.d_TipoCambio.Value : 0,

                                                               Documento = a == null ? "** DOCUMENO NO EXISTE **" : c.v_Siglas + " " + b.v_SerieDocumento.Trim() + "-" + b.v_CorrelativoDocumento.Trim(),
                                                               Cliente = f == null ? "** CLIENTE NO EXISTE **" : f.v_IdCliente,
                                                               Producto = e == null ? "** PRODUCTO NO EXISTE **" : e.v_IdProducto,
                                                               IdVenta = b.v_IdVenta,
                                                               IdMoneda = b.i_IdMoneda.Value,
                                                               TipoCambio = b.d_TipoCambio.Value,
                                                               CodigoProducto = g.v_CodInterno,
                                                               PrecioVentaTotal = b.i_IdEstado == 0 ? 0 : b.d_Total == null ? 0 : IdMoneda == b.i_IdMoneda ? c.i_UsadoDocumentoInverso != null && c.i_UsadoDocumentoInverso.Value == 1 ? b.d_Total.Value * -1 : b.d_Total.Value :
                                                                                      IdMoneda == (int)Currency.Soles ? c.i_UsadoDocumentoInverso != null && c.i_UsadoDocumentoInverso == 1 ? b.d_Total.Value * b.d_TipoCambio.Value * -1 : b.d_Total.Value * b.d_TipoCambio.Value :
                                                                                      IdMoneda == (int)Currency.Dolares ? c.i_UsadoDocumentoInverso != null && c.i_UsadoDocumentoInverso == 1 ? (b.d_Total.Value / b.d_TipoCambio.Value) * -1 : b.d_Total.Value / b.d_TipoCambio.Value : 0,

                                                               PrecioVentaProducto = b.i_IdEstado == 0 ? 0 : a.d_PrecioVenta == null ? 0 : IdMoneda == b.i_IdMoneda ? c.i_UsadoDocumentoInverso != null && c.i_UsadoDocumentoInverso.Value == 1 ? a.d_PrecioVenta.Value * -1 : a.d_PrecioVenta.Value :
                                                                                     IdMoneda == (int)Currency.Soles ? c.i_UsadoDocumentoInverso != null && c.i_UsadoDocumentoInverso == 1 ? a.d_PrecioVenta.Value * b.d_TipoCambio.Value * -1 : a.d_PrecioVenta.Value * b.d_TipoCambio.Value :
                                                                                     IdMoneda == (int)Currency.Dolares ? c.i_UsadoDocumentoInverso != null && c.i_UsadoDocumentoInverso == 1 ? (a.d_PrecioVenta.Value / b.d_TipoCambio.Value) * -1 : a.d_PrecioVenta.Value / b.d_TipoCambio.Value : 0,

                                                               CondicioPago = g == null ? "" : h.v_Value1,
                                                               Fecha = b.t_FechaRegistro.Value,
                                                               NombreCliente = b.i_IdEstado == 0 ? "**ANULADO**" : f == null ? "** CLIENTE NO EXISTE **" : (f.v_ApePaterno + " " + f.v_ApeMaterno + " " + f.v_PrimerNombre + " " + f.v_RazonSocial).Trim(),
                                                               CantidadProducto = b.i_IdEstado == 0 ? 0 : c.i_UsadoDocumentoInverso == 1 ? (a.d_Cantidad * -1) ?? 0 : a.d_Cantidad,
                                                               DocumentoContable = c.i_UsadoDocumentoContable == 1 ? "CONTABLE" : "NO CONTABLE",
                                                               UsadoDocumentoContable = c.i_UsadoDocumentoContable == 1 ? true : false,
                                                           }
                                    ).ToList().Select(x => new ReporteVendedorResumen


                                    {
                                        ValorVentaTotal = x.ValorVentaTotal,
                                        Vendedor = x.Vendedor,
                                        IdVendedor = x.IdVendedor,
                                        Grupo1 = x.Grupo1,
                                        Grupo2 = x.Grupo2,
                                        ValorVentaProducto = x.ValorVentaProducto,
                                        Documento = x.Documento,
                                        Cliente = x.Cliente,
                                        Producto = x.Producto,
                                        IdVenta = x.IdVenta,
                                        IdMoneda = x.IdMoneda,
                                        TipoCambio = x.TipoCambio,
                                        CodigoProducto = x.CodigoProducto,
                                        PrecioVentaTotal = x.PrecioVentaTotal,
                                        PrecioVentaProducto = x.PrecioVentaProducto,
                                        CondicioPago = x.CondicioPago,
                                        Fecha = x.Fecha.Date.Day.ToString("00") + "/" + x.Fecha.Date.Month.ToString("00") + "/" + x.Fecha.Date.Year.ToString(),
                                        NombreCliente = x.NombreCliente,
                                        CantidadProducto = x.CantidadProducto.Value,
                                        DocumentoContable = x.DocumentoContable,
                                        UsadoDocumentoContable = x.UsadoDocumentoContable,


                                    }).ToList();

                    Ventas = TipoDocumentoContable == 1 ? Ventas.Where(o => o.UsadoDocumentoContable).ToList() : TipoDocumentoContable == 2 ? Ventas.Where(o => !o.UsadoDocumentoContable).ToList() : Ventas;

                    if (Agrupar == "SINAGRUPAR")
                    {
                        //ListaAgrupada = Ventas.GroupBy(x => new { x.IdVendedor })
                        //               .Select(group => group.Last())
                        //               .OrderBy(o => o.IdVendedor).ToList();
                        ListaAgrupada = Ventas.GroupBy(x => new { x.IdVendedor }).Select(group =>
                        {
                            var ventita = group.LastOrDefault();
                            ventita.CantidadTotal = group.Sum(o => o.CantidadProducto);
                            return ventita;

                        }).OrderBy(o => o.IdVendedor).ToList();
                    }
                    else if (Agrupar == "PRODUCTO")
                    {
                        ListaAgrupada = Ventas.GroupBy(x => new { x.IdVendedor, x.Grupo2 }).Select(group =>
                        {

                            var ventita = group.LastOrDefault();
                            ventita.CantidadProducto = group.Sum(o => o.CantidadProducto);
                            ventita.CantidadTotal = group.Sum(o => o.CantidadProducto);
                            ventita.ValorVentaProducto = group.Sum(o => o.ValorVentaProducto);
                            ventita.PrecioVentaProducto = group.Sum(o => o.PrecioVentaProducto);
                            return ventita;

                        }).OrderBy(o => o.IdVendedor).ToList();
                    }
                    else
                    {
                        //ListaAgrupada = Ventas.GroupBy(x => new { x.IdVendedor, x.Grupo2 })
                        //                  .Select(group => group.Last())
                        //                  .OrderBy(o => o.IdVendedor).ToList();

                        ListaAgrupada = Ventas.GroupBy(x => new { x.IdVendedor, x.Grupo2 }).Select(group =>
                        {
                            var ventita = group.LastOrDefault();
                            ventita.CantidadTotal = group.Sum(o => o.CantidadProducto);
                            return ventita;


                        }).OrderBy(o => o.IdVendedor).ToList();



                    }
                    foreach (var item in ListaAgrupada)
                    {
                        objReporte = new ReporteVendedorResumen();
                        var IdVentas = Ventas.Where(x => x.IdVendedor == item.IdVendedor);
                        if (Producto == "")
                        {
                            objReporte.ValorVenta = Agrupar == "SINAGRUPAR" ? Ventas.Where(x => x.IdVendedor == item.IdVendedor).GroupBy(x => new { x.IdVenta }).Select(a => a.Last()).ToList().Where(x => x.IdVendedor == item.IdVendedor).Any() ? Ventas.Where(x => x.IdVendedor == item.IdVendedor).GroupBy(x => new { x.IdVenta }).Select(a => a.Last()).ToList().Where(x => x.IdVendedor == item.IdVendedor).Sum(x => x.ValorVentaTotal) : 0 :
                            Agrupar == "PRODUCTO" ? Ventas.Where(x => x.IdVendedor == item.IdVendedor && x.Producto == item.Producto).ToList().GroupBy(x => new { x.IdVenta }).Select(a => a.Last()).ToList().Any() ? Ventas.Where(x => x.IdVendedor == item.IdVendedor && x.Producto == item.Producto).ToList().GroupBy(x => new { x.IdVenta }).Select(a => a.Last()).ToList().LastOrDefault().ValorVentaProducto : 0 :
                            Agrupar == "CLIENTE" ? Ventas.Where(x => x.IdVendedor == item.IdVendedor && x.Cliente == item.Cliente).ToList().GroupBy(x => new { x.IdVenta }).Select(a => a.Last()).ToList().Any() ? Ventas.Where(x => x.IdVendedor == item.IdVendedor && x.Cliente == item.Cliente).ToList().GroupBy(x => new { x.IdVenta }).Select(a => a.Last()).ToList().Sum(x => x.ValorVentaTotal) : 0 :
                            Agrupar == "DOCUMENTO" ? Ventas.Where(x => x.IdVendedor == item.IdVendedor && x.Documento == item.Documento).ToList().GroupBy(x => new { x.IdVenta }).Select(a => a.Last()).ToList().Any() ? Ventas.Where(x => x.IdVendedor == item.IdVendedor && x.Documento == item.Documento).ToList().GroupBy(x => new { x.IdVenta }).Select(a => a.Last()).ToList().Sum(z => z.ValorVentaTotal) : 0 : 0;

                            objReporte.PrecioVenta = Agrupar == "SINAGRUPAR" ? Ventas.Where(x => x.IdVendedor == item.IdVendedor).GroupBy(x => new { x.IdVenta }).Select(a => a.Last()).ToList().Where(x => x.IdVendedor == item.IdVendedor).Any() ? Ventas.Where(x => x.IdVendedor == item.IdVendedor).GroupBy(x => new { x.IdVenta }).Select(a => a.Last()).ToList().Where(x => x.IdVendedor == item.IdVendedor).Sum(x => x.PrecioVentaTotal) : 0 :
                            Agrupar == "PRODUCTO" ? Ventas.Where(x => x.IdVendedor == item.IdVendedor && x.Producto == item.Producto).ToList().GroupBy(x => new { x.IdVenta }).Select(a => a.Last()).ToList().Any() ? Ventas.Where(x => x.IdVendedor == item.IdVendedor && x.Producto == item.Producto).ToList().GroupBy(x => new { x.IdVenta }).Select(a => a.Last()).ToList().LastOrDefault().PrecioVentaProducto : 0 :
                            Agrupar == "CLIENTE" ? Ventas.Where(x => x.IdVendedor == item.IdVendedor && x.Cliente == item.Cliente).ToList().GroupBy(x => new { x.IdVenta }).Select(a => a.Last()).ToList().Any() ? Ventas.Where(x => x.IdVendedor == item.IdVendedor && x.Cliente == item.Cliente).ToList().GroupBy(x => new { x.IdVenta }).Select(a => a.Last()).ToList().Sum(x => x.PrecioVentaTotal) : 0 :
                            Agrupar == "DOCUMENTO" ? Ventas.Where(x => x.IdVendedor == item.IdVendedor && x.Documento == item.Documento).ToList().GroupBy(x => new { x.IdVenta }).Select(a => a.Last()).ToList().Any() ? Ventas.Where(x => x.IdVendedor == item.IdVendedor && x.Documento == item.Documento).ToList().GroupBy(x => new { x.IdVenta }).Select(a => a.Last()).ToList().Sum(z => z.PrecioVentaTotal) : 0 : 0;


                            objReporte.Cantidad = Agrupar == "SINAGRUPAR" ? Ventas.Where(x => x.IdVendedor == item.IdVendedor).GroupBy(x => new { x.IdVenta }).Select(a => a.Last()).ToList().Where(x => x.IdVendedor == item.IdVendedor).Any() ? Ventas.Where(x => x.IdVendedor == item.IdVendedor).GroupBy(x => new { x.IdVenta }).Select(a => a.Last()).ToList().Where(x => x.IdVendedor == item.IdVendedor).Sum(x => x.CantidadTotal) : 0 :
                            Agrupar == "PRODUCTO" ? Ventas.Where(x => x.IdVendedor == item.IdVendedor && x.Producto == item.Producto).ToList().GroupBy(x => new { x.IdVenta }).Select(a => a.Last()).ToList().Any() ? Ventas.Where(x => x.IdVendedor == item.IdVendedor && x.Producto == item.Producto).ToList().GroupBy(x => new { x.IdVenta }).Select(a => a.Last()).ToList().LastOrDefault().CantidadProducto : 0 :
                            Agrupar == "CLIENTE" ? Ventas.Where(x => x.IdVendedor == item.IdVendedor && x.Cliente == item.Cliente).ToList().GroupBy(x => new { x.IdVenta }).Select(a => a.Last()).ToList().Any() ? Ventas.Where(x => x.IdVendedor == item.IdVendedor && x.Cliente == item.Cliente).ToList().GroupBy(x => new { x.IdVenta }).Select(a => a.Last()).ToList().Sum(x => x.CantidadTotal) : 0 :
                            Agrupar == "DOCUMENTO" ? Ventas.Where(x => x.IdVendedor == item.IdVendedor && x.Documento == item.Documento).ToList().GroupBy(x => new { x.IdVenta }).Select(a => a.Last()).ToList().Any() ? Ventas.Where(x => x.IdVendedor == item.IdVendedor && x.Documento == item.Documento).ToList().GroupBy(x => new { x.IdVenta }).Select(a => a.Last()).ToList().Sum(z => z.CantidadTotal) : 0 : 0;




                        }
                        else
                        {
                            objReporte.ValorVenta = Agrupar == "SINAGRUPAR" ? IdVentas.GroupBy(x => new { x.IdVenta }).Select(a => a.Last()).ToList().Where(x => x.IdVendedor == item.IdVendedor && x.CodigoProducto == item.CodigoProducto).Any() ? IdVentas.GroupBy(x => new { x.IdVenta }).Select(a => a.Last()).ToList().Where(x => x.IdVendedor == item.IdVendedor && x.CodigoProducto == item.CodigoProducto).Sum(x => x.ValorVentaProducto) : 0 :
                                    Agrupar == "PRODUCTO" ? Ventas.Where(x => x.IdVendedor == item.IdVendedor && x.Producto == item.Producto).ToList().GroupBy(x => new { x.IdVenta }).Select(a => a.Last()).ToList().Where(x => x.CodigoProducto == item.CodigoProducto).Any() ? Ventas.Where(x => x.IdVendedor == item.IdVendedor && x.Producto == item.Producto).ToList().GroupBy(x => new { x.IdVenta }).Select(a => a.Last()).ToList().Where(x => x.CodigoProducto == item.CodigoProducto).LastOrDefault().ValorVentaProducto : 0 :
                                    Agrupar == "CLIENTE" ? Ventas.Where(x => x.IdVendedor == item.IdVendedor && x.Cliente == item.Cliente).ToList().GroupBy(x => new { x.IdVenta }).Select(a => a.Last()).ToList().Where(x => x.CodigoProducto == item.CodigoProducto).Any() ? Ventas.Where(x => x.IdVendedor == item.IdVendedor && x.Cliente == item.Cliente).ToList().GroupBy(x => new { x.IdVenta }).Select(a => a.Last()).ToList().Where(x => x.CodigoProducto == item.CodigoProducto).Sum(x => x.ValorVentaProducto) : 0 :
                                    Agrupar == "DOCUMENTO" ? Ventas.Where(x => x.IdVendedor == item.IdVendedor && x.Documento == item.Documento).ToList().GroupBy(x => new { x.IdVenta }).Select(a => a.Last()).ToList().Where(x => x.CodigoProducto == item.CodigoProducto).Any() ? Ventas.Where(x => x.IdVendedor == item.IdVendedor && x.Documento == item.Documento).ToList().GroupBy(x => new { x.IdVenta }).Select(a => a.Last()).ToList().Where(x => x.CodigoProducto == item.CodigoProducto).Sum(z => z.ValorVentaProducto) : 0 : 0;

                            objReporte.PrecioVenta = Agrupar == "SINAGRUPAR" ? IdVentas.GroupBy(x => new { x.IdVenta }).Select(a => a.Last()).ToList().Where(x => x.IdVendedor == item.IdVendedor && x.CodigoProducto == item.CodigoProducto).Any() ? IdVentas.GroupBy(x => new { x.IdVenta }).Select(a => a.Last()).ToList().Where(x => x.IdVendedor == item.IdVendedor && x.CodigoProducto == item.CodigoProducto).Sum(x => x.PrecioVentaProducto) : 0 :
                                   Agrupar == "PRODUCTO" ? Ventas.Where(x => x.IdVendedor == item.IdVendedor && x.Producto == item.Producto).ToList().GroupBy(x => new { x.IdVenta }).Select(a => a.Last()).ToList().Where(x => x.CodigoProducto == item.CodigoProducto).Any() ? Ventas.Where(x => x.IdVendedor == item.IdVendedor && x.Producto == item.Producto).ToList().GroupBy(x => new { x.IdVenta }).Select(a => a.Last()).ToList().Where(x => x.CodigoProducto == item.CodigoProducto).LastOrDefault().PrecioVentaProducto : 0 :
                                   Agrupar == "CLIENTE" ? Ventas.Where(x => x.IdVendedor == item.IdVendedor && x.Cliente == item.Cliente).ToList().GroupBy(x => new { x.IdVenta }).Select(a => a.Last()).ToList().Where(x => x.CodigoProducto == item.CodigoProducto).Any() ? Ventas.Where(x => x.IdVendedor == item.IdVendedor && x.Cliente == item.Cliente).ToList().GroupBy(x => new { x.IdVenta }).Select(a => a.Last()).ToList().Where(x => x.CodigoProducto == item.CodigoProducto).Sum(x => x.PrecioVentaProducto) : 0 :
                                   Agrupar == "DOCUMENTO" ? Ventas.Where(x => x.IdVendedor == item.IdVendedor && x.Documento == item.Documento).ToList().GroupBy(x => new { x.IdVenta }).Select(a => a.Last()).ToList().Where(x => x.CodigoProducto == item.CodigoProducto).Any() ? Ventas.Where(x => x.IdVendedor == item.IdVendedor && x.Documento == item.Documento).ToList().GroupBy(x => new { x.IdVenta }).Select(a => a.Last()).ToList().Where(x => x.CodigoProducto == item.CodigoProducto).Sum(z => z.PrecioVentaProducto) : 0 : 0;

                            objReporte.Cantidad = Agrupar == "SINAGRUPAR" ? IdVentas.GroupBy(x => new { x.IdVenta }).Select(a => a.Last()).ToList().Where(x => x.IdVendedor == item.IdVendedor && x.CodigoProducto == item.CodigoProducto).Any() ? IdVentas.GroupBy(x => new { x.IdVenta }).Select(a => a.Last()).ToList().Where(x => x.IdVendedor == item.IdVendedor && x.CodigoProducto == item.CodigoProducto).LastOrDefault().CantidadProducto : 0 :
                                  Agrupar == "PRODUCTO" ? Ventas.Where(x => x.IdVendedor == item.IdVendedor && x.Producto == item.Producto).ToList().GroupBy(x => new { x.IdVenta }).Select(a => a.Last()).ToList().Where(x => x.CodigoProducto == item.CodigoProducto).Any() ? Ventas.Where(x => x.IdVendedor == item.IdVendedor && x.Producto == item.Producto).ToList().GroupBy(x => new { x.IdVenta }).Select(a => a.Last()).ToList().Where(x => x.CodigoProducto == item.CodigoProducto).LastOrDefault().CantidadProducto : 0 :
                                  Agrupar == "CLIENTE" ? Ventas.Where(x => x.IdVendedor == item.IdVendedor && x.Cliente == item.Cliente).ToList().GroupBy(x => new { x.IdVenta }).Select(a => a.Last()).ToList().Where(x => x.CodigoProducto == item.CodigoProducto).Any() ? Ventas.Where(x => x.IdVendedor == item.IdVendedor && x.Cliente == item.Cliente).ToList().GroupBy(x => new { x.IdVenta }).Select(a => a.Last()).ToList().Where(x => x.CodigoProducto == item.CodigoProducto).LastOrDefault().CantidadProducto : 0 :
                                  Agrupar == "DOCUMENTO" ? Ventas.Where(x => x.IdVendedor == item.IdVendedor && x.Documento == item.Documento).ToList().GroupBy(x => new { x.IdVenta }).Select(a => a.Last()).ToList().Where(x => x.CodigoProducto == item.CodigoProducto).Any() ? Ventas.Where(x => x.IdVendedor == item.IdVendedor && x.Documento == item.Documento).ToList().GroupBy(x => new { x.IdVenta }).Select(a => a.Last()).ToList().Where(x => x.CodigoProducto == item.CodigoProducto).LastOrDefault().CantidadProducto : 0 : 0;


                        }

                        objReporte.Vendedor = item.Vendedor;
                        objReporte.IdVendedor = item.IdVendedor;
                        objReporte.Grupo1 = item.Grupo1;
                        objReporte.Grupo2 = item.Grupo2;
                        objReporte.Fecha = item.Fecha;
                        objReporte.CondicioPago = item.CondicioPago;
                        objReporte.NombreCliente = item.NombreCliente;

                        ListaFinal.Add(objReporte);
                    }


                    if (Ordenar == "Vendedor")
                    {
                        return ListaFinal.OrderBy(o => o.Grupo1).ThenBy(o => o.Vendedor).ToList();
                    }
                    else
                        if (Ordenar == "NroDocumento")
                        {
                            return ListaFinal.OrderBy(o => o.Grupo1).ThenBy(o => o.Grupo2).ToList();
                        }
                        else return ListaFinal.OrderBy(o => o.Grupo1).ThenBy(o => o.Cantidad).ToList();

                }
            }
            catch (Exception ex)
            {
                objOperationResult.Success = 0;
                return null;
            }
        }

        public List<ReporteCostoUtilidadDetallado> ReporteCostoUtilidadDetallado(ref OperationResult objOperationResult, int MesInicio, int MesFin, string IdVendedor, int IdAlmacen, string NroPedidoInicio, string NroPedidoFin, int MonedaReporte, string Periodo)
        {

            try
            {

                objOperationResult.Success = 1;
                List<ReporteCostoUtilidadDetallado> Ventas = new List<ReporteCostoUtilidadDetallado>();
                List<ReporteCostoUtilidadDetallado> SaldosIniciales = new List<ReporteCostoUtilidadDetallado>();
                List<ReporteCostoUtilidadDetallado> Compras = new List<ReporteCostoUtilidadDetallado>();
                List<ReporteCostoUtilidadDetallado> ListaFinal = new List<ReporteCostoUtilidadDetallado>();
                List<String> ListaTemporal = new List<String>();

                using (SAMBHSEntitiesModelWin dbContext = new SAMBHSEntitiesModelWin())
                {


                    var NotasIngreso = (from a in dbContext.movimiento
                                        join b in dbContext.movimientodetalle on new { md = a.v_IdMovimiento, eliminado = 0 } equals new { md = b.v_IdMovimiento, eliminado = b.i_Eliminado.Value } into b_join
                                        from b in b_join.DefaultIfEmpty()

                                        where a.i_Eliminado == 0 && a.v_OrigenTipo == "I" && a.i_IdTipoMovimiento == 1

                                        select new movimientoDto
                                        {
                                            v_OrigenRegPeriodo = a.v_OrigenRegPeriodo,
                                            v_OrigenRegMes = a.v_OrigenRegMes,
                                            v_OrigenRegCorrelativo = a.v_OrigenRegCorrelativo,
                                            Total = a.i_IdMoneda == MonedaReporte ? b.d_Total ?? 0 : b.d_TotalCambio ?? 0,
                                            v_IdProductoDetalle = b.v_IdProductoDetalle,
                                            v_NroPedido = string.IsNullOrEmpty(b.v_NroPedido) ? "" : b.v_NroPedido.Trim(),

                                        }).ToList();


                    List<ReporteCostoUtilidadDetalladoDetalles> Importaciones = (from a in dbContext.importaciondetalleproducto

                                                                                 join b in dbContext.importacion on new { i = a.v_IdImportacion, eliminado = 0 } equals new { i = b.v_IdImportacion, eliminado = b.i_Eliminado.Value } into b_join

                                                                                 from b in b_join.DefaultIfEmpty()

                                                                                 join c in dbContext.productodetalle on new { pd = a.v_IdProductoDetalle, eliminado = 0 } equals new { pd = c.v_IdProductoDetalle, eliminado = c.i_Eliminado.Value } into c_join

                                                                                 from c in c_join.DefaultIfEmpty()

                                                                                 join d in dbContext.producto on new { p = c.v_IdProducto, eliminado = 0 } equals new { p = d.v_IdProducto, eliminado = d.i_Eliminado.Value } into d_join

                                                                                 from d in d_join.DefaultIfEmpty()

                                                                                 join e in dbContext.cliente on new { c = a.v_IdCliente, eliminado = 0 } equals new { c = e.v_IdCliente, eliminado = e.i_Eliminado.Value } into e_join
                                                                                 from e in e_join.DefaultIfEmpty()

                                                                                 join f in dbContext.documento on new { d = b.i_IdTipoDocumento.Value, eliminado = 0 } equals new { d = f.i_CodigoDocumento, eliminado = f.i_Eliminado.Value } into f_join
                                                                                 from f in f_join.DefaultIfEmpty()

                                                                                 join g in dbContext.datahierarchy on new { Grupo = 53, eliminado = 0, serie = b.i_IdSerieDocumento.Value } equals new { Grupo = g.i_GroupId, eliminado = g.i_IsDeleted.Value, serie = g.i_ItemId } into g_join

                                                                                 from g in g_join.DefaultIfEmpty()

                                                                                 where a.i_Eliminado == 0
                                                                                 && b.v_Periodo == Periodo && b.i_IdEstado == 1
                                                                                 select new
                                                                                 {
                                                                                     Modulo = "IMPORTACION",
                                                                                     NroPedido = string.IsNullOrEmpty(a.v_NroPedido) ? "" : a.v_NroPedido.Trim(),
                                                                                     Fecha = b.t_FechaRegistro.Value,
                                                                                     NroRegistro = b.v_Mes.Trim() + "" + b.v_Correlativo.Trim(),
                                                                                     NombreCliente = e == null ? "" : (e.v_ApePaterno + " " + e.v_ApeMaterno + " " + e.v_PrimerNombre + " " + e.v_RazonSocial).Trim(),
                                                                                     NroDocumento = f.v_Siglas + " " + g.v_Value1 + " " + b.v_CorrelativoDocumento,
                                                                                     Producto = d.v_CodInterno + " " + d.v_Descripcion,
                                                                                     ValorFob = b.i_IdMoneda == MonedaReporte ? a.d_ValorFob : MonedaReporte == (int)Currency.Soles ? a.d_ValorFob * b.d_TipoCambio : a.d_ValorFob / b.d_TipoCambio,
                                                                                     ValorFlete = b.i_IdMoneda == MonedaReporte ? a.d_Flete : MonedaReporte == (int)Currency.Soles ? a.d_Flete * b.d_TipoCambioDoc1 : a.d_Flete / b.d_TipoCambioDoc1,
                                                                                     Seguro = b.i_IdMoneda == MonedaReporte ? a.d_Seguro : MonedaReporte == (int)Currency.Soles ? a.d_Seguro * b.d_TipoCambioDoc2 : a.d_Seguro / b.d_TipoCambioDoc2,
                                                                                     Advalorem = b.i_IdMoneda == MonedaReporte ? a.d_AdValorem : MonedaReporte == (int)Currency.Soles ? a.d_AdValorem * b.d_TipoCambioDoc3 : a.d_AdValorem / b.d_TipoCambioDoc3,
                                                                                     Gastos = b.i_IdMoneda == MonedaReporte ? a.d_OtrosGastos : MonedaReporte == (int)Currency.Soles ? a.d_OtrosGastos * b.d_TipoCambio : a.d_OtrosGastos / b.d_TipoCambio,
                                                                                     // Costo = b.i_IdMoneda == MonedaReporte ? a.d_CostoUnitario : MonedaReporte == (int)Currency.Soles ? a.d_CostoUnitario * b.d_TipoCambio : a.d_CostoUnitario / b.d_TipoCambio,
                                                                                     Costo = b.i_IdMoneda == MonedaReporte ? a.d_CostoUnitario : a.d_CostoUnitarioCambio,
                                                                                     Cantidad = a.d_Cantidad ?? 0,
                                                                                     v_IdProductoDetalle = c.v_IdProductoDetalle,
                                                                                     Grupo = a.v_NroPedido,
                                                                                     v_IdImportacionDetalle = a.v_IdImportacionDetalleProducto,
                                                                                     Correlativo = b.v_Correlativo.Trim(),
                                                                                     Periodo = b.v_Periodo.Trim(),
                                                                                     Mes = b.v_Mes.Trim(),
                                                                                 }).ToList().Select(x =>
                                                                                 {
                                                                                     if (x.NroPedido == "ST0716243" && x.v_IdProductoDetalle == "N001-PE000004195")
                                                                                     {
                                                                                         string g = "";
                                                                                     }

                                                                                     var ggg = NotasIngreso.Where(o => o.v_IdProductoDetalle == "N001-PE000004195" && o.v_NroPedido == "ST0716243").ToList();
                                                                                     var NI = NotasIngreso.Where(o => o.v_IdProductoDetalle == x.v_IdProductoDetalle && o.v_OrigenRegPeriodo.Trim() == x.Periodo.Trim() && o.v_OrigenRegMes.Trim() == x.Mes.Trim()
                                                                                          && o.v_OrigenRegCorrelativo == x.Correlativo.Trim() && o.v_NroPedido == x.NroPedido).ToList();

                                                                                     return new ReporteCostoUtilidadDetalladoDetalles
                                                                                     {

                                                                                         NroPedido = x.NroPedido,
                                                                                         Modulo = x.Modulo,
                                                                                         Fecha = x.Fecha.Date.Day.ToString("00") + "/" + x.Fecha.Date.Month.ToString("00") + "/" + x.Fecha.Date.Year.ToString("00"),
                                                                                         NroRegistro = x.NroRegistro,
                                                                                         Cliente = x.NombreCliente,
                                                                                         Documento = x.NroDocumento,
                                                                                         Producto = x.Producto,
                                                                                         ValorFob = x.ValorFob ?? 0,
                                                                                         ValorFlete = x.ValorFlete ?? 0,
                                                                                         Seguro = x.Seguro ?? 0,
                                                                                         Advalorem = x.Advalorem ?? 0,
                                                                                         Gastos = x.Gastos ?? 0,
                                                                                         Costo = x.Costo ?? 0,
                                                                                         v_IdProductoDetalle = x.v_IdProductoDetalle,
                                                                                         Grupo = x.NroPedido,
                                                                                         v_IdImportacionDetalle = x.v_IdImportacionDetalle,
                                                                                         i_ConsideradoVentas = 0,
                                                                                         FechaD = x.Fecha,
                                                                                         Total = NI.Any() ? NI.Sum(o => o.Total) : 0,
                                                                                         Cantidad = x.Cantidad,
                                                                                     };
                                                                                 }).ToList();

                    SaldosIniciales = (from a in dbContext.movimientodetalle

                                       join b in dbContext.movimiento on new { m = a.v_IdMovimiento, eliminado = 0 } equals new { m = b.v_IdMovimiento, eliminado = b.i_Eliminado.Value } into b_join

                                       from b in b_join.DefaultIfEmpty()

                                       join c in dbContext.cliente on new { c = b.v_IdCliente, eliminado = 0 } equals new { c = c.v_IdCliente, eliminado = c.i_Eliminado.Value } into c_join

                                       from c in c_join.DefaultIfEmpty()

                                       join d in dbContext.documento on new { d = a.i_IdTipoDocumento.Value, eliminado = 0 } equals new { d = d.i_CodigoDocumento, eliminado = d.i_Eliminado.Value } into d_join

                                       from d in d_join.DefaultIfEmpty()

                                       join e in dbContext.productodetalle on new { pd = a.v_IdProductoDetalle, eliminado = 0 } equals new { pd = e.v_IdProductoDetalle, eliminado = e.i_Eliminado.Value } into e_join

                                       from e in e_join.DefaultIfEmpty()
                                       where a.i_Eliminado == 0
                                       && (b.v_OrigenTipo == null || b.v_OrigenTipo == "C")
                                      && b.i_IdTipoMovimiento == (int)TipoDeMovimiento.NotadeIngreso

                                        && b.v_Periodo == Periodo
                                       select new
                                       {
                                           NroPedido = a.v_NroPedido.Trim(),
                                           Modulo = b.v_OrigenTipo == null ? b.i_IdTipoMotivo == (int)TipoDeMovimiento.Inicial ? "NI/SALDO INICIAL" : b.i_IdTipoMotivo != (int)TipoDeMovimiento.Inicial ? "NOTA INGRESO" : b.v_OrigenTipo == "C" ? "COMPRA" : "COMPRA" : "COMPRA",
                                           NroRegistro = b.v_OrigenTipo == "C" ? b.v_OrigenRegMes.Trim() + " " + b.v_OrigenRegCorrelativo.Trim() : b.v_Mes.Trim() + " " + b.v_Correlativo.Trim(),
                                           Fecha = b.t_Fecha.Value,
                                           Cliente = c == null ? "** CLIENTE NO EXISTE **" : (c.v_ApeMaterno + " " + c.v_ApeMaterno + " " + c.v_PrimerNombre + " " + c.v_RazonSocial).Trim(),
                                           Documento = d.v_Siglas + " " + a.v_NumeroDocumento,
                                           Producto = e.producto == null ? "** PRODUCTO NO EXISTE**" : e.producto.v_CodInterno + " " + e.producto.v_Descripcion,
                                           ValorVenta = 0,
                                           Costo = b.i_IdMoneda == MonedaReporte ? a.d_Precio.Value : MonedaReporte == (int)Currency.Soles ? a.d_Precio.Value * b.d_TipoCambio.Value : a.d_Precio.Value / b.d_TipoCambio.Value,

                                           Margen = 0,
                                           Utilidad = 0,
                                           Grupo = a.v_NroPedido.Trim(),
                                           Mes = b.v_Mes.Trim(),
                                           v_IdProductoDetalle = e.v_IdProductoDetalle,
                                           v_IdMovimiento = b.v_IdMovimiento,
                                           Origen = b.v_OrigenTipo,
                                           v_IdMovimientoDetalle = a.v_IdMovimientoDetalle,


                                       }).ToList().AsQueryable().Select(x => new ReporteCostoUtilidadDetallado
                                       {
                                           NroPedido = x.NroPedido,
                                           Modulo = x.Modulo,
                                           NroRegistro = x.NroRegistro,
                                           Fecha = x.Fecha.Date.Day.ToString("00") + "/" + x.Fecha.Date.Month.ToString("00") + "/" + x.Fecha.Date.Year.ToString(),
                                           Cliente = x.Cliente,
                                           Documento = x.Documento,
                                           Producto = x.Producto,
                                           ValorVenta = x.ValorVenta,
                                           Costo = x.Costo,
                                           Margen = x.Margen,
                                           Utilidad = x.Utilidad,
                                           Grupo = "PEDIDO :" + x.Grupo,
                                           Mes = int.Parse(x.Mes),
                                           Orden = 2,
                                           v_IdProductoDetalle = x.v_IdProductoDetalle,
                                           v_IdMovimiento = x.v_IdMovimiento,
                                           Origen = x.Origen,
                                           v_IdMovimientoDetalle = x.v_IdMovimientoDetalle,
                                           i_ConsideradoVentas = 0,
                                           FechaD = x.Fecha,


                                       }).ToList();




                    Compras = (from a in dbContext.compradetalle

                               join b in dbContext.compra on new { m = a.v_IdCompra, eliminado = 0 } equals new { m = b.v_IdCompra, eliminado = b.i_Eliminado.Value } into b_join

                               from b in b_join.DefaultIfEmpty()

                               join c in dbContext.cliente on new { c = b.v_IdProveedor, eliminado = 0 } equals new { c = c.v_IdCliente, eliminado = c.i_Eliminado.Value } into c_join

                               from c in c_join.DefaultIfEmpty()

                               join d in dbContext.documento on new { d = b.i_IdTipoDocumento.Value, eliminado = 0 } equals new { d = d.i_CodigoDocumento, eliminado = d.i_Eliminado.Value } into d_join

                               from d in d_join.DefaultIfEmpty()

                               join e in dbContext.productodetalle on new { pd = a.v_IdProductoDetalle, eliminado = 0 } equals new { pd = e.v_IdProductoDetalle, eliminado = e.i_Eliminado.Value } into e_join

                               from e in e_join.DefaultIfEmpty()
                               where a.i_Eliminado == 0

                                && b.v_Periodo == Periodo && a.v_IdProductoDetalle == null
                               select new
                               {
                                   NroPedido = a.v_NroPedido.Trim(),
                                   Modulo = "COMPRA",
                                   NroRegistro = b.v_Mes.Trim() + b.v_Correlativo,
                                   Fecha = b.t_FechaRegistro.Value,
                                   Cliente = c == null ? "** CLIENTE NO EXISTE **" : (c.v_ApeMaterno + " " + c.v_ApeMaterno + " " + c.v_PrimerNombre + " " + c.v_RazonSocial).Trim(),
                                   Documento = d.v_Siglas + " " + b.v_SerieDocumento + " " + b.v_CorrelativoDocumento,
                                   Producto = e.producto == null ? "** PRODUCTO NO EXISTE**" : e.producto.v_CodInterno + " " + e.producto.v_Descripcion,
                                   ValorVenta = 0,
                                   Costo = b.i_IdMoneda == MonedaReporte ? a.d_Precio.Value : MonedaReporte == (int)Currency.Soles ? a.d_Precio.Value * b.d_TipoCambio.Value : a.d_Precio.Value / b.d_TipoCambio.Value,
                                   Margen = 0,
                                   Utilidad = 0,
                                   Grupo = a.v_NroPedido.Trim(),
                                   Mes = b.v_Mes.Trim(),
                                   v_IdProductoDetalle = e.v_IdProductoDetalle,
                                   v_IdMovimiento = b.v_IdCompra,
                                   Origen = "C",
                                   v_IdMovimientoDetalle = a.v_IdMovimientoDetalle,


                               }).ToList().AsQueryable().Select(x => new ReporteCostoUtilidadDetallado
                               {
                                   NroPedido = x.NroPedido,
                                   Modulo = x.Modulo,
                                   NroRegistro = x.NroRegistro,
                                   Fecha = x.Fecha.Date.Day.ToString("00") + "/" + x.Fecha.Date.Month.ToString("00") + "/" + x.Fecha.Date.Year.ToString(),
                                   Cliente = x.Cliente,
                                   Documento = x.Documento,
                                   Producto = x.Producto,
                                   ValorVenta = x.ValorVenta,
                                   Costo = x.Costo,
                                   Margen = x.Margen,
                                   Utilidad = x.Utilidad,
                                   Grupo = "PEDIDO :" + x.Grupo,
                                   Mes = int.Parse(x.Mes),
                                   Orden = 2,
                                   v_IdProductoDetalle = x.v_IdProductoDetalle,
                                   v_IdMovimiento = x.v_IdMovimiento,
                                   Origen = x.Origen,
                                   v_IdMovimientoDetalle = x.v_IdMovimientoDetalle,
                                   i_ConsideradoVentas = 0,
                                   FechaD = x.Fecha,


                               }).ToList();

                    SaldosIniciales = SaldosIniciales.Concat(Compras).ToList();

                    Ventas = (from a in dbContext.ventadetalle

                              join b in dbContext.venta on new { v = a.v_IdVenta, eliminado = 0 } equals new { v = b.v_IdVenta, eliminado = b.i_Eliminado.Value } into b_join

                              from b in b_join.DefaultIfEmpty()

                              join c in dbContext.cliente on new { c = b.v_IdCliente, eliminado = 0 } equals new { c = c.v_IdCliente, eliminado = c.i_Eliminado.Value } into c_join

                              from c in c_join.DefaultIfEmpty()

                              join d in dbContext.documento on new { d = b.i_IdTipoDocumento.Value, eliminado = 0 } equals new { d = d.i_CodigoDocumento, eliminado = d.i_Eliminado.Value } into d_join

                              from d in d_join.DefaultIfEmpty()

                              join e in dbContext.productodetalle on new { pd = a.v_IdProductoDetalle, eliminado = 0 } equals new { pd = e.v_IdProductoDetalle, eliminado = e.i_Eliminado.Value } into e_join

                              from e in e_join.DefaultIfEmpty()

                              join f in dbContext.producto on new { p = e.v_IdProducto, eliminado = 0 } equals new { p = f.v_IdProducto, eliminado = f.i_Eliminado.Value } into f_join
                              from f in f_join.DefaultIfEmpty()

                              where a.i_Eliminado == 0 && (b.v_IdVendedor == IdVendedor || IdVendedor == "-1") && (a.i_IdAlmacen == IdAlmacen || IdAlmacen == -1)
                              && b.i_IdEstado == 1 && b.v_Periodo == Periodo && a.i_Anticipio == 0
                              select new
                              {
                                  NroPedido = a.v_PedidoExportacion.Trim(),
                                  Modulo = "VENTA",
                                  NroRegistro = b.v_Mes.Trim() + " " + b.v_Correlativo.Trim(),
                                  Fecha = b.t_FechaRegistro.Value,
                                  Cliente = (c.v_ApePaterno + " " + c.v_ApeMaterno + " " + c.v_PrimerNombre + " " + c.v_RazonSocial).Trim(),
                                  Documento = d.v_Siglas + " " + b.v_SerieDocumento + " " + b.v_CorrelativoDocumento,
                                  Producto = f.v_CodInterno.Trim() + " " + f.v_Descripcion.Trim(),
                                  ValorVenta = b.i_IdMoneda == MonedaReporte ? a.d_ValorVenta : MonedaReporte == (int)Currency.Soles ? a.d_ValorVenta * b.d_TipoCambio : a.d_ValorVenta / b.d_TipoCambio,
                                  Costo = 0,
                                  Margen = 0,
                                  Utilidad = 0,
                                  Grupo = a.v_PedidoExportacion.Trim(),
                                  Mes = b.v_Mes.Trim(),
                                  v_IdProductoDetalle = e.v_IdProductoDetalle,
                                  CantidadVendida = a.d_Cantidad ?? 0,
                                  v_IdVenta = b.v_IdVenta,
                              }).ToList().AsQueryable().Select(x => new ReporteCostoUtilidadDetallado
                              {
                                  NroPedido = x.NroPedido,
                                  Modulo = x.Modulo,
                                  NroRegistro = x.NroRegistro,
                                  Fecha = x.Fecha.Date.Day.ToString("00") + "/" + x.Fecha.Date.Month.ToString("00") + "/" + x.Fecha.Date.Year.ToString(),
                                  Cliente = x.Cliente,
                                  Documento = x.Documento,
                                  Producto = x.Producto,
                                  ValorVenta = x.ValorVenta ?? 0,
                                  Costo = x.Costo,
                                  Margen = x.Margen,
                                  Utilidad = x.Utilidad,
                                  Grupo = "PEDIDO :" + x.Grupo,
                                  Mes = int.Parse(x.Mes),
                                  Orden = 1,
                                  v_IdProductoDetalle = x.v_IdProductoDetalle,
                                  CantidadVendida = x.CantidadVendida,
                                  FechaD = x.Fecha,
                                  v_IdVenta = x.v_IdVenta,

                              }).ToList();




                    //Ventas = Ventas.Where(x => x.Mes >= MesInicio && x.Mes <= MesFin).ToList().GroupBy(x => new { x.NroRegistro, x.v_IdProductoDetalle, x.NroPedido }) // antes del 20 abril del 2017
                    //          .Select(group => group.Last()).ToList().OrderBy(x => x.NroPedido).ToList();



                    Ventas = Ventas.Where(x => x.Mes >= MesInicio && x.Mes <= MesFin).ToList().GroupBy(x => new { x.v_IdVenta, x.v_IdProductoDetalle, x.NroPedido }) // se cambió el 20 abril del 2017  , debido a que una factura  habia dos productos del mismo codigo y solo estaba tomando la cantidad de uno de los productos
                     .Select(d =>
                     {

                         ReporteCostoUtilidadDetallado k = d.LastOrDefault();
                         k.CantidadVendida = d.Sum(o => o.CantidadVendida);
                         k.ValorVenta = d.Sum(o => o.ValorVenta);
                         return k;
                     }).ToList().OrderBy(o => o.NroPedido).ToList();







                    SaldosIniciales = SaldosIniciales.Where(x => x.Mes >= MesInicio && x.Mes <= MesFin).ToList().OrderBy(x => x.NroPedido).ToList();

                    string PedidoOld = "";

                    int i = 1;
                    ReporteCostoUtilidadDetallado objReporte = new ReporteCostoUtilidadDetallado();

                    //var hhhhh = Ventas.Where(o => o.NroPedido == "ST0216269").ToList();
                    foreach (var item in Ventas)
                    {
                        bool Agregado = false;
                        objReporte = item;
                        if (item.NroPedido == "ST0216269")
                        {
                            string x = "";
                        }
                        if (i == 1)
                        {

                            objReporte.Costo = item.Modulo == "VENTA" ? CalcularCostoReporteCostoUtilidadDetallado(Importaciones, item.v_IdProductoDetalle, item.NroPedido, SaldosIniciales, item.FechaD.Date) * item.CantidadVendida : 0;
                            ListaFinal.Add(objReporte);

                        }
                        else
                        {
                            if (objReporte.NroPedido != PedidoOld)
                            {
                                objReporte = new ReporteCostoUtilidadDetallado();

                                List<ReporteCostoUtilidadDetallado> SI = SaldosIniciales.Where(x => x.NroPedido == PedidoOld && x.v_IdProductoDetalle == null).GroupBy(x => x.v_IdMovimiento).Select(x => x.FirstOrDefault()).ToList();
                                // && x.v_IdProductoDetalle ==null Se agrego el 10 mayo
                                if (SI != null)
                                {

                                    foreach (var NotaIngreso in SI.Where(x => x.Origen == "C")) //Se agrego foreach
                                    {
                                        objReporte = new ReporteCostoUtilidadDetallado();
                                        objReporte = NotaIngreso;
                                        objReporte.Modulo = NotaIngreso.Modulo;
                                        objReporte.NroRegistro = NotaIngreso.NroRegistro;
                                        objReporte.Fecha = NotaIngreso.Fecha;
                                        objReporte.Cliente = NotaIngreso.Cliente;
                                        objReporte.Documento = NotaIngreso.Documento;
                                        objReporte.ValorVenta = 0;
                                        objReporte.Producto = "";// SI != null ? SI.FirstOrDefault().Producto : "";
                                        objReporte.ValorVenta = NotaIngreso.ValorVenta;
                                        var IdProducto = Ventas.Where(x => x.NroPedido == PedidoOld).Select(x => x.v_IdProductoDetalle).Distinct().ToList();
                                        objReporte.Costo = CalcularCostoNotasIngresoDetallado(SaldosIniciales, PedidoOld, IdProducto, NotaIngreso.v_IdMovimiento);
                                        objReporte.v_IdProductoDetalle = null;
                                        objReporte.Margen = NotaIngreso.Margen;
                                        objReporte.Utilidad = NotaIngreso.Utilidad;
                                        ListaFinal.Add(objReporte);

                                    }
                                }

                            }
                            else
                            {


                                item.Costo = item.Modulo == "VENTA" ? CalcularCostoReporteCostoUtilidadDetallado(Importaciones, item.v_IdProductoDetalle, item.NroPedido, SaldosIniciales, item.FechaD.Date) * item.CantidadVendida : 0;
                                ListaFinal.Add(item);
                                Agregado = true;

                            }
                        }


                        if (!Agregado)
                        {


                            item.Costo = item.Modulo == "VENTA" ? CalcularCostoReporteCostoUtilidadDetallado(Importaciones, item.v_IdProductoDetalle, item.NroPedido, SaldosIniciales, item.FechaD.Date) * item.CantidadVendida : 0;
                            ListaFinal.Add(item);
                        }
                        PedidoOld = item.NroPedido;
                        i = i + 1;

                    }

                    objReporte = new ReporteCostoUtilidadDetallado();
                    List<ReporteCostoUtilidadDetallado> SI2 = SaldosIniciales.Where(x => x.NroPedido == PedidoOld && x.v_IdProductoDetalle == null).GroupBy(x => x.v_IdMovimiento).Select(x => x.FirstOrDefault()).ToList();

                    //x.v_IdProductoDetalle ==null se agrego el 10 Mayo
                    if (SI2 != null) //&& ListaTemporal.Any()
                    {

                        foreach (ReporteCostoUtilidadDetallado NotaIngreso in SI2.Where(z => z.Origen == "C"))
                        {
                            objReporte = new ReporteCostoUtilidadDetallado();
                            objReporte = NotaIngreso;

                            objReporte.Modulo = NotaIngreso.Modulo;
                            objReporte.NroRegistro = NotaIngreso.NroRegistro;
                            objReporte.Fecha = NotaIngreso.Fecha;
                            objReporte.Cliente = NotaIngreso.Cliente;
                            objReporte.Documento = NotaIngreso.Documento;
                            objReporte.ValorVenta = 0;
                            objReporte.Producto = "";// SI2.FirstOrDefault().Producto;
                            objReporte.ValorVenta = NotaIngreso.ValorVenta;
                            var IdProducto = Ventas.Where(x => x.NroPedido == PedidoOld).Select(x => x.v_IdProductoDetalle).Distinct().ToList();
                            objReporte.Costo = CalcularCostoNotasIngresoDetallado(SaldosIniciales, objReporte.NroPedido, IdProducto, NotaIngreso.v_IdMovimiento);
                            objReporte.v_IdProductoDetalle = null;
                            objReporte.Margen = NotaIngreso.Margen;
                            objReporte.Utilidad = NotaIngreso.Utilidad;
                            ListaFinal.Add(objReporte);

                        }

                    }
                }


                return ListaFinal.OrderBy(x => x.Orden).ThenBy(x => x.NroRegistro).ToList();
            }
            catch (Exception ex)
            {



                objOperationResult.Success = 0;
                objOperationResult.AdditionalInformation = "VentaBL.ReporteCostoUtilidadDetallado()";
                objOperationResult.ErrorMessage = ex.Message;
                objOperationResult.ExceptionMessage = ex.InnerException != null ? ex.InnerException.Message : string.Empty;
                Utils.ExceptionToLog(Globals.ClientSession.i_SystemUserId, objOperationResult);
                return null;

            }

        }


        public List<ReporteCostoComercializacion> ReporteCostoComercializacion(ref  OperationResult objOperationResult, DateTime pstrt_FechaRegistroIni, DateTime pstrt_FechaRegistroFin, int Moneda, string NroCuenta, decimal Factor)
        {
            List<ReporteCostoComercializacion> Reporte = new List<ReporteCostoComercializacion>();
            string _strFilterExpression = string.Empty;
            List<string> Filters = new List<string>();
            Filters.Add("IdAlmacen==" + Globals.ClientSession.i_IdAlmacenPredeterminado.Value.ToString());
            foreach (string item in Filters)
            {
                _strFilterExpression = _strFilterExpression + item + " && ";
            }
            _strFilterExpression = _strFilterExpression.Substring(0, _strFilterExpression.Length - 4);

            using (SAMBHSEntitiesModelWin dbContext = new SAMBHSEntitiesModelWin())
            {


                var CostoVentas = (from a in dbContext.venta

                                   join b in dbContext.ventadetalle on new { vd = a.v_IdVenta, eliminado = 0 } equals new { vd = b.v_IdVenta, eliminado = b.i_Eliminado.Value } into b_join
                                   from b in b_join.DefaultIfEmpty()
                                   join c in dbContext.documento on new { doc = a.i_IdTipoDocumento.Value, eliminado = 0 } equals new { doc = c.i_CodigoDocumento, eliminado = c.i_Eliminado.Value } into c_join
                                   from c in c_join.DefaultIfEmpty()
                                   where a.i_Eliminado == 0 && a.i_IdEstado == 1 && b.v_NroCuenta == NroCuenta

                                   && a.t_FechaRegistro >= pstrt_FechaRegistroIni && a.t_FechaRegistro <= pstrt_FechaRegistroFin

                                   && c.i_UsadoDocumentoContable == 1 && !string.IsNullOrEmpty(b.v_PedidoExportacion)
                                   select new
                                   {
                                       ValorVenta = Moneda == a.i_IdMoneda ? c.i_UsadoDocumentoInverso == 1 ? b.d_ValorVenta : b.d_ValorVenta * -1 : Moneda == (int)Currency.Soles ? c.i_UsadoDocumentoInverso == 1 ? b.d_ValorVenta * a.d_TipoCambio * -1 : b.d_ValorVenta * a.d_TipoCambio : c.i_UsadoDocumentoInverso == 1 ? (b.d_ValorVenta / a.d_TipoCambio) * -1 : b.d_ValorVenta / a.d_TipoCambio,
                                       AuxiliarNroPedido = string.IsNullOrEmpty(b.v_PedidoExportacion) ? "" : b.v_PedidoExportacion,
                                   }).ToList();

                var CostoNotaSalida = new AlmacenBL().ReporteListadoSalidaAlmacenAnalitico(ref objOperationResult, pstrt_FechaRegistroIni, pstrt_FechaRegistroFin, _strFilterExpression, "", "-1", -1, "", "", "", "", "", "", "", "", "", Moneda, Globals.ClientSession.i_IdEstablecimiento.Value, false, false, false, true);
                CostoNotaSalida = CostoNotaSalida.Where(o => !o.NombreProducto.ToUpper().Contains("FLETE")).ToList();
                var SalidaAgrupada = CostoNotaSalida.GroupBy(x => new { x.AuxiliarNroPedido }).ToList()
                                        .Select(p =>
                                        {
                                            var k = p.LastOrDefault();
                                            k.Salida_Total = p.Sum(o => o.Salida_Total).Value;
                                            return k;


                                        }).ToList();



                var TesoreriaTercero = (from a in dbContext.tesoreriadetalle
                                        join b in dbContext.tesoreria on new { tes = a.v_IdTesoreria, eliminado = 0 } equals new { tes = b.v_IdTesoreria, eliminado = b.i_Eliminado.Value } into b_join
                                        from b in b_join.DefaultIfEmpty()
                                        where b.i_IdEstado == 1 && a.i_Eliminado == 0 && !string.IsNullOrEmpty(a.v_Pedido) && a.v_NroCuenta.StartsWith("63")

                                        && a.t_Fecha >= pstrt_FechaRegistroIni && a.t_Fecha <= pstrt_FechaRegistroFin
                                        select new CalculosComercializacion
                                        {
                                            ValorVenta = a.v_Naturaleza == "D" ? Moneda == b.i_IdMoneda ? a.d_Importe : Moneda == (int)Currency.Soles ? a.d_Cambio : a.d_Importe :
                                             Moneda == b.i_IdMoneda ? -1 * a.d_Importe : Moneda == (int)Currency.Soles ? -1 * a.d_Cambio : -1 * a.d_Importe,
                                            AuxiliarNroPedido = string.IsNullOrEmpty(a.v_Pedido) ? "" : a.v_Pedido,
                                        }).ToList();

                var Compras = (from a in dbContext.compradetalle
                               join b in dbContext.compra on new { cd = a.v_IdCompra, eliminado = 0 } equals new { cd = b.v_IdCompra, eliminado = b.i_Eliminado.Value } into b_join
                               from b in b_join.DefaultIfEmpty()
                               join c in dbContext.documento on new { td = b.i_IdTipoDocumento.Value, eliminado = 0 } equals new { td = c.i_CodigoDocumento, eliminado = c.i_Eliminado.Value } into c_join
                               from c in c_join.DefaultIfEmpty()

                               where a.i_Eliminado == 0 && b.i_IdEstado == 1 && a.v_NroCuenta.StartsWith("63") && !string.IsNullOrEmpty(a.v_NroPedido)
                               select new CalculosComercializacion
                               {
                                   ValorVenta = Moneda == b.i_IdMoneda ? c.i_UsadoDocumentoInverso == 1 ? a.d_ValorVenta.Value : a.d_ValorVenta.Value * -1 : Moneda == (int)Currency.Soles ? c.i_UsadoDocumentoInverso == 1 ? a.d_ValorVenta * b.d_TipoCambio * -1 : a.d_ValorVenta * b.d_TipoCambio : c.i_UsadoDocumentoInverso == 1 ? (a.d_ValorVenta / b.d_TipoCambio) * -1 : a.d_ValorVenta / b.d_TipoCambio,
                                   AuxiliarNroPedido = string.IsNullOrEmpty(a.v_NroPedido) ? "" : a.v_NroPedido,

                               }).ToList();

                var Terceros = TesoreriaTercero.Concat(Compras).ToList();


                var GastoFinanciero = (from a in dbContext.tesoreriadetalle
                                       join b in dbContext.tesoreria on new { tes = a.v_IdTesoreria, eliminado = 0 } equals new { tes = b.v_IdTesoreria, eliminado = b.i_Eliminado.Value } into b_join
                                       from b in b_join.DefaultIfEmpty()
                                       where b.i_IdEstado == 1 && a.i_Eliminado == 0 && !string.IsNullOrEmpty(a.v_Pedido) && a.v_NroCuenta.StartsWith("67")

                                       && a.t_Fecha >= pstrt_FechaRegistroIni && a.t_Fecha <= pstrt_FechaRegistroFin
                                       select new CalculosComercializacion
                                       {
                                           ValorVenta = a.v_Naturaleza == "D" ? Moneda == b.i_IdMoneda ? a.d_Importe : Moneda == (int)Currency.Soles ? a.d_Cambio : a.d_Importe :
                                            Moneda == b.i_IdMoneda ? -1 * a.d_Importe : Moneda == (int)Currency.Soles ? -1 * a.d_Cambio : -1 * a.d_Importe,
                                           AuxiliarNroPedido = string.IsNullOrEmpty(a.v_Pedido) ? "" : a.v_Pedido,
                                       }).ToList();



                var TodasVentas = (from a in dbContext.venta

                                   join b in dbContext.ventadetalle on new { vd = a.v_IdVenta, eliminado = 0 } equals new { vd = b.v_IdVenta, eliminado = b.i_Eliminado.Value } into b_join
                                   from b in b_join.DefaultIfEmpty()
                                   join c in dbContext.documento on new { doc = a.i_IdTipoDocumento.Value, eliminado = 0 } equals new { doc = c.i_CodigoDocumento, eliminado = c.i_Eliminado.Value } into c_join
                                   from c in c_join.DefaultIfEmpty()
                                   where a.i_Eliminado == 0 && a.i_IdEstado == 1

                                   && a.t_FechaRegistro >= pstrt_FechaRegistroIni && a.t_FechaRegistro <= pstrt_FechaRegistroFin

                                   && c.i_UsadoDocumentoContable == 1 && !string.IsNullOrEmpty(b.v_PedidoExportacion)
                                   select new
                                   {
                                       ValorVenta = Moneda == a.i_IdMoneda ? c.i_UsadoDocumentoInverso == 1 ? b.d_ValorVenta : b.d_ValorVenta * -1 : Moneda == (int)Currency.Soles ? c.i_UsadoDocumentoInverso == 1 ? b.d_ValorVenta * a.d_TipoCambio * -1 : b.d_ValorVenta * a.d_TipoCambio : c.i_UsadoDocumentoInverso == 1 ? (b.d_ValorVenta / a.d_TipoCambio) * -1 : b.d_ValorVenta / a.d_TipoCambio,
                                       AuxiliarNroPedido = string.IsNullOrEmpty(b.v_PedidoExportacion) ? "" : b.v_PedidoExportacion,
                                   }).ToList();

                var Pedidos = CostoNotaSalida.Select(o => o.AuxiliarNroPedido).Distinct().Concat(CostoVentas.Select(o => o.AuxiliarNroPedido).Distinct()).Concat(Terceros.Select(o => o.AuxiliarNroPedido).Distinct()).Concat(GastoFinanciero.Select(o => o.AuxiliarNroPedido).Distinct()).Concat(TodasVentas.Select(o => o.AuxiliarNroPedido).Distinct()).ToList().Distinct().ToList();

                foreach (var ped in Pedidos)
                {
                    ReporteCostoComercializacion objReporte = new ReporteCostoComercializacion();
                    objReporte.NroPedido = ped;
                    objReporte.CostoMercadeo = Utils.Windows.DevuelveValorRedondeado(SalidaAgrupada.Where(o => o.AuxiliarNroPedido == ped).Sum(o => o.Salida_Total.Value), 2);
                    objReporte.CostoFlete = Utils.Windows.DevuelveValorRedondeado(CostoVentas.Where(o => o.AuxiliarNroPedido == ped).Sum(o => o.ValorVenta.Value), 2);
                    objReporte.ServicioTerceros = Utils.Windows.DevuelveValorRedondeado(Terceros.Where(o => o.AuxiliarNroPedido == ped).Sum(o => o.ValorVenta.Value), 2);
                    objReporte.GastoFinanciero = Utils.Windows.DevuelveValorRedondeado(GastoFinanciero.Where(o => o.AuxiliarNroPedido == ped).Sum(o => o.ValorVenta.Value), 2);
                    objReporte.Venta = Utils.Windows.DevuelveValorRedondeado(TodasVentas.Where(o => o.AuxiliarNroPedido == ped).Sum(o => o.ValorVenta.Value), 2);
                    objReporte.ImpuestoRenta = objReporte.Venta * Factor;
                    objReporte.Total = objReporte.CostoMercadeo + objReporte.CostoFlete + objReporte.ServicioTerceros + objReporte.GastoFinanciero + objReporte.ImpuestoRenta;
                    objReporte.Margen = objReporte.Venta - objReporte.Total;
                    objReporte.Porcentaje = objReporte.Total == 0 ? 0 : Utils.Windows.DevuelveValorRedondeado((objReporte.Margen / objReporte.Total) * 100, 2);
                    Reporte.Add(objReporte);
                }

                return Reporte.OrderBy(o => o.NroPedido).ToList();
            }
        }


        public List<ReporteCostoUtilidadDetalladoDetalles> ReporteCostoUtilidadDetalladoDetalles(List<ReporteCostoUtilidadDetallado> ListaIngresa, int MonedaReporte, string Periodo)
        {
            ReporteCostoUtilidadDetalladoDetalles ReporteCostoUtilidadDetallado = new ReporteCostoUtilidadDetalladoDetalles();
            List<ReporteCostoUtilidadDetalladoDetalles> ReporteFinalImportaciones = new List<ReporteCostoUtilidadDetalladoDetalles>();
            List<ReporteCostoUtilidadDetalladoDetalles> ReporteFinalNotasIngreso = new List<ReporteCostoUtilidadDetalladoDetalles>();
            List<ReporteCostoUtilidadDetalladoDetalles> ReporteFinalSaldosIniciales = new List<ReporteCostoUtilidadDetalladoDetalles>();
            List<ReporteCostoUtilidadDetalladoDetalles> SaldosIniciales = new List<ReporteCostoUtilidadDetalladoDetalles>();


            List<ReporteCostoUtilidadDetalladoDetalles> Compras = new List<ReporteCostoUtilidadDetalladoDetalles>();
            using (SAMBHSEntitiesModelWin dbContex = new SAMBHSEntitiesModelWin())
            {


                SaldosIniciales = (from a in dbContex.movimientodetalle

                                   join b in dbContex.movimiento on new { m = a.v_IdMovimiento, eliminado = 0 } equals new { m = b.v_IdMovimiento, eliminado = b.i_Eliminado.Value } into b_join

                                   from b in b_join.DefaultIfEmpty()

                                   join c in dbContex.cliente on new { c = b.v_IdCliente, eliminado = 0 } equals new { c = c.v_IdCliente, eliminado = c.i_Eliminado.Value } into c_join

                                   from c in c_join.DefaultIfEmpty()

                                   join d in dbContex.documento on new { d = a.i_IdTipoDocumento.Value, eliminado = 0 } equals new { d = d.i_CodigoDocumento, eliminado = d.i_Eliminado.Value } into d_join

                                   from d in d_join.DefaultIfEmpty()

                                   join e in dbContex.productodetalle on new { pd = a.v_IdProductoDetalle, eliminado = 0 } equals new { pd = e.v_IdProductoDetalle, eliminado = e.i_Eliminado.Value } into e_join

                                   from e in e_join.DefaultIfEmpty()
                                   where a.i_Eliminado == 0
                                   && (b.v_OrigenTipo == null || b.v_OrigenTipo == "C")
                                    && b.i_IdTipoMovimiento == (int)TipoDeMovimiento.NotadeIngreso
                                    && b.v_Periodo == Periodo
                                   select new
                                   {
                                       NroPedido = a.v_NroPedido.Trim(),
                                       Modulo = b.v_OrigenTipo == null ? b.i_IdTipoMotivo == (int)TipoDeMovimiento.Inicial ? "NI/SALDO INICIAL" : b.i_IdTipoMotivo != (int)TipoDeMovimiento.Inicial ? "NOTA INGRESO" : b.v_OrigenTipo == "C" ? "COMPRA" : "COMPRA" : "COMPRA",
                                       NroRegistro = b.v_OrigenTipo == "C" ? b.v_OrigenRegMes.Trim() + " " + b.v_OrigenRegCorrelativo.Trim() : b.v_Mes.Trim() + " " + b.v_Correlativo.Trim(),
                                       Fecha = b.t_Fecha.Value,
                                       Cliente = c == null ? "** CLIENTE NO EXISTE **" : (c.v_ApeMaterno + " " + c.v_ApeMaterno + " " + c.v_PrimerNombre + " " + c.v_RazonSocial).Trim(),
                                       Documento = d.v_Siglas + " " + a.v_NumeroDocumento,
                                       Producto = e.producto == null ? "** PRODUCTO NO EXISTE**" : e.producto.v_CodInterno + " " + e.producto.v_Descripcion,
                                       ValorFob = 0,
                                       ValorFlete = 0,
                                       Seguro = 0,
                                       Advalorem = 0,
                                       Gastos = 0,
                                       Costo = b.i_IdMoneda == MonedaReporte ? a.d_Precio : MonedaReporte == (int)Currency.Soles ? a.d_Precio * b.d_TipoCambio : (a.d_Precio) / b.d_TipoCambio,

                                       v_IdProductoDetalle = e.v_IdProductoDetalle,
                                       v_IdMovimiento = b.v_IdMovimiento,
                                       Origen = b.v_OrigenTipo,
                                       Orden = 2,
                                       v_IdMovimientoDetalle = a.v_IdMovimientoDetalle,

                                   }).ToList().AsQueryable().Select(x => new ReporteCostoUtilidadDetalladoDetalles
                                   {
                                       NroPedido = x.NroPedido,
                                       Modulo = x.Modulo,
                                       NroRegistro = x.NroRegistro,
                                       Fecha = x.Fecha.Date.Day.ToString("00") + "/" + x.Fecha.Date.Month.ToString("00") + "/" + x.Fecha.Date.Year.ToString(),
                                       Cliente = x.Cliente,
                                       Documento = x.Documento,
                                       Producto = x.Producto,
                                       ValorFob = x.ValorFob,
                                       ValorFlete = x.ValorFlete,
                                       Seguro = x.Seguro,
                                       Advalorem = x.Advalorem,
                                       Gastos = x.Gastos,
                                       Costo = x.Costo ?? 0,
                                       v_IdProductoDetalle = x.v_IdProductoDetalle,
                                       Grupo = x.NroPedido,
                                       Orden = x.Orden,
                                       v_IdMovimientoDetalle = x.v_IdMovimientoDetalle,

                                   }).ToList();



                Compras = (from a in dbContex.compradetalle
                           join b in dbContex.compra on new { m = a.v_IdCompra, eliminado = 0 } equals new { m = b.v_IdCompra, eliminado = b.i_Eliminado.Value } into b_join

                           from b in b_join.DefaultIfEmpty()

                           join c in dbContex.cliente on new { c = b.v_IdProveedor, eliminado = 0 } equals new { c = c.v_IdCliente, eliminado = c.i_Eliminado.Value } into c_join

                           from c in c_join.DefaultIfEmpty()

                           join d in dbContex.documento on new { d = b.i_IdTipoDocumento.Value, eliminado = 0 } equals new { d = d.i_CodigoDocumento, eliminado = d.i_Eliminado.Value } into d_join

                           from d in d_join.DefaultIfEmpty()

                           join e in dbContex.productodetalle on new { pd = a.v_IdProductoDetalle, eliminado = 0 } equals new { pd = e.v_IdProductoDetalle, eliminado = e.i_Eliminado.Value } into e_join

                           from e in e_join.DefaultIfEmpty()
                           where a.i_Eliminado == 0
                           && a.v_IdProductoDetalle == null

                            && b.v_Periodo == Periodo
                           select new
                           {
                               NroPedido = a.v_NroPedido.Trim(),
                               Modulo = "COMPRA",
                               NroRegistro = b.v_Mes.Trim() + b.v_Correlativo,
                               Fecha = b.t_FechaEmision.Value,
                               Cliente = c == null ? "** CLIENTE NO EXISTE **" : (c.v_ApeMaterno + " " + c.v_ApeMaterno + " " + c.v_PrimerNombre + " " + c.v_RazonSocial).Trim(),
                               Documento = d.v_Siglas + " " + b.v_SerieDocumento + " " + b.v_CorrelativoDocumento,
                               Producto = e.producto == null ? "** PRODUCTO NO EXISTE**" : e.producto.v_CodInterno + " " + e.producto.v_Descripcion,
                               ValorFob = 0,
                               ValorFlete = 0,
                               Seguro = 0,
                               Advalorem = 0,
                               Gastos = 0,
                               Costo = b.i_IdMoneda == MonedaReporte ? a.d_Precio : MonedaReporte == (int)Currency.Soles ? a.d_Precio * b.d_TipoCambio : (a.d_Precio) / b.d_TipoCambio,
                               v_IdProductoDetalle = e.v_IdProductoDetalle,
                               v_IdMovimiento = b.v_IdCompra,
                               Origen = "C",
                               Orden = 2,
                               v_IdMovimientoDetalle = a.v_IdMovimientoDetalle,

                           }).ToList().AsQueryable().Select(x => new ReporteCostoUtilidadDetalladoDetalles
                           {
                               NroPedido = x.NroPedido,
                               Modulo = x.Modulo,
                               NroRegistro = x.NroRegistro,
                               Fecha = x.Fecha.Date.Day.ToString("00") + "/" + x.Fecha.Date.Month.ToString("00") + "/" + x.Fecha.Date.Year.ToString(),
                               Cliente = x.Cliente,
                               Documento = x.Documento,
                               Producto = x.Producto,
                               ValorFob = x.ValorFob,
                               ValorFlete = x.ValorFlete,
                               Seguro = x.Seguro,
                               Advalorem = x.Advalorem,
                               Gastos = x.Gastos,
                               Costo = x.Costo ?? 0,
                               v_IdProductoDetalle = x.v_IdProductoDetalle,
                               Grupo = x.NroPedido,
                               Orden = x.Orden,
                               v_IdMovimientoDetalle = x.v_IdMovimientoDetalle,

                           }).ToList();
                SaldosIniciales = SaldosIniciales.Concat(Compras).ToList();


                List<ReporteCostoUtilidadDetalladoDetalles> Importaciones = (from a in dbContex.importaciondetalleproducto

                                                                             join b in dbContex.importacion on new { i = a.v_IdImportacion, eliminado = 0 } equals new { i = b.v_IdImportacion, eliminado = b.i_Eliminado.Value } into b_join

                                                                             from b in b_join.DefaultIfEmpty()

                                                                             join c in dbContex.productodetalle on new { pd = a.v_IdProductoDetalle, eliminado = 0 } equals new { pd = c.v_IdProductoDetalle, eliminado = c.i_Eliminado.Value } into c_join

                                                                             from c in c_join.DefaultIfEmpty()

                                                                             join d in dbContex.producto on new { p = c.v_IdProducto, eliminado = 0 } equals new { p = d.v_IdProducto, eliminado = d.i_Eliminado.Value } into d_join

                                                                             from d in d_join.DefaultIfEmpty()

                                                                             join e in dbContex.cliente on new { c = a.v_IdCliente, eliminado = 0 } equals new { c = e.v_IdCliente, eliminado = e.i_Eliminado.Value } into e_join
                                                                             from e in e_join.DefaultIfEmpty()

                                                                             join f in dbContex.documento on new { d = b.i_IdTipoDocumento.Value, eliminado = 0 } equals new { d = f.i_CodigoDocumento, eliminado = f.i_Eliminado.Value } into f_join
                                                                             from f in f_join.DefaultIfEmpty()

                                                                             join g in dbContex.datahierarchy on new { Grupo = 53, eliminado = 0, serie = b.i_IdSerieDocumento.Value } equals new { Grupo = g.i_GroupId, eliminado = g.i_IsDeleted.Value, serie = g.i_ItemId } into g_join

                                                                             from g in g_join.DefaultIfEmpty()

                                                                             where a.i_Eliminado == 0

                                                                             && b.v_Periodo == Periodo
                                                                             select new
                                                                             {
                                                                                 Modulo = "IMPORTACION",
                                                                                 NroPedido = a.v_NroPedido,
                                                                                 Fecha = b.t_FechaRegistro.Value,
                                                                                 NroRegistro = b.v_Mes.Trim() + "" + b.v_Correlativo.Trim(),
                                                                                 NombreCliente = e == null ? "" : (e.v_ApePaterno + " " + e.v_ApeMaterno + " " + e.v_PrimerNombre + " " + e.v_RazonSocial).Trim(),
                                                                                 NroDocumento = f.v_Siglas + " " + g.v_Value2 + " " + b.v_CorrelativoDocumento,
                                                                                 Producto = d.v_CodInterno + " " + d.v_Descripcion,
                                                                                 ValorFob = b.i_IdMoneda == MonedaReporte ? a.d_ValorFob : MonedaReporte == (int)Currency.Soles ? a.d_ValorFob * b.d_TipoCambio : a.d_ValorFob / b.d_TipoCambio,
                                                                                 ValorFlete = b.i_IdMoneda == MonedaReporte ? a.d_Flete : MonedaReporte == (int)Currency.Soles ? a.d_Flete * b.d_TipoCambioDoc1 : a.d_Flete / b.d_TipoCambioDoc1,
                                                                                 Seguro = b.i_IdMoneda == MonedaReporte ? a.d_Seguro : MonedaReporte == (int)Currency.Soles ? a.d_Seguro * b.d_TipoCambioDoc2 : a.d_Seguro / b.d_TipoCambioDoc2,
                                                                                 Advalorem = b.i_IdMoneda == MonedaReporte ? a.d_AdValorem : MonedaReporte == (int)Currency.Soles ? a.d_AdValorem * b.d_TipoCambioDoc3 : a.d_AdValorem / b.d_TipoCambioDoc3,
                                                                                 Gastos = b.i_IdMoneda == MonedaReporte ? a.d_OtrosGastos : MonedaReporte == (int)Currency.Soles ? a.d_OtrosGastos * b.d_TipoCambio : a.d_OtrosGastos / b.d_TipoCambio,
                                                                                 //Costo = b.i_IdMoneda == MonedaReporte ? a.d_CostoUnitario : MonedaReporte == (int)Currency.Soles ? a.d_CostoUnitario * b.d_TipoCambio : a.d_CostoUnitario / b.d_TipoCambio,
                                                                                 Costo = b.i_IdMoneda == MonedaReporte ? a.d_CostoUnitario : a.d_CostoUnitarioCambio,
                                                                                 v_IdProductoDetalle = c.v_IdProductoDetalle,
                                                                                 Grupo = a.v_NroPedido,
                                                                                 orden = 1,
                                                                                 v_IdImportacionDetalle = a.v_IdImportacionDetalleProducto,
                                                                                 v_IdImportacion = a.v_IdImportacion,
                                                                                 cantidad = a.d_Cantidad ?? 0,
                                                                             }).ToList().Select(x => new ReporteCostoUtilidadDetalladoDetalles
                                                                             {

                                                                                 NroPedido = x.NroPedido,
                                                                                 Modulo = x.Modulo,
                                                                                 Fecha = x.Fecha.Date.Day.ToString("00") + "/" + x.Fecha.Date.Month.ToString("00") + "/" + x.Fecha.Date.Year.ToString("00"),
                                                                                 NroRegistro = x.NroRegistro,
                                                                                 Cliente = x.NombreCliente,
                                                                                 Documento = x.NroDocumento,
                                                                                 Producto = x.Producto,
                                                                                 ValorFob = x.ValorFob ?? 0,
                                                                                 ValorFlete = x.ValorFlete ?? 0,
                                                                                 Seguro = x.Seguro ?? 0,
                                                                                 Advalorem = x.Advalorem ?? 0,
                                                                                 Gastos = x.Gastos ?? 0,
                                                                                 Costo = x.Costo ?? 0,
                                                                                 v_IdProductoDetalle = x.v_IdProductoDetalle,
                                                                                 Grupo = x.NroPedido,
                                                                                 Orden = x.orden,
                                                                                 v_IdImportacionDetalle = x.v_IdImportacionDetalle,
                                                                                 v_IdImportacion = x.v_IdImportacion,
                                                                                 FechaD = x.Fecha,
                                                                                 Cantidad = x.cantidad,
                                                                             }).ToList();

                ListaIngresa = ListaIngresa != null ? ListaIngresa.Where(x => x.Modulo == "VENTA").OrderBy(x => x.NroPedido).ToList() : null; //Se agrego Modulo Venta 30 Mayo
                int i = 1;
                foreach (var item in ListaIngresa)
                {
                    decimal ItemCantidadVendida = 0;
                    if (item.NroPedido == "ST0216269")
                    {
                        string x = "";
                    }
                    var Import = Importaciones.Where(x => x.NroPedido == item.NroPedido && x.v_IdProductoDetalle == item.v_IdProductoDetalle && x.FechaD <= item.FechaD).ToList();
                    var NotasIngreso = SaldosIniciales.Where(x => x.NroPedido == item.NroPedido && x.v_IdProductoDetalle == item.v_IdProductoDetalle && (x.Modulo == "NOTA INGRESO" || x.Modulo == "COMPRA") || (x.NroPedido == item.NroPedido && x.v_IdProductoDetalle == null && (x.Modulo == "NOTA INGRESO" || x.Modulo == "COMPRA"))).ToList(); //|| x.Modulo =="COMPRA") SE Agregó el 10 MAYO || ( x.NroPedido == item.NroPedido && x.v_IdProductoDetalle == null  && (x.Modulo == "NOTA INGRESO" || x.Modulo == "COMPRA"))
                    var Iniciales = SaldosIniciales.Where(x => x.NroPedido == item.NroPedido && x.v_IdProductoDetalle == item.v_IdProductoDetalle && x.Modulo == "NI/SALDO INICIAL").ToList();
                    bool Costeo = false;
                    foreach (var item1 in Import)
                    {

                        var ImporProducto = Import.Where(x => x.v_IdProductoDetalle == item.v_IdProductoDetalle).ToList(); //En caso haya dos Importaciones para el mismo producto
                        if (ImporProducto.Count() > 1) //Si hay ventas diferentes y dos o mas Importaciones se debe tomar el costo de cada Importacion para cada venta , si hay una sola importacion  y varias ventas , se debe tomar en la importacion la cantidad de todas las ventas 
                        {
                            var VentasDiferentes = ListaIngresa.Where(x => x.NroPedido == item.NroPedido && x.v_IdProductoDetalle == item.v_IdProductoDetalle).ToList().Select(x => new { v_IdVenta = x.v_IdVenta }).Distinct().ToList();
                            var VentaNoIncluidas = VentasDiferentes.Select(o => o.v_IdVenta).Except(ReporteFinalImportaciones.Select(o => o.v_IdVenta)).ToList();
                            //if (VentasDiferentes.Count ()>1)
                            //if (VentaNoIncluidas.Count() > 1)
                            //{
                            //    ItemCantidadVendida = ListaIngresa.Where(x => x.NroPedido == item.NroPedido && x.v_IdProductoDetalle == item.v_IdProductoDetalle && x.FechaD <= item.FechaD).FirstOrDefault().CantidadVendida;
                            //}
                            //else
                            //{
                            //    var kk = ListaIngresa.Where(x => x.NroPedido == item.NroPedido && x.v_IdProductoDetalle == item.v_IdProductoDetalle).ToList();

                            //    ItemCantidadVendida = ListaIngresa.Where(x => x.NroPedido == item.NroPedido && x.v_IdProductoDetalle == item.v_IdProductoDetalle).Sum(x => x.CantidadVendida);
                            //}

                            if (VentaNoIncluidas.Any())
                            {
                                ItemCantidadVendida = item1.Cantidad;
                            }
                        }
                        else
                        {
                            ItemCantidadVendida = ListaIngresa.Where(x => x.NroPedido == item.NroPedido && x.v_IdProductoDetalle == item.v_IdProductoDetalle).Sum(x => x.CantidadVendida);
                        }

                        if (!ReporteFinalImportaciones.Where(x => x.NroPedido == item.NroPedido).Select(x => x.v_IdImportacionDetalle).ToList().Contains(item1.v_IdImportacionDetalle))
                        {
                            item1.Costo = item1.Costo * ItemCantidadVendida;
                            item1.v_IdVenta = item.v_IdVenta;
                            ReporteFinalImportaciones.Add(item1);
                            Costeo = true;
                        }


                    }

                    foreach (var itemNotasIngreso in NotasIngreso)
                    {

                        var NotProducto = NotasIngreso.Where(x => x.v_IdProductoDetalle == item.v_IdProductoDetalle).ToList();
                        if (NotProducto.Count() > 1)
                        {
                            var VentasDiferentes = ListaIngresa.Where(x => x.NroPedido == item.NroPedido && x.v_IdProductoDetalle == item.v_IdProductoDetalle).ToList().Select(x => x.v_IdVenta).Distinct().ToList();
                            if (VentasDiferentes.Count() > 1)
                            {
                                ItemCantidadVendida = ListaIngresa.Where(x => x.NroPedido == item.NroPedido && x.v_IdProductoDetalle == item.v_IdProductoDetalle && x.FechaD <= item.FechaD).FirstOrDefault().CantidadVendida;
                            }
                            else
                            {
                                ItemCantidadVendida = ListaIngresa.Where(x => x.NroPedido == item.NroPedido && x.v_IdProductoDetalle == item.v_IdProductoDetalle).Sum(x => x.CantidadVendida);
                            }

                        }
                        else
                        {
                            var h = ListaIngresa.Where(x => x.NroPedido == item.NroPedido && x.v_IdProductoDetalle == item.v_IdProductoDetalle).ToList();
                            ItemCantidadVendida = ListaIngresa.Where(x => x.NroPedido == item.NroPedido && x.v_IdProductoDetalle == item.v_IdProductoDetalle).Sum(x => x.CantidadVendida);
                        }

                        if (!ReporteFinalNotasIngreso.Where(x => x.NroPedido == item.NroPedido).Select(x => x.v_IdProductoDetalle).ToList().Contains(itemNotasIngreso.v_IdProductoDetalle))
                        {
                            itemNotasIngreso.Costo = itemNotasIngreso.Costo * ItemCantidadVendida;
                            ReporteFinalNotasIngreso.Add(itemNotasIngreso);
                            Costeo = true;
                        }
                    }

                    if (!Costeo)
                    {
                        foreach (var itemNotasIniciales in Iniciales)
                        {
                            var IniProducto = Iniciales.Where(x => x.v_IdProductoDetalle == item.v_IdProductoDetalle).ToList();
                            if (IniProducto.Count() > 1)
                            {
                                var VentasDiferentes = ListaIngresa.Where(x => x.NroPedido == item.NroPedido && x.v_IdProductoDetalle == item.v_IdProductoDetalle).ToList().Select(x => x.v_IdVenta).Distinct().ToList();
                                if (VentasDiferentes.Count() > 1)
                                {
                                    ItemCantidadVendida = ListaIngresa.Where(x => x.NroPedido == item.NroPedido && x.v_IdProductoDetalle == item.v_IdProductoDetalle && x.FechaD <= item.FechaD).FirstOrDefault().CantidadVendida;
                                }
                                else
                                {
                                    ItemCantidadVendida = ListaIngresa.Where(x => x.NroPedido == item.NroPedido && x.v_IdProductoDetalle == item.v_IdProductoDetalle).Sum(x => x.CantidadVendida);
                                }
                            }
                            else
                            {
                                //var xxxx = ListaIngresa.Where(x => x.NroPedido == item.NroPedido && x.v_IdProductoDetalle == item.v_IdProductoDetalle).ToList();
                                //ItemCantidadVendida = ListaIngresa.Where(x => x.NroPedido == item.NroPedido && x.v_IdProductoDetalle == item.v_IdProductoDetalle).Sum(x => x.CantidadVendida);
                                ItemCantidadVendida = item.CantidadVendida;
                            }

                            if (!ReporteFinalSaldosIniciales.Where(x => x.NroPedido == item.NroPedido).Select(x => x.v_IdProductoDetalle).ToList().Contains(itemNotasIniciales.v_IdProductoDetalle))
                            {
                                itemNotasIniciales.Costo = ItemCantidadVendida * itemNotasIniciales.Costo;   // item.CantidadVendida * itemNotasIniciales.Costo;
                                ReporteFinalSaldosIniciales.Add(itemNotasIniciales);
                            }
                        }
                    }
                    i = i + 1;
                }
                //return ReporteFinalNotasIngreso.Concat(ReporteFinalImportaciones).Concat(ReporteFinalSaldosIniciales).ToList().OrderBy(x => x.Orden).ToList();
                return ReporteFinalNotasIngreso.Concat(ReporteFinalImportaciones).Concat(ReporteFinalSaldosIniciales).ToList().OrderBy(x => x.Orden).ThenBy(h => h.Documento).ToList();
            }


        }



        public List<ReporteCostoUtilidadResumen> ReporteCostoUtilidadResumen(ref OperationResult objOperationResult, int MesInicio, int MesFin, string IdVendedor, int IdAlmacen, string NroPedidoInicio, string NroPedidoFin, int MonedaReporte, string Periodo)
        {

            try
            {
                objOperationResult.Success = 1;
                List<ReporteCostoUtilidadResumen> VentasAgrupadas = new List<ReporteCostoUtilidadResumen>();
                List<ReporteCostoUtilidadResumen> VentasTotales = new List<ReporteCostoUtilidadResumen>();
                List<ReporteCostoUtilidadResumen> SaldosIniciales = new List<ReporteCostoUtilidadResumen>();
                List<ReporteCostoUtilidadResumen> Compras = new List<ReporteCostoUtilidadResumen>();
                List<ReporteCostoUtilidadResumen> ListaFinal = new List<ReporteCostoUtilidadResumen>();
                List<String> ListaTemporal = new List<String>();
                List<string> ListaIdProductoDetalles = new List<string>();
                using (SAMBHSEntitiesModelWin dbContext = new SAMBHSEntitiesModelWin())
                {



                    var NotasIngreso = (from a in dbContext.movimiento
                                        join b in dbContext.movimientodetalle on new { md = a.v_IdMovimiento, eliminado = 0 } equals new { md = b.v_IdMovimiento, eliminado = b.i_Eliminado.Value } into b_join
                                        from b in b_join.DefaultIfEmpty()

                                        where a.i_Eliminado == 0 && a.v_OrigenTipo == "I" && a.i_IdTipoMovimiento == 1

                                        select new movimientoDto
                                        {
                                            v_OrigenRegPeriodo = a.v_OrigenRegPeriodo,
                                            v_OrigenRegMes = a.v_OrigenRegMes,
                                            v_OrigenRegCorrelativo = a.v_OrigenRegCorrelativo,
                                            Total = a.i_IdMoneda == MonedaReporte ? b.d_Total ?? 0 : b.d_TotalCambio ?? 0,
                                            v_IdProductoDetalle = b.v_IdProductoDetalle,
                                            v_NroPedido = string.IsNullOrEmpty(b.v_NroPedido) ? "" : b.v_NroPedido.Trim(),

                                        }).ToList();




                    List<ReporteCostoUtilidadDetalladoDetalles> Importaciones = (from a in dbContext.importaciondetalleproducto

                                                                                 join b in dbContext.importacion on new { i = a.v_IdImportacion, eliminado = 0 } equals new { i = b.v_IdImportacion, eliminado = b.i_Eliminado.Value } into b_join

                                                                                 from b in b_join.DefaultIfEmpty()

                                                                                 join c in dbContext.productodetalle on new { pd = a.v_IdProductoDetalle, eliminado = 0 } equals new { pd = c.v_IdProductoDetalle, eliminado = c.i_Eliminado.Value } into c_join

                                                                                 from c in c_join.DefaultIfEmpty()

                                                                                 join d in dbContext.producto on new { p = c.v_IdProducto, eliminado = 0 } equals new { p = d.v_IdProducto, eliminado = d.i_Eliminado.Value } into d_join

                                                                                 from d in d_join.DefaultIfEmpty()

                                                                                 join e in dbContext.cliente on new { c = a.v_IdCliente, eliminado = 0 } equals new { c = e.v_IdCliente, eliminado = e.i_Eliminado.Value } into e_join
                                                                                 from e in e_join.DefaultIfEmpty()

                                                                                 join f in dbContext.documento on new { d = b.i_IdTipoDocumento.Value, eliminado = 0 } equals new { d = f.i_CodigoDocumento, eliminado = f.i_Eliminado.Value } into f_join
                                                                                 from f in f_join.DefaultIfEmpty()

                                                                                 join g in dbContext.datahierarchy on new { Grupo = 53, eliminado = 0, serie = b.i_IdSerieDocumento.Value } equals new { Grupo = g.i_GroupId, eliminado = g.i_IsDeleted.Value, serie = g.i_ItemId } into g_join

                                                                                 from g in g_join.DefaultIfEmpty()

                                                                                 where a.i_Eliminado == 0
                                                                                 && b.v_Periodo == Periodo
                                                                                 select new
                                                                                 {
                                                                                     Modulo = "IMPORTACION",
                                                                                     NroPedido = a.v_NroPedido,
                                                                                     Fecha = b.t_FechaRegistro.Value,
                                                                                     NroRegistro = b.v_Mes.Trim() + "" + b.v_Correlativo.Trim(),
                                                                                     NombreCliente = e == null ? "" : (e.v_ApePaterno + " " + e.v_ApeMaterno + " " + e.v_PrimerNombre + " " + e.v_RazonSocial).Trim(),
                                                                                     NroDocumento = f.v_Siglas + " " + g.v_Value1 + " " + b.v_CorrelativoDocumento,
                                                                                     Producto = d.v_CodInterno + " " + d.v_Descripcion,
                                                                                     ValorFob = b.i_IdMoneda == MonedaReporte ? a.d_ValorFob : MonedaReporte == (int)Currency.Soles ? a.d_ValorFob * b.d_TipoCambio : a.d_ValorFob / b.d_TipoCambio,
                                                                                     ValorFlete = b.i_IdMoneda == MonedaReporte ? a.d_Flete : MonedaReporte == (int)Currency.Soles ? a.d_Flete * b.d_TipoCambioDoc1 : a.d_Flete / b.d_TipoCambioDoc1,
                                                                                     Seguro = b.i_IdMoneda == MonedaReporte ? a.d_Seguro : MonedaReporte == (int)Currency.Soles ? a.d_Seguro * b.d_TipoCambioDoc2 : a.d_Seguro / b.d_TipoCambioDoc2,
                                                                                     Advalorem = b.i_IdMoneda == MonedaReporte ? a.d_AdValorem : MonedaReporte == (int)Currency.Soles ? a.d_AdValorem * b.d_TipoCambioDoc3 : a.d_AdValorem / b.d_TipoCambioDoc3,
                                                                                     Gastos = b.i_IdMoneda == MonedaReporte ? a.d_OtrosGastos : MonedaReporte == (int)Currency.Soles ? a.d_OtrosGastos * b.d_TipoCambio : a.d_OtrosGastos / b.d_TipoCambio,
                                                                                     // Costo = b.i_IdMoneda == MonedaReporte ? a.d_CostoUnitario : MonedaReporte == (int)Currency.Soles ? a.d_CostoUnitario * b.d_TipoCambio : a.d_CostoUnitario / b.d_TipoCambio,
                                                                                     Costo = b.i_IdMoneda == MonedaReporte ? a.d_CostoUnitario : a.d_CostoUnitarioCambio,
                                                                                     v_IdProductoDetalle = c.v_IdProductoDetalle,
                                                                                     Grupo = a.v_NroPedido,
                                                                                     Correlativo = b.v_Correlativo.Trim(),
                                                                                     Periodo = b.v_Periodo.Trim(),
                                                                                     Mes = b.v_Mes.Trim(),
                                                                                     Cantidad = a.d_Cantidad ?? 0,

                                                                                 }).ToList().Select(x =>
                                                                                 {

                                                                                     var ggg = NotasIngreso.Where(o => o.v_IdProductoDetalle == "N001-PE000004195" && o.v_NroPedido == "ST0716243").ToList();
                                                                                     var NI = NotasIngreso.Where(o => o.v_IdProductoDetalle == x.v_IdProductoDetalle && o.v_OrigenRegPeriodo.Trim() == x.Periodo.Trim() && o.v_OrigenRegMes.Trim() == x.Mes.Trim()
                                                                                          && o.v_OrigenRegCorrelativo == x.Correlativo.Trim() && o.v_NroPedido == x.NroPedido).ToList();

                                                                                     return new ReporteCostoUtilidadDetalladoDetalles
                                                                                     {

                                                                                         NroPedido = x.NroPedido,
                                                                                         Modulo = x.Modulo,
                                                                                         Fecha = x.Fecha.Date.Day.ToString("00") + "/" + x.Fecha.Date.Month.ToString("00") + "/" + x.Fecha.Date.Year.ToString("00"),
                                                                                         NroRegistro = x.NroRegistro,
                                                                                         Cliente = x.NombreCliente,
                                                                                         Documento = x.NroDocumento,
                                                                                         Producto = x.Producto,
                                                                                         ValorFob = x.ValorFob ?? 0,
                                                                                         ValorFlete = x.ValorFlete ?? 0,
                                                                                         Seguro = x.Seguro ?? 0,
                                                                                         Advalorem = x.Advalorem ?? 0,
                                                                                         Gastos = x.Gastos ?? 0,
                                                                                         Costo = x.Costo ?? 0,
                                                                                         v_IdProductoDetalle = x.v_IdProductoDetalle,
                                                                                         Grupo = x.NroPedido,
                                                                                         FechaD = x.Fecha,
                                                                                         Total = NI.Any() ? NI.Sum(o => o.Total) : 0,
                                                                                         Cantidad = x.Cantidad,



                                                                                     };

                                                                                 }).ToList();


                    SaldosIniciales = (from a in dbContext.movimientodetalle

                                       join b in dbContext.movimiento on new { m = a.v_IdMovimiento, eliminado = 0 } equals new { m = b.v_IdMovimiento, eliminado = b.i_Eliminado.Value } into b_join

                                       from b in b_join.DefaultIfEmpty()

                                       join c in dbContext.cliente on new { c = b.v_IdCliente, eliminado = 0 } equals new { c = c.v_IdCliente, eliminado = c.i_Eliminado.Value } into c_join

                                       from c in c_join.DefaultIfEmpty()

                                       join d in dbContext.documento on new { d = a.i_IdTipoDocumento.Value, eliminado = 0 } equals new { d = d.i_CodigoDocumento, eliminado = d.i_Eliminado.Value } into d_join

                                       from d in d_join.DefaultIfEmpty()

                                       join e in dbContext.productodetalle on new { pd = a.v_IdProductoDetalle, eliminado = 0 } equals new { pd = e.v_IdProductoDetalle, eliminado = e.i_Eliminado.Value } into e_join

                                       from e in e_join.DefaultIfEmpty()
                                       where a.i_Eliminado == 0
                                       && (b.v_OrigenTipo == null || b.v_OrigenTipo == "C")

                                       && b.i_IdTipoMovimiento == (int)TipoDeMovimiento.NotadeIngreso

                                       && b.v_Periodo == Periodo
                                       select new
                                       {
                                           NroPedido = a.v_NroPedido.Trim(),
                                           Modulo = b.v_OrigenTipo == null ? b.i_IdTipoMotivo == (int)TipoDeMovimiento.Inicial ? "NI/SALDO INICIAL" : b.i_IdTipoMotivo != (int)TipoDeMovimiento.Inicial ? "NOTA INGRESO" : b.v_OrigenTipo == "C" ? "COMPRA" : "COMPRA" : "COMPRA",
                                           NroRegistro = b.v_OrigenTipo == "C" ? b.v_OrigenRegMes.Trim() + " " + b.v_OrigenRegCorrelativo.Trim() : b.v_Mes.Trim() + " " + b.v_Correlativo.Trim(),
                                           Fecha = b.t_Fecha.Value,
                                           Cliente = c == null ? "** CLIENTE NO EXISTE **" : (c.v_ApeMaterno + " " + c.v_ApeMaterno + " " + c.v_PrimerNombre + " " + c.v_RazonSocial).Trim(),
                                           Documento = d.v_Siglas + " " + a.v_NumeroDocumento,
                                           Producto = e.producto == null ? "** PRODUCTO NO EXISTE**" : e.producto.v_CodInterno + " " + e.producto.v_Descripcion,
                                           ValorVenta = 0,
                                           Costo = b.i_IdMoneda == MonedaReporte ? a.d_Precio.Value : MonedaReporte == (int)Currency.Soles ? a.d_Precio.Value * b.d_TipoCambio.Value : a.d_Precio.Value / b.d_TipoCambio.Value,
                                           Margen = 0,
                                           Utilidad = 0,
                                           Grupo = a.v_NroPedido.Trim(),
                                           Mes = b.v_Mes.Trim(),
                                           v_IdProductoDetalle = e.v_IdProductoDetalle,
                                           v_IdMovimiento = b.v_IdMovimiento,
                                           Origen = b.v_OrigenTipo,

                                       }).ToList().AsQueryable().Select(x => new ReporteCostoUtilidadResumen
                                       {
                                           NroPedido = x.NroPedido,
                                           Modulo = x.Modulo,
                                           NroRegistro = x.NroRegistro,
                                           Fecha = x.Fecha.Date.Day.ToString("00") + "/" + x.Fecha.Date.Month.ToString("00") + "/" + x.Fecha.Date.Year.ToString(),
                                           Cliente = x.Cliente,
                                           Documento = x.Documento,
                                           Producto = x.Producto,
                                           ValorVenta = x.ValorVenta,
                                           Costo = x.Costo,
                                           Margen = x.Margen,
                                           Utilidad = x.Utilidad,
                                           Grupo = x.Grupo,
                                           Mes = int.Parse(x.Mes),
                                           Orden = 2,
                                           v_IdProductoDetalle = x.v_IdProductoDetalle,
                                           v_IdMovimiento = x.v_IdMovimiento,

                                           Origen = x.Origen,
                                       }).ToList();

                    Compras = (from a in dbContext.compradetalle

                               join b in dbContext.compra on new { m = a.v_IdCompra, eliminado = 0 } equals new { m = b.v_IdCompra, eliminado = b.i_Eliminado.Value } into b_join

                               from b in b_join.DefaultIfEmpty()

                               join c in dbContext.cliente on new { c = b.v_IdProveedor, eliminado = 0 } equals new { c = c.v_IdCliente, eliminado = c.i_Eliminado.Value } into c_join

                               from c in c_join.DefaultIfEmpty()

                               join d in dbContext.documento on new { d = b.i_IdTipoDocumento.Value, eliminado = 0 } equals new { d = d.i_CodigoDocumento, eliminado = d.i_Eliminado.Value } into d_join

                               from d in d_join.DefaultIfEmpty()

                               join e in dbContext.productodetalle on new { pd = a.v_IdProductoDetalle, eliminado = 0 } equals new { pd = e.v_IdProductoDetalle, eliminado = e.i_Eliminado.Value } into e_join

                               from e in e_join.DefaultIfEmpty()
                               where a.i_Eliminado == 0

                                && b.v_Periodo == Periodo && a.v_IdProductoDetalle == null
                               select new
                               {
                                   NroPedido = a.v_NroPedido.Trim(),
                                   Modulo = "COMPRA",
                                   NroRegistro = b.v_Mes.Trim() + " " + b.v_Correlativo,
                                   Fecha = b.t_FechaRegistro.Value,
                                   Cliente = c == null ? "** CLIENTE NO EXISTE **" : (c.v_ApeMaterno + " " + c.v_ApeMaterno + " " + c.v_PrimerNombre + " " + c.v_RazonSocial).Trim(),
                                   Documento = d.v_Siglas + " " + b.v_SerieDocumento + " " + b.v_CorrelativoDocumento,
                                   Producto = e.producto == null ? "** PRODUCTO NO EXISTE**" : e.producto.v_CodInterno + " " + e.producto.v_Descripcion,
                                   ValorVenta = 0,
                                   Costo = b.i_IdMoneda == MonedaReporte ? a.d_Precio.Value : MonedaReporte == (int)Currency.Soles ? a.d_Precio.Value * b.d_TipoCambio.Value : a.d_Precio.Value / b.d_TipoCambio.Value,
                                   Margen = 0,
                                   Utilidad = 0,
                                   Grupo = a.v_NroPedido.Trim(),
                                   Mes = b.v_Mes.Trim(),
                                   v_IdProductoDetalle = e.v_IdProductoDetalle,
                                   v_IdMovimiento = b.v_IdCompra,
                                   Origen = "C",
                                   v_IdMovimientoDetalle = a.v_IdMovimientoDetalle,


                               }).ToList().AsQueryable().Select(x => new ReporteCostoUtilidadResumen
                               {
                                   NroPedido = x.NroPedido,
                                   Modulo = x.Modulo,
                                   NroRegistro = x.NroRegistro,
                                   Fecha = x.Fecha.Date.Day.ToString("00") + "/" + x.Fecha.Date.Month.ToString("00") + "/" + x.Fecha.Date.Year.ToString(),
                                   Cliente = x.Cliente,
                                   Documento = x.Documento,
                                   Producto = x.Producto,
                                   ValorVenta = x.ValorVenta,
                                   Costo = x.Costo,
                                   Margen = x.Margen,
                                   Utilidad = x.Utilidad,
                                   Grupo = "PEDIDO :" + x.Grupo,
                                   Mes = int.Parse(x.Mes),
                                   Orden = 2,
                                   v_IdProductoDetalle = x.v_IdProductoDetalle,
                                   v_IdMovimiento = x.v_IdMovimiento,
                                   Origen = x.Origen,

                               }).ToList();


                    SaldosIniciales = SaldosIniciales.Concat(Compras).ToList();

                    VentasTotales = (from a in dbContext.ventadetalle

                                     join b in dbContext.venta on new { v = a.v_IdVenta, eliminado = 0 } equals new { v = b.v_IdVenta, eliminado = b.i_Eliminado.Value } into b_join

                                     from b in b_join.DefaultIfEmpty()

                                     join c in dbContext.cliente on new { c = b.v_IdCliente, eliminado = 0 } equals new { c = c.v_IdCliente, eliminado = c.i_Eliminado.Value } into c_join

                                     from c in c_join.DefaultIfEmpty()

                                     join d in dbContext.documento on new { d = b.i_IdTipoDocumento.Value, eliminado = 0 } equals new { d = d.i_CodigoDocumento, eliminado = d.i_Eliminado.Value } into d_join

                                     from d in d_join.DefaultIfEmpty()

                                     join e in dbContext.productodetalle on new { pd = a.v_IdProductoDetalle, eliminado = 0 } equals new { pd = e.v_IdProductoDetalle, eliminado = e.i_Eliminado.Value } into e_join

                                     from e in e_join.DefaultIfEmpty()

                                     join f in dbContext.producto on new { p = e.v_IdProducto, eliminado = 0 } equals new { p = f.v_IdProducto, eliminado = f.i_Eliminado.Value } into f_join
                                     from f in f_join.DefaultIfEmpty()

                                     where a.i_Eliminado == 0 && (b.v_IdVendedor == IdVendedor || IdVendedor == "-1") && (a.i_IdAlmacen == IdAlmacen || IdAlmacen == -1)

                                     && b.i_IdEstado == 1 && b.v_Periodo == Periodo && a.i_Anticipio == 0
                                     select new
                                     {
                                         NroPedido = a.v_PedidoExportacion.Trim(),
                                         Modulo = "VENTA",
                                         NroRegistro = b.v_Mes.Trim() + " " + b.v_Correlativo.Trim(),
                                         Fecha = b.t_FechaRegistro.Value,
                                         Cliente = (c.v_ApePaterno + " " + c.v_ApeMaterno + " " + c.v_PrimerNombre + " " + c.v_RazonSocial).Trim(),
                                         Documento = d.v_Siglas + " " + b.v_SerieDocumento + " " + b.v_CorrelativoDocumento,
                                         Producto = f.v_CodInterno.Trim() + " " + f.v_Descripcion.Trim(),
                                         ValorVenta = b.i_IdMoneda == MonedaReporte ? a.d_ValorVenta : MonedaReporte == (int)Currency.Soles ? a.d_ValorVenta * b.d_TipoCambio : a.d_ValorVenta / b.d_TipoCambio,
                                         Costo = 0,
                                         Margen = 0,
                                         Utilidad = 0,
                                         Grupo = a.v_PedidoExportacion.Trim(),
                                         Mes = b.v_Mes.Trim(),
                                         v_IdProductoDetalle = e.v_IdProductoDetalle,
                                         v_IdVenta = b.v_IdVenta,
                                         CantidadVendida = a.d_Cantidad ?? 0,
                                         i_Anticipio = a.i_Anticipio ?? 0,



                                     }).ToList().AsQueryable().Select(x => new ReporteCostoUtilidadResumen
                                     {
                                         NroPedido = x.NroPedido,
                                         Modulo = x.Modulo,
                                         NroRegistro = x.NroRegistro,
                                         Fecha = x.Fecha.Date.Day.ToString("00") + "/" + x.Fecha.Date.Month.ToString("00") + "/" + x.Fecha.Date.Year.ToString(),
                                         Cliente = x.Cliente,
                                         Documento = x.Documento,
                                         Producto = x.Producto,
                                         ValorVenta = x.i_Anticipio == 1 ? x.ValorVenta.Value * -1 : x.ValorVenta.Value,
                                         Costo = x.Costo,
                                         Margen = x.Margen,
                                         Utilidad = x.Utilidad,
                                         Grupo = "PEDIDO :" + x.Grupo,
                                         Mes = int.Parse(x.Mes),
                                         Orden = 1,
                                         v_IdProductoDetalle = x.v_IdProductoDetalle,
                                         v_IdVenta = x.v_IdVenta,
                                         CantidadVendida = x.CantidadVendida,
                                         i_Anticipio = x.i_Anticipio,
                                         FechaD = x.Fecha,


                                     }).ToList();

                    var yy = VentasTotales.Where(k => k.NroPedido == "STKTOY021").ToList();

                    //VentasAgrupadas = VentasTotales.Where(x => x.Mes >= MesInicio && x.Mes <= MesFin).ToList().GroupBy(x => new { x.v_IdVenta })
                    //          .Select(group => group.Last()).ToList().OrderBy(x => x.NroPedido).ToList(); Antes del 20 Mayo

                    VentasAgrupadas = VentasTotales.Where(x => x.Mes >= MesInicio && x.Mes <= MesFin).ToList().GroupBy(x => new { x.v_IdVenta, x.NroPedido }) // agrego nroPedido al Final 20 mayo
                             .Select(group => group.Last()).ToList().OrderBy(x => x.NroPedido).ToList();


                    SaldosIniciales = SaldosIniciales.Where(x => x.Mes >= MesInicio && x.Mes <= MesFin).ToList().OrderBy(x => x.NroPedido).ToList();

                    string PedidoOld = "";
                    int i = 1;
                    ReporteCostoUtilidadResumen objReporte = new ReporteCostoUtilidadResumen();

                    foreach (var item in VentasAgrupadas)
                    {
                        bool Agregado = false;
                        objReporte = item;

                        if (item.NroPedido == "ST0716243")
                        {
                            string x = "";
                        }
                        if (i == 104)
                        {
                            string h = "";
                        }
                        if (i == 1)
                        {
                            var Totales = VentasTotales.Any() ? VentasTotales.Where(x => x.v_IdVenta == item.v_IdVenta && x.NroPedido == item.NroPedido).ToList() : null;

                            objReporte.Costo = item.Modulo == "VENTA" ? CalcularCostoReporteCostoUtilidad(Importaciones, item.v_IdVenta, item.NroPedido, VentasTotales, SaldosIniciales, item.FechaD.Date) : 0;
                            objReporte.ValorVenta = Totales.Any() && Totales != null ? Totales.Sum(x => x.ValorVenta) : 0;
                            ListaFinal.Add(objReporte);

                        }
                        else
                        {
                            if (objReporte.NroPedido != PedidoOld)
                            {
                                objReporte = new ReporteCostoUtilidadResumen();
                                List<ReporteCostoUtilidadResumen> SI = SaldosIniciales.Where(x => x.NroPedido == PedidoOld && x.v_IdProductoDetalle == null).GroupBy(x => x.v_IdMovimiento).Select(x => x.FirstOrDefault()).ToList();
                                // && x.v_IdProductoDetalle ==null Se agrego 10 Mayo
                                if (SI != null) // && ListaTemporal.Any()
                                {

                                    foreach (var NotaIngreso in SI.Where(x => x.Origen == "C")) //Se agrego foreach
                                    {
                                        objReporte = new ReporteCostoUtilidadResumen();
                                        objReporte = NotaIngreso;
                                        objReporte.Modulo = NotaIngreso.Modulo;
                                        objReporte.NroRegistro = NotaIngreso.NroRegistro;
                                        objReporte.Fecha = NotaIngreso.Fecha;
                                        objReporte.Cliente = NotaIngreso.Cliente;
                                        objReporte.Documento = NotaIngreso.Documento;
                                        objReporte.ValorVenta = 0;
                                        objReporte.Producto = "";// SI != null ? SI.FirstOrDefault().Producto : "";
                                        objReporte.ValorVenta = NotaIngreso.ValorVenta;
                                        var IdProducto = VentasTotales.Where(x => x.NroPedido == PedidoOld).Select(x => x.v_IdProductoDetalle).Distinct().ToList();
                                        objReporte.Costo = CalcularCostoNotasIngresoResumen(SaldosIniciales, PedidoOld, IdProducto, NotaIngreso.v_IdMovimiento);
                                        objReporte.v_IdProductoDetalle = null;
                                        objReporte.Margen = NotaIngreso.Margen;
                                        objReporte.Utilidad = NotaIngreso.Utilidad;
                                        ListaFinal.Add(objReporte);

                                    }
                                }

                            }
                            else
                            {
                                var Totales = VentasTotales.Any() ? VentasTotales.Where(x => x.v_IdVenta == item.v_IdVenta && x.NroPedido == item.NroPedido).ToList() : null;
                                item.Costo = item.Modulo == "VENTA" ? CalcularCostoReporteCostoUtilidad(Importaciones, item.v_IdVenta, item.NroPedido, VentasTotales, SaldosIniciales, item.FechaD.Date) : 0;
                                item.ValorVenta = Totales.Any() && Totales != null ? Totales.Sum(x => x.ValorVenta) : 0;
                                ListaFinal.Add(item);
                                Agregado = true;

                            }
                        }


                        if (!Agregado)
                        {
                            var Totales = VentasTotales.Any() ? VentasTotales.Where(x => x.v_IdVenta == item.v_IdVenta && x.NroPedido == item.NroPedido).ToList() : null;

                            item.Costo = item.Modulo == "VENTA" ? CalcularCostoReporteCostoUtilidad(Importaciones, item.v_IdVenta, item.NroPedido, VentasTotales, SaldosIniciales, item.FechaD.Date) : 0;
                            item.ValorVenta = Totales.Any() && Totales != null ? Totales.Sum(x => x.ValorVenta) : 0;
                            ListaFinal.Add(item);
                        }
                        PedidoOld = item.NroPedido;
                        i = i + 1;

                    }

                    objReporte = new ReporteCostoUtilidadResumen();
                    List<ReporteCostoUtilidadResumen> SI2 = SaldosIniciales.Where(x => x.NroPedido == PedidoOld && x.v_IdProductoDetalle == null).GroupBy(x => x.v_IdMovimiento).Select(x => x.FirstOrDefault()).ToList();
                    // && x.v_IdProductoDetalle ==null
                    if (SI2 != null) //&& ListaTemporal.Any()
                    {

                        foreach (ReporteCostoUtilidadResumen NotaIngreso in SI2.Where(x => x.Origen == "C"))
                        {

                            objReporte = NotaIngreso;
                            objReporte.Modulo = NotaIngreso.Modulo;
                            objReporte.NroRegistro = NotaIngreso.NroRegistro;
                            objReporte.Fecha = NotaIngreso.Fecha;
                            objReporte.Cliente = NotaIngreso.Cliente;
                            objReporte.Documento = NotaIngreso.Documento;
                            objReporte.ValorVenta = 0;
                            objReporte.Producto = "";// SI2.FirstOrDefault().Producto;
                            objReporte.ValorVenta = NotaIngreso.ValorVenta;

                            var IdProducto = VentasTotales.Where(x => x.NroPedido == PedidoOld).Select(x => x.v_IdProductoDetalle).Distinct().ToList();
                            objReporte.Costo = CalcularCostoNotasIngresoResumen(SaldosIniciales, objReporte.NroPedido, IdProducto, NotaIngreso.v_IdMovimiento);
                            objReporte.v_IdProductoDetalle = null;
                            objReporte.Margen = NotaIngreso.Margen;
                            objReporte.Utilidad = NotaIngreso.Utilidad;
                            ListaFinal.Add(objReporte);
                            objReporte = new ReporteCostoUtilidadResumen();
                        }

                    }

                }

                return ListaFinal.OrderBy(x => x.Orden).ThenBy(x => x.NroRegistro).ToList();
            }
            catch (Exception ex)
            {
                objOperationResult.Success = 0;
                return null;
            }

        }

        private decimal CalcularCostoReporteCostoUtilidad(List<ReporteCostoUtilidadDetalladoDetalles> Importaciones, string IdVenta, string NroPedido, List<ReporteCostoUtilidadResumen> VentasTotales, List<ReporteCostoUtilidadResumen> Compras, DateTime FechaVenta)
        {

            using (SAMBHSEntitiesModelWin dbContext = new SAMBHSEntitiesModelWin())
            {

                //ReporteCostoUtilidadDetalladoDetalles ImportacionesEcontradas = new ReporteCostoUtilidadDetalladoDetalles();
                var ProductoDetalles = VentasTotales.Where(x => x.v_IdVenta == IdVenta && x.NroPedido == NroPedido).ToList();
                var ImportacionesProducto = Importaciones.Where(x => x.NroPedido == NroPedido).ToList();
                var ComprasProducto = Compras.Where(x => x.NroPedido == NroPedido).ToList();
                decimal CostoImportacion = 0;

                foreach (var item in ProductoDetalles)
                {
                    bool Costeo = false;
                    var DetallesImportacion = ImportacionesProducto.Where(x => x.v_IdProductoDetalle == item.v_IdProductoDetalle).ToList();
                    var DetallesCompra = ComprasProducto.Where(x => x.v_IdProductoDetalle == item.v_IdProductoDetalle).ToList();
                    if (DetallesImportacion.Any())
                    {
                        var ImportacionesEcontradas = DetallesImportacion.Where(x => x.FechaD <= FechaVenta).ToList();
                        CostoImportacion = ImportacionesEcontradas.Any() ? ImportacionesEcontradas.Sum(o => o.Cantidad) == 0 ? 0 : CostoImportacion + ((ImportacionesEcontradas.Sum(o => o.Total) / ImportacionesEcontradas.Sum(o => o.Cantidad)) * item.CantidadVendida) : CostoImportacion;
                        Costeo = true;
                    }
                    if (!Costeo || CostoImportacion == 0)
                    {
                        foreach (var itemDetallesC in DetallesCompra)
                        {
                            CostoImportacion = CostoImportacion + (itemDetallesC.Costo * item.CantidadVendida);
                        }
                    }
                }




                return CostoImportacion;
            }
        }


        private decimal CalcularCostoReporteCostoUtilidadDetallado(List<ReporteCostoUtilidadDetalladoDetalles> Importaciones, string IdProductoDetalle, string NroPedido, List<ReporteCostoUtilidadDetallado> Compras, DateTime fechaVenta)
        {

            using (SAMBHSEntitiesModelWin dbContext = new SAMBHSEntitiesModelWin())
            {
                List<ReporteCostoUtilidadDetalladoDetalles> ImportacionesProducto = new List<ReporteCostoUtilidadDetalladoDetalles>();
                //List<ReporteCostoUtilidadDetalladoDetalles> ImportacionesEcontradas = new lISReporteCostoUtilidadDetalladoDetalles();
                ImportacionesProducto = Importaciones.Where(x => x.NroPedido == NroPedido && x.v_IdProductoDetalle == IdProductoDetalle).ToList().OrderBy(x => x.FechaD).ToList();
                decimal CostoImportacion = 0;
                if (ImportacionesProducto.Count() == 1) //.Count() > 1
                {
                    var ImportacionesEcontradas = ImportacionesProducto.Where(x => x.FechaD <= fechaVenta).ToList().LastOrDefault();
                    CostoImportacion = ImportacionesEcontradas != null ? CostoImportacion + ImportacionesEcontradas.Costo : CostoImportacion;
                    //var ImportacionesEcontradas = ImportacionesProducto.Where(x => x.FechaD <= fechaVenta).ToList();
                    //CostoImportacion = ImportacionesEcontradas.Any() ? ImportacionesEcontradas.Sum(o => o.Cantidad) == 0 ? 0 : ImportacionesEcontradas.Sum(o => o.Total) / ImportacionesEcontradas.Sum(o => o.Cantidad) : 0;

                }
                else if (ImportacionesProducto.Count() > 1)
                {
                    var ImportacionesEcontradas = ImportacionesProducto.Where(x => x.FechaD <= fechaVenta).ToList();
                    CostoImportacion = ImportacionesEcontradas.Any() ? ImportacionesEcontradas.Sum(o => o.Cantidad) == 0 ? 0 : ImportacionesEcontradas.Sum(o => o.Total) / ImportacionesEcontradas.Sum(o => o.Cantidad) : 0;


                }
                //else
                //{
                //foreach (var itemDetallesI in ImportacionesProducto)
                //{
                //    CostoImportacion = CostoImportacion + itemDetallesI.Costo;
                //}

                //}
                if (CostoImportacion == 0)
                {
                    var ComprasProducto = Compras.Where(x => x.NroPedido == NroPedido && x.v_IdProductoDetalle == IdProductoDetalle).ToList();
                    foreach (var itemDetallesC in ComprasProducto)
                    {
                        CostoImportacion = CostoImportacion + itemDetallesC.Costo;
                    }
                }

                return CostoImportacion;
            }
        }

        public decimal CalcularCostoNotasIngresoResumen(List<ReporteCostoUtilidadResumen> SaldosIniciales, string NroPedido, List<string> ListaIdProductoDetalles, string IdMovimiento)
        {
            decimal Costo = 0;
            var Detalles = SaldosIniciales.Where(x => x.v_IdMovimiento == IdMovimiento && x.NroPedido == NroPedido).ToList();
            foreach (var itemNi in Detalles)
            {
                Costo = Costo + itemNi.Costo;
            }
            return Costo;


        }
        public decimal CalcularCostoNotasIngresoDetallado(List<ReporteCostoUtilidadDetallado> SaldosIniciales, string NroPedido, List<string> ListaIdProductoDetalles, string IdMovimiento)
        {
            decimal Costo = 0;
            var Detalles = SaldosIniciales.Where(x => x.v_IdMovimiento == IdMovimiento && x.NroPedido == NroPedido).ToList();
            foreach (var item in Detalles)
            {
                Costo = Costo + item.Costo;
            }
            return Costo;


        }

        public List<ReporteVentasDetraccion> ReporteVentasDetraccion(ref OperationResult objOperationResult, DateTime FechaInicio, DateTime FechaFin, decimal MontoDetraccion, int TipoDocumento, string Producto, string Cliente, int CondicionPago)
        {
            try
            {
                using (var dbContext = new SAMBHSEntitiesModelWin())
                {
                    objOperationResult.Success = 1;

                    var consulta = (from n in dbContext.venta

                                    join J1 in dbContext.ventadetalle on n.v_IdVenta equals J1.v_IdVenta into J1_join
                                    from J1 in J1_join.DefaultIfEmpty()

                                    join J2 in dbContext.productodetalle on J1.v_IdProductoDetalle equals J2.v_IdProductoDetalle
                                        into J2_join
                                    from J2 in J2_join.DefaultIfEmpty()

                                    join J3 in dbContext.producto on J2.v_IdProducto equals J3.v_IdProducto into J3_join
                                    from J3 in J3_join.DefaultIfEmpty()

                                    join J4 in dbContext.cliente on new { c = n.v_IdCliente, Flag = "C" } equals new { c = J4.v_IdCliente, Flag = J4.v_FlagPantalla } into J4_join
                                    from J4 in J4_join.DefaultIfEmpty()

                                    join J5 in dbContext.documento on new { doc = n.i_IdTipoDocumento.Value, eliminado = 0 } equals new { doc = J5.i_CodigoDocumento, eliminado = J5.i_Eliminado.Value } into J5_join
                                    from J5 in J5_join.DefaultIfEmpty()

                                    join J6 in dbContext.datahierarchy on new { condicionpago = 23, eliminado = 0, item = n.i_IdCondicionPago.Value } equals new { condicionpago = J6.i_GroupId, eliminado = J6.i_IsDeleted.Value, item = J6.i_ItemId } into J6_join

                                    from J6 in J6_join.DefaultIfEmpty()

                                    where n.i_IdEstado == 1 && n.i_Eliminado == 0 && n.d_Total > MontoDetraccion
                                    && n.t_FechaRegistro >= FechaInicio && n.t_FechaRegistro <= FechaFin && J3.i_EsAfectoDetraccion == 1
                                    && (n.i_IdTipoDocumento == TipoDocumento || TipoDocumento == -1)
                                    && (J4.v_CodCliente.Trim() == Cliente || Cliente == string.Empty)
                                    && (J3.v_CodInterno.Trim() == Producto || Producto == string.Empty)
                                    && !string.IsNullOrEmpty(n.v_SerieDocumento) && !string.IsNullOrEmpty(n.v_CorrelativoDocumento)
                                    && (n.i_IdCondicionPago == CondicionPago || CondicionPago == -1)


                                    select new
                                    {
                                        Cliente = (J4.v_ApePaterno + " " + J4.v_ApeMaterno + " " + J4.v_PrimerNombre + " " + J4.v_RazonSocial).Trim(),
                                        Fecha = n.t_FechaRegistro,
                                        MontoVenta = n.d_Total,
                                        RUC_DNI = J4.v_NroDocIdentificacion,
                                        Documento = J5.v_Siglas + " " + n.v_SerieDocumento + " " + n.v_CorrelativoDocumento,
                                        NroRegistro = n.v_Mes + " " + n.v_Correlativo,
                                        Moneda = n.i_IdMoneda.Value == 1 ? "S/" : "US$.",
                                        v_IdVenta = n.v_IdVenta,
                                        condicionPago = J6.v_Value1,
                                    }
                                    ).ToList().Select(x => new ReporteVentasDetraccion
                                    {

                                        Cliente = x.Cliente,
                                        Fecha = x.Fecha.Value.Date.Day.ToString("00") + "/" + x.Fecha.Value.Date.Month.ToString("00") + "/" + x.Fecha.Value.Date.Year.ToString(),
                                        MontoVenta = x.MontoVenta ?? 0,
                                        RUC_DNI = x.RUC_DNI,
                                        Documento = x.Documento,
                                        NroRegistro = x.NroRegistro,
                                        MonedaOperacion = x.Moneda,
                                        v_IdVenta = x.v_IdVenta,
                                        CondicionPago = x.condicionPago,

                                    }).ToList();

                    return consulta.GroupBy(x => x.v_IdVenta).ToList().Select(x => x.FirstOrDefault()).OrderBy(x => x.NroRegistro).ToList();
                }
            }
            catch (Exception ex)
            {

                objOperationResult.Success = 0;
                return null;

            }





        }


        public List<ReporteVentasDetalles> ReporteVentasDetalles(ref OperationResult objOperationResult, DateTime FechaInicio, DateTime FechaFin, string Producto, string Cliente, string pstrFilterExpression, string Orden, bool Agrupado, string IdVendedor)
        {
            try
            {
                List<ReporteVentasDetalles> ListaDetalles = new List<ReporteVentasDetalles>();
                using (SAMBHSEntitiesModelWin dbContext = new SAMBHSEntitiesModelWin())
                {

                    //if (!Agrupado)
                    //{
                    var VentasDetalles = (from a in dbContext.ventadetalle

                                          join b in dbContext.venta on new { v = a.v_IdVenta, eliminado = 0 } equals new { v = b.v_IdVenta, eliminado = b.i_Eliminado.Value } into b_join

                                          from b in b_join.DefaultIfEmpty()

                                          join c in dbContext.cliente on new { c = b.v_IdCliente, eliminado = 0 } equals new { c = c.v_IdCliente, eliminado = c.i_Eliminado.Value } into c_join
                                          from c in c_join.DefaultIfEmpty()

                                          join d in dbContext.productodetalle on new { p = a.v_IdProductoDetalle, eliminado = 0 } equals new { p = d.v_IdProductoDetalle, eliminado = d.i_Eliminado.Value } into d_join

                                          from d in d_join.DefaultIfEmpty()

                                          join e in dbContext.documento on new { doc = b.i_IdTipoDocumento.Value, eliminado = 0 } equals new { doc = e.i_CodigoDocumento, eliminado = e.i_Eliminado.Value } into e_join
                                          from e in e_join.DefaultIfEmpty()

                                          join f in dbContext.vendedor on new { vendedor = b.v_IdVendedor, eliminado = 0 } equals new { vendedor = f.v_IdVendedor, eliminado = f.i_Eliminado.Value } into f_join
                                          from f in f_join.DefaultIfEmpty()

                                          join g in dbContext.datahierarchy on new { Grupo = 17, eliminado = 0, UnidadMedida = a.i_IdUnidadMedida.Value } equals new { Grupo = g.i_GroupId, eliminado = g.i_IsDeleted.Value, UnidadMedida = g.i_ItemId } into g_join

                                          from g in g_join.DefaultIfEmpty()
                                          where a.i_Eliminado == 0 && (c.v_CodCliente == Cliente || Cliente == "") && (d.producto.v_CodInterno == Producto || Producto == "")
                                          && b.t_FechaRegistro >= FechaInicio && b.t_FechaRegistro <= FechaFin && (b.v_IdVendedor == IdVendedor || IdVendedor == "-1")
                                          && b.i_IdEstado == 1
                                          select new
                                          {

                                              DocumentoCanjeado = e != null && b != null ? e.v_Siglas + " " + b.v_SerieDocumento + " " + b.v_CorrelativoDocumento : "",
                                              Vendedor = f != null ? f.v_NombreCompleto : "",
                                              DFecha = b.t_FechaRegistro.Value,
                                              Documento = "",
                                              Cliente = string.IsNullOrEmpty(b.v_NombreClienteTemporal) ? (c.v_ApePaterno + " " + c.v_ApeMaterno + " " + c.v_PrimerNombre + " " + c.v_SegundoNombre + " " + c.v_RazonSocial).Trim() : b.v_NombreClienteTemporal,
                                              Cantidad = a.d_Cantidad ?? 0,
                                              UnidadMedida = g.v_Field,
                                              Producto = d != null ? a.v_DescripcionProducto == null || a.v_DescripcionProducto == "" ? d.producto.v_CodInterno + "    " + d.producto.v_Descripcion : d.producto.v_CodInterno + "    " + a.v_DescripcionProducto : "",
                                              Precio = a.d_Precio ?? 0,
                                              Total = a.d_PrecioVenta ?? 0,
                                              //Grupo = !Agrupado ? "" : "DOCUMENTO : " + e.v_Siglas + " " + b.v_SerieDocumento + " " + b.v_CorrelativoDocumento + " " + " VENDEDOR : " + f.v_NombreCompleto,
                                              Grupo = Agrupado ? f != null && !string.IsNullOrEmpty(f.v_NombreCompleto) ? "DOCUMENTO : " + e.v_Siglas + " " + b.v_SerieDocumento + " " + b.v_CorrelativoDocumento + " " + " VENDEDOR : " + f.v_NombreCompleto : "DOCUMENTO : " + e.v_Siglas + " " + b.v_SerieDocumento + " " + b.v_CorrelativoDocumento : "",
                                              IdAlmacen = a.i_IdAlmacen ?? -1,
                                              MonedaOperacion = b.i_IdMoneda == (int)Currency.Soles ? "S/" : "US$.",
                                              NroDocCliente = c.v_NroDocIdentificacion,
                                              TipoDocumento = e.v_Siglas,
                                              NumeroDocumento = b.v_SerieDocumento + " " + b.v_CorrelativoDocumento,


                                          }).ToList().Select(k => new ReporteVentasDetalles
                                          {
                                              DocumentoCanjeado = k.DocumentoCanjeado,
                                              Vendedor = k.Vendedor,
                                              sFecha = k.DFecha.ToShortDateString(),
                                              Documento = k.Documento,
                                              Cliente = k.Cliente,
                                              Cantidad = k.Cantidad,
                                              UnidadMedida = k.UnidadMedida,
                                              Producto = k.Producto,
                                              PrecioUnitario = k.Precio,
                                              Total = k.Total,
                                              CantidadPorEntregar = 0,
                                              UnidadMedidaPorEntregar = "",
                                              Estado = "",
                                              Grupo = Agrupado ? k.Grupo + " FECHA :" + k.DFecha.ToShortDateString() + " CLIENTE : " + k.Cliente.Trim() : k.Grupo,
                                              IdAlmacen = k.IdAlmacen,
                                              MonedaOperacion = k.MonedaOperacion,
                                              NroDocCliente = k.NroDocCliente,
                                              TipoDocumento = k.TipoDocumento,
                                              NumeroDocumento = k.NumeroDocumento,

                                          }).ToList().AsQueryable();


                    if (!string.IsNullOrEmpty(pstrFilterExpression))
                    {
                        VentasDetalles = VentasDetalles.Where(pstrFilterExpression);
                    }

                    if (!string.IsNullOrEmpty(Orden))
                    {
                        VentasDetalles = VentasDetalles.OrderBy(Orden);
                    }

                    ListaDetalles = VentasDetalles.ToList();
                    objOperationResult.Success = 1;
                    return ListaDetalles;
                    //}
                    //else
                    //{

                    //    var VentasDetalles = (from a in dbContext.ventadetalle

                    //                          join b in dbContext.venta on new { v = a.v_IdVenta, eliminado = 0 } equals new { v = b.v_IdVenta, eliminado = b.i_Eliminado.Value } into b_join

                    //                          from b in b_join.DefaultIfEmpty()

                    //                          join c in dbContext.cliente on new { c = b.v_IdCliente, eliminado = 0 } equals new { c = c.v_IdCliente, eliminado = c.i_Eliminado.Value } into c_join
                    //                          from c in c_join.DefaultIfEmpty()

                    //                          join d in dbContext.productodetalle on new { p = a.v_IdProductoDetalle, eliminado = 0 } equals new { p = d.v_IdProductoDetalle, eliminado = d.i_Eliminado.Value } into d_join

                    //                          from d in d_join.DefaultIfEmpty()

                    //                          join e in dbContext.documento on new { doc = b.i_IdTipoDocumento.Value, eliminado = 0 } equals new { doc = e.i_CodigoDocumento, eliminado = e.i_Eliminado.Value } into e_join
                    //                          from e in e_join.DefaultIfEmpty()

                    //                          join f in dbContext.vendedor on new { vendedor = b.v_IdVendedor, eliminado = 0 } equals new { vendedor = f.v_IdVendedor, eliminado = f.i_Eliminado.Value } into f_join
                    //                          from f in f_join.DefaultIfEmpty()

                    //                          join g in dbContext.datahierarchy on new { Grupo = 17, eliminado = 0, UnidadMedida = a.i_IdUnidadMedida.Value } equals new { Grupo = g.i_GroupId, eliminado = g.i_IsDeleted.Value, UnidadMedida = g.i_ItemId } into g_join

                    //                          from g in g_join.DefaultIfEmpty()
                    //                          where a.i_Eliminado == 0 && (c.v_CodCliente == Cliente || Cliente == "") && (d.producto.v_CodInterno == Producto || Producto == "")
                    //                          && b.t_FechaRegistro >= FechaInicio && b.t_FechaRegistro <= FechaFin
                    //                          select new
                    //                          {

                    //                              DocumentoCanjeado = e != null && b != null ? e.v_Siglas + " " + b.v_SerieDocumento + " " + b.v_CorrelativoDocumento : "",
                    //                              Vendedor = f != null ? f.v_NombreCompleto : "",
                    //                              DFecha = b.t_FechaRegistro.Value,
                    //                              Documento = "",
                    //                              Cliente = (c.v_NroDocIdentificacion + "    " + c.v_ApePaterno + " " + c.v_ApeMaterno + " " + c.v_PrimerNombre + " " + c.v_SegundoNombre + " " + c.v_RazonSocial).Trim(),
                    //                              Cantidad = a.d_Cantidad ?? 0,
                    //                              UnidadMedida = g.v_Field,
                    //                              Producto = d != null ? d.producto.v_CodInterno + "    " + d.producto.v_Descripcion : "",
                    //                              Precio = a.d_Precio ?? 0,
                    //                              Total = a.d_PrecioVenta ?? 0,
                    //                              Grupo = "DOCUMENTO : "+ e.v_Siglas +" " + b.v_SerieDocumento +" "+ b.v_CorrelativoDocumento +" "+ " VENDEDOR : "+f.v_NombreCompleto ,
                    //                              IdAlmacen = a.i_IdAlmacen ?? -1,
                    //                              MonedaOperacion = b.i_IdMoneda == (int)Currency.Soles ? "S/" : "US$.",
                    //                          }).ToList().Select(k => new ReporteVentasDetalles
                    //                          {
                    //                              DocumentoCanjeado = k.DocumentoCanjeado,
                    //                              Vendedor = k.Vendedor,
                    //                              sFecha = k.DFecha.ToShortDateString(),
                    //                              Documento = k.Documento,
                    //                              Cliente = k.Cliente,
                    //                              Cantidad = k.Cantidad,
                    //                              UnidadMedida = k.UnidadMedida,
                    //                              Producto = k.Producto,
                    //                              PrecioUnitario = k.Precio,
                    //                              Total = k.Total,
                    //                              CantidadPorEntregar = 0,
                    //                              UnidadMedidaPorEntregar = "",
                    //                              Estado = "",
                    //                              Grupo = k.Grupo+ " " +" FECHA :"+ k.DFecha.ToShortDateString ()+ " "+ " CLIENTE : "+ k.Cliente.Trim (),
                    //                              IdAlmacen = k.IdAlmacen,
                    //                              MonedaOperacion =k.MonedaOperacion ,
                    //                          }).ToList().AsQueryable();


                    //    if (!string.IsNullOrEmpty(pstrFilterExpression))
                    //    {
                    //        VentasDetalles = VentasDetalles.Where(pstrFilterExpression);
                    //    }

                    //    if (!string.IsNullOrEmpty(Orden))
                    //    {
                    //        VentasDetalles = VentasDetalles.OrderBy(Orden);
                    //    }

                    //    ListaDetalles = VentasDetalles.ToList();
                    //    objOperationResult.Success = 1;
                    //    return ListaDetalles;

                }


                //}
            }
            catch (Exception ex)
            {

                objOperationResult.Success = 0;
                return null;


            }


        }

        public List<CuadreCajaModeloAlternativo> ReporteCuadreCajaModelo1(ref OperationResult objOperationResult, int pstri_IdEstablecimiento, DateTime? pstrt_FechaRegistroIni, DateTime? pstrt_FechaRegistroFin, int pintTipoDocumentoId, string pstrt_IdVendedor, string pstrt_Orden, int Almacen, int? rolId, int systemUserId)
        {
            try
            {
                objOperationResult.Success = 1;
                using (SAMBHSEntitiesModelWin dbContext = new SAMBHSEntitiesModelWin())
                {
                    dbContext.CommandTimeout = 0;
                    List<CuadreCajaModeloAlternativo> VentasCredito = new List<CuadreCajaModeloAlternativo>();
                    List<CuadreCajaModeloAlternativo> VentasDeposito = new List<CuadreCajaModeloAlternativo>();
                    List<CuadreCajaModeloAlternativo> Compras = new List<CuadreCajaModeloAlternativo>();
                    List<CuadreCajaModeloAlternativo> Ventas = new List<CuadreCajaModeloAlternativo>();

                    #region Query

                    #region Recopila todas las ventas realizadas  en el rango de fechas del filtro, las cuales tengan o no cobranza

                    List<CuadreCajaModeloAlternativo> TodasVentas =
                            (
                                    from A in dbContext.cobranzapendiente

                                    join B in dbContext.venta on new { IdVenta = A.v_IdVenta, eliminado = 0 } equals new { IdVenta = B.v_IdVenta, eliminado = B.i_Eliminado.Value } into B_join
                                    from B in B_join.DefaultIfEmpty()

                                    join C in dbContext.cobranzadetalle on new { cobranzadetalle = B.v_IdVenta, eliminado = 0 } equals new { cobranzadetalle = C.v_IdVenta, eliminado = C.i_Eliminado.Value } into C_join
                                    from C in C_join.DefaultIfEmpty()

                                    join D in dbContext.cobranza on new { cobranza = C.v_IdCobranza, eliminado = 0 } equals new { cobranza = D.v_IdCobranza, eliminado = D.i_Eliminado.Value } into D_join
                                    from D in D_join.DefaultIfEmpty()

                                    join E in dbContext.cliente on new { IdCliente = B.v_IdCliente, eliminado = 0 } equals new { IdCliente = E.v_IdCliente, eliminado = E.i_Eliminado.Value } into E_join
                                    from E in E_join.DefaultIfEmpty()

                                    join G in dbContext.vendedor on new { IdVendedor = B.v_IdVendedor, eliminado = 0 } equals new { IdVendedor = G.v_IdVendedor, eliminado = G.i_Eliminado.Value } into G_join
                                    from G in G_join.DefaultIfEmpty()
                                    join H in dbContext.documento on new { TipoDoc = B.i_IdTipoDocumento.Value, eliminado = 0 } equals new { TipoDoc = H.i_CodigoDocumento, eliminado = H.i_Eliminado.Value } into H_join
                                    from H in H_join.DefaultIfEmpty()
                                    join I in dbContext.datahierarchy on new { IdMoneda = B.i_IdMoneda.Value, eliminado = 0, Grupo = 18 } equals new { IdMoneda = I.i_ItemId, eliminado = I.i_IsDeleted.Value, Grupo = I.i_GroupId } into I_join
                                    from I in I_join.DefaultIfEmpty()

                                    join J in dbContext.datahierarchy on new { Igv = B.i_IdIgv.Value, eliminado = 0, Grupo = 27 } equals new { Igv = J.i_ItemId, eliminado = J.i_IsDeleted.Value, Grupo = J.i_GroupId } into J_join
                                    from J in J_join.DefaultIfEmpty()

                                    join K in dbContext.datahierarchy on new { CondicionPago = B.i_IdCondicionPago.Value, eliminado = 0, Grupo = 23 } equals new { CondicionPago = K.i_ItemId, eliminado = K.i_IsDeleted.Value, Grupo = K.i_GroupId } into K_join

                                    from K in K_join.DefaultIfEmpty()

                                    join M in dbContext.ventadetalle on new { vd = B.v_IdVenta, eliminado = 0 } equals new { vd = M.v_IdVenta, eliminado = M.i_Eliminado.Value } into M_join
                                    from M in M_join.DefaultIfEmpty()

                                    join N in dbContext.documento on new { docCobranza = D.i_IdTipoDocumento.Value, eliminado = 0 } equals new { docCobranza = N.i_CodigoDocumento, eliminado = N.i_Eliminado.Value } into N_join
                                    from N in N_join.DefaultIfEmpty()

                                    join O in dbContext.datahierarchy on new { FormasPagoCobranzaDetalle = C.i_IdFormaPago.Value, Grupo = 46, eliminado = 0, } equals new { FormasPagoCobranzaDetalle = O.i_ItemId, Grupo = O.i_GroupId, eliminado = O.i_IsDeleted.Value } into O_join
                                    from O in O_join.DefaultIfEmpty()

                                    join P in dbContext.documento on new { fpd = C.i_IdTipoDocumentoRef.Value, eliminado = 0 } equals new { fpd = P.i_CodigoDocumento, eliminado = P.i_Eliminado.Value } into P_join
                                    from P in P_join.DefaultIfEmpty()
                                    where
                                    (B.t_FechaRegistro >= pstrt_FechaRegistroIni
                                     && B.t_FechaRegistro <= pstrt_FechaRegistroFin)
                                    && (B.i_IdTipoDocumento == pintTipoDocumentoId || pintTipoDocumentoId == -1)
                                    && (B.v_IdVendedor == pstrt_IdVendedor || pstrt_IdVendedor == "-1")
                                    && M.v_IdProductoDetalle != null && M.i_IdAlmacen == Almacen
                                    && B.i_IdEstablecimiento == pstri_IdEstablecimiento
                                    && A.i_Eliminado == 0
                                    && M_join.Any(o => o.v_IdVenta == B.v_IdVenta)


                                    select new
                                    {

                                        FechaRegistro = B.t_FechaRegistro,
                                        IdTipoDocumento = B.i_IdTipoDocumento,
                                        NumeroDocumento = B.v_SerieDocumento + " " + B.v_CorrelativoDocumento,
                                        Cliente = B.i_IdEstado == 0 ? "** A N U L A D O **" : !string.IsNullOrEmpty(B.v_NombreClienteTemporal) ? B.v_NombreClienteTemporal : (E.v_ApePaterno + " " + E.v_ApeMaterno + " " + " " + E.v_PrimerNombre + " " + E.v_RazonSocial).Trim(),
                                        NroDocCliente = E.v_NroDocIdentificacion,
                                        CondicionPago = K.v_Value1,
                                        iCondicionpago = B.i_IdCondicionPago,
                                        Vendedor = G.v_NombreCompleto,
                                        Total = B.i_IdEstado == 0 ? 0 : B.d_Total,
                                        Moneda =
                                        B.i_IdMoneda == (int)Currency.Soles
                                            ? "S"
                                            : B.i_IdMoneda == (int)Currency.Dolares ? "D" : "",
                                        GrupoLlave = "1.- DOCUMENTOS DE VENTA EMITIDOS",
                                        TipoDocumento = H.v_Siglas,
                                        GrupoLlave2 = B.i_IdTipoDocumento,
                                        TotalOperaciones = B.i_IdEstado == 0 ? 0 : B.t_FechaRegistro >= pstrt_FechaRegistroIni && B.t_FechaRegistro <= pstrt_FechaRegistroFin ? (H.i_UsadoDocumentoInverso != null && H.i_UsadoDocumentoInverso == 1) ? B.d_Total * -1 : B.d_Total : 0,
                                        NombreDocumento = H.v_Nombre,
                                        TotalDocumento = "TOTAL " + H.v_Nombre + " DEL DIA : ",
                                        TotalGrupoLlave = "TOTAL DOCUMENTOS DE VENTA EMITIDOS DEL DIA : ",
                                        MontoCobrado = O == null ? 0 : !O.v_Value1.Contains("DEP") ? B.i_IdEstado == 0 ? 0 : D == null ? 0 : D.t_FechaRegistro >= pstrt_FechaRegistroIni && D.t_FechaRegistro <= pstrt_FechaRegistroFin ? D.i_IdEstado == 1 ? C.i_IdTipoDocumentoRef == -1 ? C.d_ImporteSoles : P.i_UsadoDocumentoInverso == 1 ? 0 : C.d_ImporteSoles : 0 : 0 : B.i_IdEstado == 0 ? 0 : D.i_IdEstado == 1 ? C.i_IdTipoDocumentoRef != 7 ? C.d_ImporteSoles : 0 : 0,
                                        DocumentoCobranza = O == null ? "" : !O.v_Value1.Contains("DEP") ? N == null ? "" : D.i_IdEstado == 1 ? D.t_FechaRegistro >= pstrt_FechaRegistroIni && D.t_FechaRegistro <= pstrt_FechaRegistroFin ? N.v_Siglas + " " + D.v_Mes + " " + D.v_Correlativo : "" : "" : D.i_IdEstado == 1 ? N == null ? "" : N.v_Siglas + " " + D.v_Mes + " " + D.v_Correlativo : "",
                                        FormasPago = O == null ? "" : !O.v_Value1.Contains("DEP") ? O == null ? "" : D.i_IdEstado == 1 ? D.t_FechaRegistro >= pstrt_FechaRegistroIni && D.t_FechaRegistro <= pstrt_FechaRegistroFin ? O.v_Value1 : "" : "" : D.i_IdEstado == 1 ? O.v_Value1 : "",
                                        MonedaCobranza = D == null || D.i_IdEstado == 0 ? B.i_IdMoneda == (int)Currency.Soles ? "S" : "D" : D.i_IdMoneda == (int)Currency.Soles ? "S" : "D",
                                        Deuda = (O == null || (O != null && !O.v_Value1.Contains("DEP"))) ? B.i_IdEstado == 0 ? 0 : D == null ? A.d_Saldo : D.i_IdEstado == 1 && D.t_FechaRegistro >= pstrt_FechaRegistroIni && D.t_FechaRegistro <= pstrt_FechaRegistroFin ? C.d_NetoXCobrar - C.d_ImporteSoles : B.d_Total
                                        : B.i_IdEstado == 0 ? 0 : D == null ? A.d_Saldo : D.i_IdEstado == 1 ? C.d_NetoXCobrar - C.d_ImporteSoles : B.d_Total,
                                        IdVenta = B.v_IdVenta,
                                        IdCobranza = O == null ? "" : !O.v_Value1.Contains("DEP") ? D == null ? null : D.i_IdEstado == 1 && D.t_FechaRegistro >= pstrt_FechaRegistroIni && D.t_FechaRegistro <= pstrt_FechaRegistroFin ? C.v_IdCobranzaDetalle : null : D.i_IdEstado == 1 ? C.v_IdCobranzaDetalle : null,
                                        DFechaPago = O == null ? null : !O.v_Value1.Contains("DEP") ? D == null ? null : D.i_IdEstado == 1 && D.t_FechaRegistro >= pstrt_FechaRegistroIni && D.t_FechaRegistro <= pstrt_FechaRegistroFin ? D.t_FechaRegistro : null : D.i_IdEstado == 1 ? D.t_FechaRegistro : null,
                                        EstadoCobranza = D != null ? D.i_IdEstado == 0 ? "ANULADA" : "PAGADA" : "SINPAGAR",
                                        EstadoVenta = D.i_IdEstado == 0 ? "ACTIVA" : "ANULADA",
                                        ClienteEsAgente = B.i_ClienteEsAgente.Value,
                                        GrupoMoneda =
                                        D == null || D.i_IdEstado == 0
                                            ? B.i_IdMoneda == (int)Currency.Soles
                                                ? "MONEDA COBRANZA : " + "SOLES"
                                                : "MONEDA COBRANZA : " + "DOLARES"
                                            : D.i_IdMoneda == (int)Currency.Soles
                                                ? "MONEDA COBRANZA : " + "SOLES"
                                                : "MONEDA COBRANZA : " + "DOLARES",

                                    }).Distinct().ToList().Select(l => new CuadreCajaModeloAlternativo

                                    {
                                        Fecha = l.FechaRegistro.Value.ToShortDateString(),
                                        IdTipoDocumento = l.IdTipoDocumento.Value,
                                        NumeroDocumento = l.NumeroDocumento,
                                        Cliente = l.Cliente,
                                        NroDocCliente = l.NroDocCliente,
                                        CondicionPago = l.CondicionPago,
                                        Vendedor = l.Vendedor,
                                        Total = l.IdTipoDocumento == 500 || l.IdTipoDocumento == 502 ? -1 * (l.Total.Value) : l.Total.Value, // B.d_ImporteSoles.Value,

                                        //Total = l.Total.Value,
                                        Moneda = l.Moneda,
                                        GrupoLLave = l.GrupoLlave.ToString(),
                                        TipoDocumento = l.TipoDocumento,
                                        GrupoLlave2 = l.GrupoLlave2.ToString(),
                                        NombreDocumento = l.NombreDocumento,
                                        TotalDocumento = l.TotalDocumento,
                                        TotalOperacion = l.TotalOperaciones.Value,
                                        TotalGrupoLlave = l.TotalGrupoLlave,
                                        MontoCobrado = l.MontoCobrado.Value,
                                        DocumentoCobranza = l.DocumentoCobranza,
                                        FormasPago = l.FormasPago,
                                        Deuda = l.Deuda.Value,
                                        MonedaCobranza = l.MonedaCobranza,
                                        IdVenta = l.IdVenta,
                                        IdCobranza = l.IdCobranza,
                                        FechaPago = l.DFechaPago != null ? l.DFechaPago.Value.ToShortDateString() : "",
                                        EstadoCobranza = l.EstadoCobranza,
                                        EstadoVenta = l.EstadoVenta,
                                        GrupoMoneda = l.GrupoMoneda,
                                        iCondicionPago = l.iCondicionpago.Value,
                                        ClienteEsAgente = 1 

                                    }
                                )
                                .ToList()
                                .GroupBy(l => new { l.IdVenta, l.IdCobranza })
                                .Select(group => group.Last())
                                .ToList()
                                .AsQueryable()
                                .OrderBy(pstrt_Orden)
                                .ToList();

                    int pi = 1;
                    foreach (var item in TodasVentas)
                    {
                        if (item.EstadoCobranza == "PAGADA" || item.EstadoCobranza == "SINPAGAR")
                        {
                            var obj = Ventas.Where(l => l.EstadoCobranza == "ANULADA" && l.IdVenta == item.IdVenta)
                                    .FirstOrDefault();
                            if (obj != null)
                            {
                                Ventas.Remove(obj);
                                Ventas.Add(item);
                            }
                            else
                            {
                                Ventas.Add(item);
                            }
                        }
                        else if ((item.EstadoCobranza == "ANULADA" && !Ventas.Select(l => l.IdVenta).Contains(item.IdVenta)))
                        {
                            Ventas.Add(item);
                        }
                    }

                    #endregion

                    //#region Recopila todas las cobranzas realizadas en el rango de fechas del filtro , pero que las ventas no han sido emitidas en el rango de fechas del filtro

                    //List<CuadreCajaModeloAlternativo> VentasEmitidasOtrosDias =
                    //(
                    //    from A in dbContext.cobranzapendiente

                    //    join B in dbContext.venta on new { IdVenta = A.v_IdVenta, eliminado = 0 } equals
                    //    new { IdVenta = B.v_IdVenta, eliminado = B.i_Eliminado.Value } into B_join
                    //    from B in B_join.DefaultIfEmpty()

                    //    join C in dbContext.cobranzadetalle on new { cobranzadetalle = B.v_IdVenta, eliminado = 0 } equals
                    //    new { cobranzadetalle = C.v_IdVenta, eliminado = C.i_Eliminado.Value } into C_join
                    //    from C in C_join.DefaultIfEmpty()

                    //    join D in dbContext.cobranza on new { cobranza = C.v_IdCobranza, eliminado = 0 } equals
                    //    new { cobranza = D.v_IdCobranza, eliminado = D.i_Eliminado.Value } into D_join
                    //    from D in D_join.DefaultIfEmpty()

                    //    join E in dbContext.cliente on new { IdCliente = B.v_IdCliente, eliminado = 0 } equals
                    //    new { IdCliente = E.v_IdCliente, eliminado = E.i_Eliminado.Value } into E_join
                    //    from E in E_join.DefaultIfEmpty()

                    //    join G in dbContext.vendedor on new { IdVendedor = B.v_IdVendedor, eliminado = 0 } equals new { IdVendedor = G.v_IdVendedor, eliminado = G.i_Eliminado.Value } into G_join
                    //    from G in G_join.DefaultIfEmpty()
                    //    join H in dbContext.documento on new { TipoDoc = B.i_IdTipoDocumento.Value, eliminado = 0 } equals
                    //    new { TipoDoc = H.i_CodigoDocumento, eliminado = H.i_Eliminado.Value } into H_join
                    //    from H in H_join.DefaultIfEmpty()
                    //    join I in dbContext.datahierarchy on
                    //    new { IdMoneda = B.i_IdMoneda.Value, eliminado = 0, Grupo = 18 } equals
                    //    new { IdMoneda = I.i_ItemId, eliminado = I.i_IsDeleted.Value, Grupo = I.i_GroupId } into I_join
                    //    from I in I_join.DefaultIfEmpty()

                    //    join J in dbContext.datahierarchy on new { Igv = B.i_IdIgv.Value, eliminado = 0, Grupo = 27 }
                    //    equals new { Igv = J.i_ItemId, eliminado = J.i_IsDeleted.Value, Grupo = J.i_GroupId } into J_join
                    //    from J in J_join.DefaultIfEmpty()

                    //    join K in dbContext.datahierarchy on
                    //    new { CondicionPago = B.i_IdCondicionPago.Value, eliminado = 0, Grupo = 23 } equals
                    //    new { CondicionPago = K.i_ItemId, eliminado = K.i_IsDeleted.Value, Grupo = K.i_GroupId } into
                    //    K_join

                    //    from K in K_join.DefaultIfEmpty()

                    //    join M in dbContext.ventadetalle on new { vd = B.v_IdVenta, eliminado = 0 } equals
                    //    new { vd = M.v_IdVenta, eliminado = M.i_Eliminado.Value } into M_join
                    //    from M in M_join.DefaultIfEmpty()

                    //    join N in dbContext.documento on new { docCobranza = D.i_IdTipoDocumento.Value, eliminado = 0 }
                    //    equals new { docCobranza = N.i_CodigoDocumento, eliminado = N.i_Eliminado.Value } into N_join
                    //    from N in N_join.DefaultIfEmpty()

                    //    join O in dbContext.datahierarchy on new { FormasPagoCobranzaDetalle = C.i_IdFormaPago.Value, Grupo = 46, eliminado = 0, } equals new
                    //    {
                    //        FormasPagoCobranzaDetalle = O.i_ItemId,
                    //        Grupo = O.i_GroupId,
                    //        eliminado = O.i_IsDeleted.Value
                    //    } into O_join
                    //    from O in O_join.DefaultIfEmpty()
                    //    join P in dbContext.documento on new { fpd = C.i_IdTipoDocumentoRef.Value, eliminado = 0 } equals new { fpd = P.i_CodigoDocumento, eliminado = P.i_Eliminado.Value } into P_join
                    //    from P in P_join.DefaultIfEmpty()
                    //    where
                    //    (D.t_FechaRegistro >= pstrt_FechaRegistroIni
                    //     && D.t_FechaRegistro <= pstrt_FechaRegistroFin)
                    //    && (B.i_IdTipoDocumento == pintTipoDocumentoId || pintTipoDocumentoId == -1)
                    //    && (B.v_IdVendedor == pstrt_IdVendedor || pstrt_IdVendedor == "-1")
                    //    && M.v_IdProductoDetalle != null && M.i_IdAlmacen == Almacen
                    //    && B.i_IdEstablecimiento == pstri_IdEstablecimiento
                    //    && D != null && B.t_FechaRegistro != D.t_FechaRegistro
                    //    && D.i_IdEstado == 1 && A.i_Eliminado == 0

                    //    && M_join.Any(o => o.v_IdVenta == B.v_IdVenta)
                    //    select new
                    //    {
                    //        FechaRegistro = B.t_FechaRegistro,
                    //        IdTipoDocumento = B.i_IdTipoDocumento,
                    //        NumeroDocumento = B.v_SerieDocumento + " " + B.v_CorrelativoDocumento,
                    //        Cliente =
                    //        B.i_IdEstado == 0
                    //            ? "** A N U L A D O **"
                    //            : !string.IsNullOrEmpty(B.v_NombreClienteTemporal) ? B.v_NombreClienteTemporal : (E.v_ApePaterno + " " + E.v_ApeMaterno + " " + " " + E.v_PrimerNombre + " " +
                    //               E.v_RazonSocial).Trim(),
                    //        NroDocCliente = E.v_NroDocIdentificacion,
                    //        CondicionPago = K.v_Value1,
                    //        iCondicionPago = B.i_IdCondicionPago,
                    //        Vendedor = G.v_NombreCompleto,

                    //        //Total = B.i_IdEstado == 0 ? 0 : B.d_Total,
                    //        Total = B.i_IdEstado == 0 ? 0 : B.i_IdTipoDocumento == 500 || B.i_IdTipoDocumento == 502 ? -1 * (B.d_Total.Value) : B.d_Total.Value, // B.d_ImporteSoles.Value,
                          
                    //        Moneda =
                    //        B.i_IdMoneda == (int)Currency.Soles
                    //            ? "S"
                    //            : B.i_IdMoneda == (int)Currency.Dolares ? "D" : "",
                    //        GrupoLlave = "1.- DOCUMENTOS DE VENTA EMITIDOS",
                    //        TipoDocumento = H.v_Siglas,
                    //        GrupoLlave2 = B.i_IdTipoDocumento,
                    //        TotalOperaciones = B.i_IdEstado == 0 ? 0 : B.t_FechaRegistro >= pstrt_FechaRegistroIni && B.t_FechaRegistro <= pstrt_FechaRegistroFin ? (H.i_UsadoDocumentoInverso != null && H.i_UsadoDocumentoInverso == 1) ? B.d_Total * -1 : B.d_Total : 0,
                    //        NombreDocumento = H.v_Nombre,
                    //        TotalDocumento = "TOTAL " + H.v_Nombre + " DEL DIA : ",
                    //        TotalGrupoLlave = "TOTAL DOCUMENTOS DE VENTA EMITIDOS DEL DIA : ",
                    //        MontoCobrado = O == null ? 0 : !O.v_Value1.Contains("DEP") ? B.i_IdEstado == 0 ? 0 : D == null ? 0 : D.t_FechaRegistro >= pstrt_FechaRegistroIni && D.t_FechaRegistro <= pstrt_FechaRegistroFin ? D.i_IdEstado == 1 ? C.i_IdTipoDocumentoRef == -1 ? C.d_ImporteSoles : P.i_UsadoDocumentoInverso == 1 ? 0 : C.d_ImporteSoles : 0 : 0 : B.i_IdEstado == 0 ? 0 : D.i_IdEstado == 1 ? C.i_IdTipoDocumentoRef != 7 ? C.d_ImporteSoles : 0 : 0,
                    //        DocumentoCobranza = O == null ? "" : !O.v_Value1.Contains("DEP") ? N == null ? "" : D.i_IdEstado == 1 ? D.t_FechaRegistro >= pstrt_FechaRegistroIni && D.t_FechaRegistro <= pstrt_FechaRegistroFin ? N.v_Siglas + " " + D.v_Mes + " " + D.v_Correlativo : "" : "" : D.i_IdEstado == 1 ? N == null ? "" : N.v_Siglas + " " + D.v_Mes + " " + D.v_Correlativo : "",
                    //        FormasPago = O == null ? "" : !O.v_Value1.Contains("DEP") ? O == null ? "" : D.i_IdEstado == 1 ? D.t_FechaRegistro >= pstrt_FechaRegistroIni && D.t_FechaRegistro <= pstrt_FechaRegistroFin ? O.v_Value1 : "" : "" : D.i_IdEstado == 1 ? O.v_Value1 : "",
                    //        MonedaCobranza = D == null || D.i_IdEstado == 0 ? B.i_IdMoneda == (int)Currency.Soles ? "S" : "D" : D.i_IdMoneda == (int)Currency.Soles ? "S" : "D",
                    //        Deuda = (O == null || (O != null && !O.v_Value1.Contains("DEP"))) ? B.i_IdEstado == 0 ? 0 : D == null ? A.d_Saldo : D.i_IdEstado == 1 && D.t_FechaRegistro >= pstrt_FechaRegistroIni && D.t_FechaRegistro <= pstrt_FechaRegistroFin ? C.d_NetoXCobrar - C.d_ImporteSoles : B.d_Total
                    //               : B.i_IdEstado == 0 ? 0 : D == null ? A.d_Saldo : D.i_IdEstado == 1 ? C.d_NetoXCobrar - C.d_ImporteSoles : B.d_Total,
                    //        IdVenta = B.v_IdVenta,
                    //        IdCobranza = O == null ? "" : !O.v_Value1.Contains("DEP") ? D == null ? null : D.i_IdEstado == 1 && D.t_FechaRegistro >= pstrt_FechaRegistroIni && D.t_FechaRegistro <= pstrt_FechaRegistroFin ? C.v_IdCobranzaDetalle : null : D.i_IdEstado == 1 ? C.v_IdCobranzaDetalle : null,
                    //        DFechaPago = O == null ? null : !O.v_Value1.Contains("DEP") ? D == null ? null : D.i_IdEstado == 1 && D.t_FechaRegistro >= pstrt_FechaRegistroIni && D.t_FechaRegistro <= pstrt_FechaRegistroFin ? D.t_FechaRegistro : null : D.i_IdEstado == 1 ? D.t_FechaRegistro : null,
                    //        GrupoMoneda =
                    //        D == null || D.i_IdEstado == 0
                    //            ? B.i_IdMoneda == (int)Currency.Soles
                    //                ? "MONEDA COBRANZA : " + "SOLES"
                    //                : "MONEDA COBRANZA : " + "DOLARES"
                    //            : D.i_IdMoneda == (int)Currency.Soles
                    //                ? "MONEDA COBRANZA : " + "SOLES"
                    //                : "MONEDA COBRANZA : " + "DOLARES",
                    //    }).Distinct().ToList().Select(l => new CuadreCajaModeloAlternativo

                    //    {
                    //        Fecha = l.FechaRegistro.Value.ToShortDateString(),
                    //        IdTipoDocumento = l.IdTipoDocumento.Value,
                    //        NumeroDocumento = l.NumeroDocumento,
                    //        Cliente = l.Cliente,
                    //        NroDocCliente = l.NroDocCliente,
                    //        CondicionPago = l.CondicionPago,
                    //        Vendedor = l.Vendedor,
                    //        Total = l.Total,
                    //        Moneda = l.Moneda,
                    //        GrupoLLave = l.GrupoLlave.ToString(),
                    //        TipoDocumento = l.TipoDocumento,
                    //        GrupoLlave2 = l.GrupoLlave2.ToString(),
                    //        NombreDocumento = l.NombreDocumento,
                    //        TotalDocumento = l.TotalDocumento,
                    //        TotalOperacion = l.TotalOperaciones.Value,
                    //        TotalGrupoLlave = l.TotalGrupoLlave,
                    //        MontoCobrado = l.MontoCobrado.Value,
                    //        DocumentoCobranza = l.DocumentoCobranza,
                    //        FormasPago = l.FormasPago,
                    //        Deuda = l.Deuda.Value,
                    //        MonedaCobranza = l.MonedaCobranza,
                    //        IdVenta = l.IdVenta,
                    //        IdCobranza = l.IdCobranza,
                    //        FechaPago = l.DFechaPago != null ? l.DFechaPago.Value.ToShortDateString() : "",
                    //        GrupoMoneda = l.GrupoMoneda,
                    //        iCondicionPago = l.iCondicionPago.Value,
                    //    }
                    //).ToList().GroupBy(l => new { l.IdVenta, l.IdCobranza }).Select(group => group.Last()).ToList();
                    //Ventas =
                    //    VentasEmitidasOtrosDias.Concat(Ventas)
                    //        .ToList()
                    //        .GroupBy(l => new { l.IdVenta, l.IdCobranza })
                    //        .Select(group => group.Last())
                    //        .ToList();

                    //#endregion


                    //if (!Ventas.Any())
                    //{

                    //    CuadreCajaModeloAlternativo objReporteVenta = new CuadreCajaModeloAlternativo();
                    //    objReporteVenta.GrupoLLave = "1.- DOCUMENTOS DE VENTA EMITIDOS";
                    //    objReporteVenta.Cliente = "**SIN OPERACIONES**";
                    //    Ventas.Add(objReporteVenta);
                    //}

                    //#region Recopila todas las Ventas de Credito en el rango de fechas del filtro , las cuales tengan cobranza o no
                    //List<CuadreCajaModeloAlternativo> Tv = new List<CuadreCajaModeloAlternativo>();
                    //Tv = TodasVentas.Select(item => (CuadreCajaModeloAlternativo)item.Clone()).ToList();

                    //var TodasCredito = Tv.Where(l => l.iCondicionPago == 2).Select(p =>
                    //{
                    //    var k = p;
                    //    k.TotalGrupoLlave = "TOTAL DOCUMENTO DE VENTA CRÉDITO DEL DIA :";
                    //    k.GrupoLLave = "2.-DOCUMENTOS DE VENTA CRÉDITO";
                    //    return k;
                    //}).ToList();
                    //foreach (var item in TodasCredito)
                    //{
                    //    if (item.EstadoCobranza == "PAGADA" || item.EstadoCobranza == "SINPAGAR")
                    //    {
                    //        var obj =
                    //            VentasCredito.Where(l => l.EstadoCobranza == "ANULADA" && l.IdVenta == item.IdVenta)
                    //                .FirstOrDefault();
                    //        if (obj != null)
                    //        {
                    //            VentasCredito.Remove(obj);
                    //            VentasCredito.Add(item);
                    //        }
                    //        else
                    //        {
                    //            VentasCredito.Add(item);
                    //        }
                    //    }
                    //    else if ((item.EstadoCobranza == "ANULADA" &&
                    //              !VentasCredito.Select(l => l.IdVenta).Contains(item.IdVenta)))
                    //    {
                    //        VentasCredito.Add(item);
                    //    }

                    //}

                    //#endregion
                    //#region Recopilas todas las Cobranzas del rango de fechas del filtro pero que las  de Ventas al Credito son de otros dias
                    //List<CuadreCajaModeloAlternativo> TvOd = new List<CuadreCajaModeloAlternativo>();

                    //TvOd = VentasEmitidasOtrosDias.Select(item => (CuadreCajaModeloAlternativo)item.Clone()).ToList();
                    //var VentasCreditoOtrosDias = TvOd.Where(l => l.iCondicionPago == 2).Select(p =>
                    //{
                    //    var k = p;
                    //    k.TotalGrupoLlave = "TOTAL DOCUMENTO DE VENTA CRÉDITO DEL DIA :";
                    //    k.GrupoLLave = "2.-DOCUMENTOS DE VENTA CRÉDITO";
                    //    return k;

                    //}).ToList();
                    //#endregion
                    //#region Recopila todas las ventas Anuladas
                    //List<CuadreCajaModeloAlternativo> VentasAnuladas = (from B in dbContext.venta


                    //                                                    join E in dbContext.cliente on new { IdCliente = B.v_IdCliente, eliminado = 0 } equals new { IdCliente = E.v_IdCliente, eliminado = E.i_Eliminado.Value } into E_join
                    //                                                    from E in E_join.DefaultIfEmpty()

                    //                                                    join G in dbContext.vendedor on new { IdVendedor = B.v_IdVendedor, eliminado = 0 } equals new { IdVendedor = G.v_IdVendedor, eliminado = G.i_Eliminado.Value } into G_join
                    //                                                    from G in G_join.DefaultIfEmpty()
                    //                                                    join H in dbContext.documento on new { TipoDoc = B.i_IdTipoDocumento.Value, eliminado = 0 } equals new { TipoDoc = H.i_CodigoDocumento, eliminado = H.i_Eliminado.Value } into H_join
                    //                                                    from H in H_join.DefaultIfEmpty()
                    //                                                    join I in dbContext.datahierarchy on new { IdMoneda = B.i_IdMoneda.Value, eliminado = 0, Grupo = 18 } equals new { IdMoneda = I.i_ItemId, eliminado = I.i_IsDeleted.Value, Grupo = I.i_GroupId } into I_join
                    //                                                    from I in I_join.DefaultIfEmpty()

                    //                                                    join J in dbContext.datahierarchy on new { Igv = B.i_IdIgv.Value, eliminado = 0, Grupo = 27 } equals new { Igv = J.i_ItemId, eliminado = J.i_IsDeleted.Value, Grupo = J.i_GroupId } into J_join
                    //                                                    from J in J_join.DefaultIfEmpty()

                    //                                                    join K in dbContext.datahierarchy on new { CondicionPago = B.i_IdCondicionPago.Value, eliminado = 0, Grupo = 23 } equals new { CondicionPago = K.i_ItemId, eliminado = K.i_IsDeleted.Value, Grupo = K.i_GroupId } into K_join

                    //                                                    from K in K_join.DefaultIfEmpty()

                    //                                                    join M in dbContext.ventadetalle on new { vd = B.v_IdVenta, eliminado = 0 } equals new { vd = M.v_IdVenta, eliminado = M.i_Eliminado.Value } into M_join
                    //                                                    from M in M_join.DefaultIfEmpty()
                    //                                                    where
                    //                                                    (B.t_FechaRegistro >= pstrt_FechaRegistroIni
                    //                                                     && B.t_FechaRegistro <= pstrt_FechaRegistroFin)
                    //                                                    && (B.i_IdTipoDocumento == pintTipoDocumentoId || pintTipoDocumentoId == -1)
                    //                                                    && (B.v_IdVendedor == pstrt_IdVendedor || pstrt_IdVendedor == "-1")
                    //                                                    && M.v_IdProductoDetalle != null && M.i_IdAlmacen == Almacen
                    //                                                    && B.i_IdEstablecimiento == pstri_IdEstablecimiento

                    //                                                  && B.i_IdEstado == 0 && B.i_Eliminado == 0

                    //                                                  && M_join.Any(o => o.v_IdVenta == B.v_IdVenta)

                    //                                                    select new
                    //                                                    {
                    //                                                        FechaRegistro = B.t_FechaRegistro,
                    //                                                        IdTipoDocumento = B.i_IdTipoDocumento,
                    //                                                        NumeroDocumento = B.v_SerieDocumento + " " + B.v_CorrelativoDocumento,
                    //                                                        Cliente =
                    //                                                        B.i_IdEstado == 0
                    //                                                            ? "** A N U L A D O **"
                    //                                                            : (E.v_ApePaterno + " " + E.v_ApeMaterno + " " + " " + E.v_PrimerNombre + " " +
                    //                                                               E.v_RazonSocial).Trim(),
                    //                                                        NroDocCliente = E.v_NroDocIdentificacion,
                    //                                                        CondicionPago = K.v_Value1,
                    //                                                        iCondicionpago = B.i_IdCondicionPago,
                    //                                                        Vendedor = G.v_NombreCompleto,

                    //                                                        //Total = B.i_IdEstado == 0 ? 0 : B.d_Total,
                    //                                                        Total = B.i_IdEstado == 0 ? 0 : B.i_IdTipoDocumento == 500 || B.i_IdTipoDocumento == 502 ? -1 * (B.d_Total.Value) : B.d_Total.Value, // B.d_ImporteSoles.Value,
                          
                    //                                                        Moneda =
                    //                                                        B.i_IdMoneda == (int)Currency.Soles
                    //                                                            ? "S"
                    //                                                            : B.i_IdMoneda == (int)Currency.Dolares ? "D" : "",
                    //                                                        GrupoLlave = "1.- DOCUMENTOS DE VENTA EMITIDOS",
                    //                                                        TipoDocumento = H.v_Siglas,
                    //                                                        GrupoLlave2 = B.i_IdTipoDocumento,

                    //                                                        TotalOperaciones =
                    //                                                        B.i_IdEstado == 0
                    //                                                            ? 0
                    //                                                            : B.t_FechaRegistro >= pstrt_FechaRegistroIni &&
                    //                                                              B.t_FechaRegistro <= pstrt_FechaRegistroFin
                    //                                                                ? (H.i_UsadoDocumentoInverso != null && H.i_UsadoDocumentoInverso == 1)
                    //                                                                    ? B.d_Total * -1
                    //                                                                    : B.d_Total
                    //                                                                : 0,
                    //                                                        NombreDocumento = H.v_Nombre,
                    //                                                        TotalDocumento = "TOTAL " + H.v_Nombre + " DEL DIA : ",
                    //                                                        TotalGrupoLlave = "TOTAL DOCUMENTOS DE VENTA EMITIDOS DEL DIA : ",
                    //                                                        MontoCobrado = 0,
                    //                                                        DocumentoCobranza = "",

                    //                                                        FormasPago = "",


                    //                                                        MonedaCobranza = B.i_IdMoneda == (int)Currency.Soles ? "S" : "D",


                    //                                                        Deuda = 0,

                    //                                                        IdVenta = B.v_IdVenta,
                    //                                                        IdCobranza = "",


                    //                                                        DFechaPago = "",
                    //                                                        EstadoCobranza = "SINPAGAR",
                    //                                                        EstadoVenta = B.i_IdEstado == 0 ? "ACTIVA" : "ANULADA",
                    //                                                        GrupoMoneda = B.i_IdMoneda == (int)Currency.Soles ? "MONEDA COBRANZA : " + "SOLES" : "MONEDA COBRANZA : " + "DOLARES",



                    //                                                    }).Distinct().ToList().Select(l => new CuadreCajaModeloAlternativo

                    //                                                    {
                    //                                                        Fecha = l.FechaRegistro.Value.ToShortDateString(),
                    //                                                        IdTipoDocumento = l.IdTipoDocumento.Value,
                    //                                                        NumeroDocumento = l.NumeroDocumento,
                    //                                                        Cliente = l.Cliente,
                    //                                                        NroDocCliente = l.NroDocCliente,
                    //                                                        CondicionPago = l.CondicionPago,
                    //                                                        Vendedor = l.Vendedor,
                    //                                                        Total = l.Total,
                    //                                                        Moneda = l.Moneda,
                    //                                                        GrupoLLave = l.GrupoLlave.ToString(),
                    //                                                        TipoDocumento = l.TipoDocumento,
                    //                                                        GrupoLlave2 = l.GrupoLlave2.ToString(),
                    //                                                        NombreDocumento = l.NombreDocumento,
                    //                                                        TotalDocumento = l.TotalDocumento,
                    //                                                        TotalOperacion = l.TotalOperaciones.Value,
                    //                                                        TotalGrupoLlave = l.TotalGrupoLlave,
                    //                                                        MontoCobrado = l.MontoCobrado,
                    //                                                        DocumentoCobranza = l.DocumentoCobranza,
                    //                                                        FormasPago = l.FormasPago,
                    //                                                        Deuda = l.Deuda,
                    //                                                        MonedaCobranza = l.MonedaCobranza,
                    //                                                        IdVenta = l.IdVenta,
                    //                                                        IdCobranza = l.IdCobranza,
                    //                                                        FechaPago = l.DFechaPago,
                    //                                                        EstadoCobranza = l.EstadoCobranza,
                    //                                                        EstadoVenta = l.EstadoVenta,
                    //                                                        GrupoMoneda = l.GrupoMoneda,
                    //                                                        iCondicionPago = l.iCondicionpago.Value,

                    //                                                    }
                    //                               )
                    //                               .ToList()
                    //                               .GroupBy(l => new { l.IdVenta, l.IdCobranza })
                    //                               .Select(group => group.Last())
                    //                               .ToList()
                    //                               .AsQueryable()
                    //                               .OrderBy(pstrt_Orden)
                    //                               .ToList();

                    //#endregion

                    //#region CreditosAnuladas


                    //List<CuadreCajaModeloAlternativo> CA = new List<CuadreCajaModeloAlternativo>();
                    //CA = VentasAnuladas.Select(item => (CuadreCajaModeloAlternativo)item.Clone()).ToList();

                    //var AnuladasCredito = CA.Where(l => l.iCondicionPago == 2).Select(p =>
                    //{
                    //    var k = p;
                    //    k.TotalGrupoLlave = "TOTAL DOCUMENTO DE VENTA CRÉDITO DEL DIA :";
                    //    k.GrupoLLave = "2.-DOCUMENTOS DE VENTA CRÉDITO";
                    //    return k;
                    //}).ToList();


                    //#endregion

                    //VentasCredito =
                    //    VentasCredito.Concat(VentasCreditoOtrosDias)
                    //        .ToList()
                    //        .GroupBy(l => new { l.IdVenta, l.IdCobranza })
                    //        .Select(group => group.Last())
                    //        .ToList().Concat(AnuladasCredito).ToList().Concat(VentasAnuladas).ToList();

                    //if (!VentasCredito.Any())
                    //{
                    //    CuadreCajaModeloAlternativo objReporteVentaCredito = new CuadreCajaModeloAlternativo();
                    //    objReporteVentaCredito.GrupoLLave = "2.-DOCUMENTOS DE VENTA CRÉDITO";
                    //    objReporteVentaCredito.Cliente = "**SIN OPERACIONES**";
                    //    VentasCredito.Add(objReporteVentaCredito);
                    //}

                    //#region Recopila todas las Ventas de Deposito en el rango de fechas del filtro , las cuales tengan cobranza o no

                    //Tv = TodasVentas.Select(item => (CuadreCajaModeloAlternativo)item.Clone()).ToList();

                    //var TodasDeposito = Tv.Where(l => l.FormasPago.Contains("DEP")).Select(p =>
                    //{
                    //    var k = p;
                    //    k.TotalGrupoLlave = "TOTAL DOCUMENTO DE VENTA DEPÓSITO DEL DIA :";
                    //    k.GrupoLLave = "3.-DOCUMENTOS DE VENTA DEPÓSITO";
                    //    return k;
                    //}).ToList();
                    //foreach (var item in TodasDeposito)
                    //{
                    //    if (item.EstadoCobranza == "PAGADA" || item.EstadoCobranza == "SINPAGAR")
                    //    {
                    //        var obj =
                    //            VentasDeposito.Where(l => l.EstadoCobranza == "ANULADA" && l.IdVenta == item.IdVenta)
                    //                .FirstOrDefault();

                    //        if (obj != null)
                    //        {
                    //            VentasDeposito.Remove(obj);
                    //            VentasDeposito.Add(item);
                    //        }
                    //        else
                    //        {
                    //            VentasDeposito.Add(item);
                    //        }
                    //    }
                    //    else if ((item.EstadoCobranza == "ANULADA" &&
                    //              !VentasDeposito.Select(l => l.IdVenta).Contains(item.IdVenta)))
                    //    {
                    //        VentasDeposito.Add(item);
                    //    }

                    //}

                    //#endregion
                    //#region Recopilas todas las Cobranzas del rango de fechas del filtro pero que las  de Ventas Deposito son de otros dias
                    ////List<CuadreCajaModeloAlternativo> TvOd = new List<CuadreCajaModeloAlternativo>();

                    //TvOd = VentasEmitidasOtrosDias.Select(item => (CuadreCajaModeloAlternativo)item.Clone()).ToList();
                    //var VentasDepositoOtrosDias = TvOd.Where(l => l.FormasPago.Contains("DEP")).Select(p =>
                    //{
                    //    var k = p;
                    //    k.TotalGrupoLlave = "TOTAL DOCUMENTO DE VENTA DEPÓSITO DEL DIA :";
                    //    k.GrupoLLave = "3.-DOCUMENTOS DE VENTA DEPÓSITO";
                    //    return k;

                    //}).ToList();
                    //#endregion
                    //#region DepositoAnuladas

                    ////List<CuadreCajaModeloAlternativo> CA = new List<CuadreCajaModeloAlternativo>();
                    //CA = VentasAnuladas.Select(item => (CuadreCajaModeloAlternativo)item.Clone()).ToList();
                    //var AnuladasDeposito = CA.Where(l => l.FormasPago.Contains("DEP")).Select(p =>
                    //{
                    //    var k = p;
                    //    k.TotalGrupoLlave = "TOTAL DOCUMENTO DE VENTA DEPÓSITO DEL DIA :";
                    //    k.GrupoLLave = "3.-DOCUMENTOS DE VENTA DEPÓSITO";
                    //    return k;
                    //}).ToList();


                    //VentasDeposito = VentasDeposito.Concat(VentasDepositoOtrosDias).ToList()
                    //        .GroupBy(l => new { l.IdVenta, l.IdCobranza })
                    //        .Select(group => group.Last())
                    //        .ToList().ToList().Concat(AnuladasDeposito).ToList();


                    //if (!VentasDeposito.Any())
                    //{
                    //    CuadreCajaModeloAlternativo objReporteVentaDep = new CuadreCajaModeloAlternativo();
                    //    objReporteVentaDep.GrupoLLave = "3.-DOCUMENTOS DE VENTA DEPÓSITO";
                    //    objReporteVentaDep.Cliente = "**SIN OPERACIONES**";
                    //    VentasDeposito.Add(objReporteVentaDep);
                    //}
                    //#endregion


                    //#region Compras


                    //Compras =
                    //(
                    //    from A in dbContext.pagopendiente

                    //    join B in dbContext.compra on new { IdCompra = A.v_IdCompra, eliminado = 0 } equals
                    //    new { IdCompra = B.v_IdCompra, eliminado = B.i_Eliminado.Value } into B_join
                    //    from B in B_join.DefaultIfEmpty()

                    //    join C in dbContext.pagodetalle on new { PagoDetalle = B.v_IdCompra, eliminado = 0 } equals
                    //    new { PagoDetalle = C.v_IdCompra, eliminado = C.i_Eliminado.Value } into C_join
                    //    from C in C_join.DefaultIfEmpty()

                    //    join D in dbContext.pago on new { Pago = C.v_IdPago, eliminado = 0 } equals
                    //    new { Pago = D.v_IdPago, eliminado = D.i_Eliminado.Value } into D_join
                    //    from D in D_join.DefaultIfEmpty()


                    //    join E in dbContext.cliente on new { IdProveedor = B.v_IdProveedor, eliminado = 0 } equals
                    //    new { IdProveedor = E.v_IdCliente, eliminado = E.i_Eliminado.Value } into E_join
                    //    from E in E_join.DefaultIfEmpty()
                    //    join F in dbContext.documento on
                    //    new { IdTipoDocumento = B.i_IdTipoDocumento.Value, eliminado = 0 } equals
                    //    new { IdTipoDocumento = F.i_CodigoDocumento, eliminado = F.i_Eliminado.Value } into F_join
                    //    from F in F_join.DefaultIfEmpty()

                    //    join H in dbContext.documento on new { TipoDoc = B.i_IdTipoDocumento.Value, eliminado = 0 } equals
                    //    new { TipoDoc = H.i_CodigoDocumento, eliminado = H.i_Eliminado.Value } into H_join
                    //    from H in H_join.DefaultIfEmpty()
                    //    join I in dbContext.datahierarchy on
                    //    new { IdMoneda = B.i_IdMoneda.Value, eliminado = 0, Grupo = 18 } equals
                    //    new { IdMoneda = I.i_ItemId, eliminado = I.i_IsDeleted.Value, Grupo = I.i_GroupId } into I_join
                    //    from I in I_join.DefaultIfEmpty()

                    //    join J in dbContext.datahierarchy on new { Igv = B.i_IdIgv.Value, eliminado = 0, Grupo = 27 }
                    //    equals new { Igv = J.i_ItemId, eliminado = J.i_IsDeleted.Value, Grupo = J.i_GroupId } into J_join
                    //    from J in J_join.DefaultIfEmpty()

                    //    join K in dbContext.datahierarchy on
                    //    new { CondicionPago = B.i_IdCondicionPago.Value, eliminado = 0, Grupo = 23 } equals
                    //    new { CondicionPago = K.i_ItemId, eliminado = K.i_IsDeleted.Value, Grupo = K.i_GroupId } into
                    //    K_join

                    //    from K in K_join.DefaultIfEmpty()

                    //    join M in dbContext.vendedor on new { Vendedor = B.i_InsertaIdUsuario.Value, eliminado = 0 }
                    //    equals new { Vendedor = M.i_SystemUser.Value, eliminado = M.i_Eliminado.Value } into M_join
                    //    from M in M_join.DefaultIfEmpty()

                    //    join N in dbContext.compradetalle on new { cd = B.v_IdCompra, eliminado = 0 } equals
                    //    new { cd = N.v_IdCompra, eliminado = N.i_Eliminado.Value } into N_join
                    //    from N in N_join.DefaultIfEmpty()


                    //    join O in dbContext.documento on new { docCobranza = D.i_IdTipoDocumento.Value, eliminado = 0 }
                    //    equals new { docCobranza = O.i_CodigoDocumento, eliminado = O.i_Eliminado.Value } into O_join
                    //    from O in O_join.DefaultIfEmpty()

                    //    join P in dbContext.datahierarchy on
                    //    new { FormasPagoCobranzaDetalle = C.i_IdFormaPago.Value, Grupo = 46, eliminado = 0, } equals
                    //    new
                    //    {
                    //        FormasPagoCobranzaDetalle = P.i_ItemId,
                    //        Grupo = P.i_GroupId,
                    //        eliminado = P.i_IsDeleted.Value
                    //    } into P_join
                    //    from P in P_join.DefaultIfEmpty()
                    //    where

                    //    (B.t_FechaRegistro >= pstrt_FechaRegistroIni
                    //     && B.t_FechaRegistro <= pstrt_FechaRegistroFin)
                    //    && (B.i_IdTipoDocumento == pintTipoDocumentoId || pintTipoDocumentoId == -1)
                    //    && B.i_IdEstablecimiento == pstri_IdEstablecimiento
                    //    && N.i_IdAlmacen == Almacen && A.i_Eliminado == 0

                    //    select new
                    //    {
                    //        FechaRegistro = B.t_FechaRegistro,
                    //        IdTipoDocumento = B.i_IdTipoDocumento,
                    //        NumeroDocumento = B.v_SerieDocumento + " " + B.v_CorrelativoDocumento,
                    //        Cliente =
                    //        B.i_IdEstado == 0
                    //            ? "** A N U L A D O **"
                    //            : (E.v_ApePaterno + " " + E.v_ApeMaterno + " " + " " + E.v_PrimerNombre + " " +
                    //               E.v_RazonSocial).Trim(),
                    //        NroDocCliente = E.v_NroDocIdentificacion,
                    //        CondicionPago = K.v_Value1,
                    //        IdUsuario = B.i_InsertaIdUsuario.Value,
                    //        //Total = B.i_IdEstado == 0 ? 0 : MonedaReporte == B.i_IdMoneda ? B.d_Total : B.i_IdMoneda == (int)Currency.Soles ? B.d_Total / B.d_TipoCambio : B.d_Total * B.d_TipoCambio,
                    //        Total = B.i_IdEstado == 0 ? 0 : B.d_Total,
                    //        Moneda =
                    //        B.i_IdMoneda == (int)Currency.Soles
                    //            ? "S"
                    //            : B.i_IdMoneda == (int)Currency.Dolares ? "D" : "",
                    //        GrupoLlave = "4.-DOCUMENTOS DE COMPRA REGISTRADOS",
                    //        TipoDocumento = H.v_Siglas,
                    //        GrupoLlave2 = "",
                    //        //TotalOperaciones = B.i_IdEstado == 0 ? 0 : B.t_FechaRegistro >= pstrt_FechaRegistroIni && B.t_FechaRegistro <= pstrt_FechaRegistroFin ? (H.i_UsadoDocumentoInverso != null && H.i_UsadoDocumentoInverso == 1) ? MonedaReporte == B.i_IdMoneda ? B.d_Total * -1 : B.i_IdMoneda == (int)Currency.Soles ? (B.d_Total / B.d_TipoCambio) * -1 : (B.d_Total * B.d_TipoCambio) * -1 : MonedaReporte == B.i_IdMoneda ? B.d_Total : B.i_IdMoneda == (int)Currency.Soles ? B.d_Total / B.d_TipoCambio : B.d_Total * B.d_TipoCambio : 0,
                    //        TotalOperaciones =
                    //        B.i_IdEstado == 0
                    //            ? 0
                    //            : B.t_FechaRegistro >= pstrt_FechaRegistroIni &&
                    //              B.t_FechaRegistro <= pstrt_FechaRegistroFin
                    //                ? (H.i_UsadoDocumentoInverso != null && H.i_UsadoDocumentoInverso == 1)
                    //                    ? B.d_Total * -1
                    //                    : B.d_Total
                    //                : 0,
                    //        NombreDocumento = "",
                    //        TotalDocumento = "TOTAL " + H.v_Nombre + " DEL DIA : ",
                    //        Vendedor = M == null ? "" : M.v_NombreCompleto,
                    //        TotalGrupoLLave = "TOTAL DOCUMENTO DE COMPRA REGISTRADOS DEL DIA : ",
                    //        // MontoCobrado = D == null ? 0 : MonedaReporte == D.i_IdMoneda ? C.d_ImporteSoles : D.i_IdMoneda == (int)Currency.Soles ? C.d_ImporteSoles / D.d_TipoCambio : C.d_ImporteSoles * D.d_TipoCambio,
                    //        MontoCobrado = D == null ? 0 : C.d_ImporteSoles,
                    //        DocumentoCobranza = N == null ? "" : O.v_Siglas + " " + D.v_Mes + " " + D.v_Correlativo,
                    //        FormasPago = O == null ? "" : P.v_Value1,
                    //        MonedaCobranza = D.i_IdMoneda == (int)Currency.Soles ? "S" : "D",
                    //        //Deuda = B.i_IdEstado == 0 ? 0 : D == null ? B.i_IdMoneda == MonedaReporte ? A.d_Saldo : B.i_IdMoneda == (int)Currency.Soles ? A.d_Saldo / B.d_TipoCambio : A.d_Saldo * B.d_TipoCambio : D.i_IdMoneda == MonedaReporte ? C.d_NetoXCobrar - C.d_ImporteSoles : D.i_IdMoneda == (int)Currency.Soles ? (C.d_NetoXCobrar - C.d_ImporteSoles) / D.d_TipoCambio : (C.d_NetoXCobrar - C.d_ImporteSoles) * D.d_TipoCambio,
                    //        Deuda = B.i_IdEstado == 0 ? 0 : D == null ? A.d_Saldo : C.d_NetoXCobrar - C.d_ImporteSoles,
                    //        DFechaPago = D == null ? null : D.i_IdEstado == 1 ? D.t_FechaRegistro : null,
                    //        IdVenta = B.v_IdCompra,
                    //        IdCobranza = D.v_IdPago,
                    //        GrupoMoneda =
                    //        D == null || D.i_IdEstado == 0
                    //            ? B.i_IdMoneda == (int)Currency.Soles
                    //                ? "MONEDA COBRANZA : " + "SOLES"
                    //                : "MONEDA COBRANZA : " + "DOLARES"
                    //            : D.i_IdMoneda == (int)Currency.Soles
                    //                ? "MONEDA COBRANZA : " + "SOLES"
                    //                : "MONEDA COBRANZA : " + "DOLARES",
                    //    }).Distinct().ToList().Select(l => new CuadreCajaModeloAlternativo

                    //    {
                    //        Fecha = l.FechaRegistro.Value.ToShortDateString(),
                    //        IdTipoDocumento = l.IdTipoDocumento.Value,
                    //        NumeroDocumento = l.NumeroDocumento,
                    //        Cliente = l.Cliente,
                    //        NroDocCliente = l.NroDocCliente,
                    //        CondicionPago = l.CondicionPago,
                    //        Vendedor = l.Vendedor,
                    //        Total = l.Total.Value,
                    //        Moneda = l.Moneda,
                    //        GrupoLLave = l.GrupoLlave.ToString(),
                    //        TipoDocumento = l.TipoDocumento,
                    //        GrupoLlave2 = l.GrupoLlave2.ToString(),
                    //        NombreDocumento = l.NombreDocumento,
                    //        TotalDocumento = l.TotalDocumento,
                    //        TotalOperacion = l.TotalOperaciones.Value,
                    //        TotalGrupoLlave = l.TotalGrupoLLave,
                    //        MontoCobrado = l.MontoCobrado.Value,
                    //        DocumentoCobranza = l.DocumentoCobranza,
                    //        FormasPago = l.FormasPago,
                    //        Deuda = l.Deuda.Value,
                    //        MonedaCobranza = l.MonedaCobranza,
                    //        FechaPago = l.DFechaPago != null ? l.DFechaPago.Value.ToShortDateString() : "",
                    //        IdVenta = l.IdVenta,
                    //        IdCobranza = l.IdCobranza,
                    //        GrupoMoneda = l.GrupoMoneda,
                    //    }
                    //).ToList().GroupBy(l => new { l.IdVenta, l.IdCobranza }).Select(group => group.Last()).ToList();



                    //var ComprasOtrosDias =
                    //(
                    //    from A in dbContext.pagopendiente

                    //    join B in dbContext.compra on new { IdCompra = A.v_IdCompra, eliminado = 0 } equals
                    //    new { IdCompra = B.v_IdCompra, eliminado = B.i_Eliminado.Value } into B_join
                    //    from B in B_join.DefaultIfEmpty()

                    //    join C in dbContext.pagodetalle on new { PagoDetalle = B.v_IdCompra, eliminado = 0 } equals
                    //    new { PagoDetalle = C.v_IdCompra, eliminado = C.i_Eliminado.Value } into C_join
                    //    from C in C_join.DefaultIfEmpty()

                    //    join D in dbContext.pago on new { Pago = C.v_IdPago, eliminado = 0 } equals
                    //    new { Pago = D.v_IdPago, eliminado = D.i_Eliminado.Value } into D_join
                    //    from D in D_join.DefaultIfEmpty()


                    //    join E in dbContext.cliente on new { IdProveedor = B.v_IdProveedor, eliminado = 0 } equals
                    //    new { IdProveedor = E.v_IdCliente, eliminado = E.i_Eliminado.Value } into E_join
                    //    from E in E_join.DefaultIfEmpty()
                    //    join F in dbContext.documento on
                    //    new { IdTipoDocumento = B.i_IdTipoDocumento.Value, eliminado = 0 } equals
                    //    new { IdTipoDocumento = F.i_CodigoDocumento, eliminado = F.i_Eliminado.Value } into F_join
                    //    from F in F_join.DefaultIfEmpty()

                    //    join H in dbContext.documento on new { TipoDoc = B.i_IdTipoDocumento.Value, eliminado = 0 } equals
                    //    new { TipoDoc = H.i_CodigoDocumento, eliminado = H.i_Eliminado.Value } into H_join
                    //    from H in H_join.DefaultIfEmpty()
                    //    join I in dbContext.datahierarchy on
                    //    new { IdMoneda = B.i_IdMoneda.Value, eliminado = 0, Grupo = 18 } equals
                    //    new { IdMoneda = I.i_ItemId, eliminado = I.i_IsDeleted.Value, Grupo = I.i_GroupId } into I_join
                    //    from I in I_join.DefaultIfEmpty()

                    //    join J in dbContext.datahierarchy on new { Igv = B.i_IdIgv.Value, eliminado = 0, Grupo = 27 }
                    //    equals new { Igv = J.i_ItemId, eliminado = J.i_IsDeleted.Value, Grupo = J.i_GroupId } into J_join
                    //    from J in J_join.DefaultIfEmpty()

                    //    join K in dbContext.datahierarchy on
                    //    new { CondicionPago = B.i_IdCondicionPago.Value, eliminado = 0, Grupo = 23 } equals
                    //    new { CondicionPago = K.i_ItemId, eliminado = K.i_IsDeleted.Value, Grupo = K.i_GroupId } into
                    //    K_join

                    //    from K in K_join.DefaultIfEmpty()

                    //    join M in dbContext.vendedor on new { Vendedor = B.i_InsertaIdUsuario.Value, eliminado = 0 }
                    //    equals new { Vendedor = M.i_SystemUser.Value, eliminado = M.i_Eliminado.Value } into M_join
                    //    from M in M_join.DefaultIfEmpty()

                    //    join N in dbContext.compradetalle on new { cd = B.v_IdCompra, eliminado = 0 } equals
                    //    new { cd = N.v_IdCompra, eliminado = N.i_Eliminado.Value } into N_join
                    //    from N in N_join.DefaultIfEmpty()


                    //    join O in dbContext.documento on new { docCobranza = D.i_IdTipoDocumento.Value, eliminado = 0 }
                    //    equals new { docCobranza = O.i_CodigoDocumento, eliminado = O.i_Eliminado.Value } into O_join
                    //    from O in O_join.DefaultIfEmpty()

                    //    join P in dbContext.datahierarchy on
                    //    new { FormasPagoCobranzaDetalle = C.i_IdFormaPago.Value, Grupo = 46, eliminado = 0, } equals
                    //    new
                    //    {
                    //        FormasPagoCobranzaDetalle = P.i_ItemId,
                    //        Grupo = P.i_GroupId,
                    //        eliminado = P.i_IsDeleted.Value
                    //    } into P_join
                    //    from P in P_join.DefaultIfEmpty()
                    //    where

                    //    (D.t_FechaRegistro >= pstrt_FechaRegistroIni
                    //     && D.t_FechaRegistro <= pstrt_FechaRegistroFin)
                    //    && (B.i_IdTipoDocumento == pintTipoDocumentoId || pintTipoDocumentoId == -1)
                    //    && B.i_IdEstablecimiento == pstri_IdEstablecimiento
                    //    && N.i_IdAlmacen == Almacen && A.i_Eliminado == 0
                    //    && D != null && D.i_IdEstado == 1
                    //    && B.t_FechaRegistro != D.t_FechaRegistro
                    //    // && N.v_IdProductoDetalle != null
                    //    select new
                    //    {
                    //        FechaRegistro = B.t_FechaRegistro,
                    //        IdTipoDocumento = B.i_IdTipoDocumento,
                    //        NumeroDocumento = B.v_SerieDocumento + " " + B.v_CorrelativoDocumento,
                    //        Cliente =
                    //        B.i_IdEstado == 0
                    //            ? "** A N U L A D O **"
                    //            : (E.v_ApePaterno + " " + E.v_ApeMaterno + " " + " " + E.v_PrimerNombre + " " +
                    //               E.v_RazonSocial).Trim(),
                    //        NroDocCliente = E.v_NroDocIdentificacion,
                    //        CondicionPago = K.v_Value1,
                    //        IdUsuario = B.i_InsertaIdUsuario.Value,
                    //        Total = B.i_IdEstado == 0 ? 0 : B.d_Total,
                    //        Moneda =
                    //        B.i_IdMoneda == (int)Currency.Soles
                    //            ? "S"
                    //            : B.i_IdMoneda == (int)Currency.Dolares ? "D" : "",
                    //        GrupoLlave = "4.-DOCUMENTOS DE COMPRA REGISTRADOS",
                    //        TipoDocumento = H.v_Siglas,
                    //        GrupoLlave2 = "",

                    //        //TotalOperaciones = B.i_IdEstado == 0 ? 0 : B.t_FechaRegistro >= pstrt_FechaRegistroIni && B.t_FechaRegistro <= pstrt_FechaRegistroFin ? (H.i_UsadoDocumentoInverso != null && H.i_UsadoDocumentoInverso == 1) ? MonedaReporte == B.i_IdMoneda ? B.d_Total * -1 : B.i_IdMoneda == (int)Currency.Soles ? (B.d_Total / B.d_TipoCambio) * -1 : (B.d_Total * B.d_TipoCambio) * -1 : MonedaReporte == B.i_IdMoneda ? B.d_Total : B.i_IdMoneda == (int)Currency.Soles ? B.d_Total / B.d_TipoCambio : B.d_Total * B.d_TipoCambio : 0,
                    //        TotalOperaciones =
                    //        B.i_IdEstado == 0
                    //            ? 0
                    //            : B.t_FechaRegistro >= pstrt_FechaRegistroIni &&
                    //              B.t_FechaRegistro <= pstrt_FechaRegistroFin
                    //                ? (H.i_UsadoDocumentoInverso != null && H.i_UsadoDocumentoInverso == 1)
                    //                    ? B.d_Total * -1
                    //                    : B.d_Total
                    //                : 0,
                    //        NombreDocumento = "",
                    //        TotalDocumento = "TOTAL " + H.v_Nombre + " DEL DIA : ",
                    //        Vendedor = M == null ? "" : M.v_NombreCompleto,
                    //        TotalGrupoLLave = "TOTAL DOCUMENTO DE COMPRA REGISTRADOS DEL DIA : ",
                    //        MontoCobrado = D == null ? 0 : C.d_ImporteSoles,
                    //        DocumentoCobranza = N == null ? "" : O.v_Siglas + " " + D.v_Mes + " " + D.v_Correlativo,
                    //        FormasPago = O == null ? "" : P.v_Value1,
                    //        MonedaCobranza = D.i_IdMoneda == (int)Currency.Soles ? "S" : "D",
                    //        Deuda = B.i_IdEstado == 0 ? 0 : D == null ? A.d_Saldo : C.d_NetoXCobrar - C.d_ImporteSoles,
                    //        DFechaPago = D == null ? null : D.i_IdEstado == 1 ? D.t_FechaRegistro : null,
                    //        IdVenta = B.v_IdCompra,
                    //        IdCobranza = D.v_IdPago,
                    //        GrupoMoneda =
                    //        D == null || D.i_IdEstado == 0
                    //            ? B.i_IdMoneda == (int)Currency.Soles
                    //                ? "MONEDA COBRANZA : " + "SOLES"
                    //                : "MONEDA COBRANZA : " + "DOLARES"
                    //            : D.i_IdMoneda == (int)Currency.Soles
                    //                ? "MONEDA COBRANZA : " + "SOLES"
                    //                : "MONEDA COBRANZA : " + "DOLARES",
                    //    }).Distinct().ToList().Select(l => new CuadreCajaModeloAlternativo

                    //    {
                    //        Fecha = l.FechaRegistro.Value.ToShortDateString(),
                    //        IdTipoDocumento = l.IdTipoDocumento.Value,
                    //        NumeroDocumento = l.NumeroDocumento,
                    //        Cliente = l.Cliente,
                    //        NroDocCliente = l.NroDocCliente,
                    //        CondicionPago = l.CondicionPago,
                    //        Vendedor = l.Vendedor,
                    //        Total = l.Total.Value,
                    //        Moneda = l.Moneda,
                    //        GrupoLLave = l.GrupoLlave.ToString(),
                    //        TipoDocumento = l.TipoDocumento,
                    //        GrupoLlave2 = l.GrupoLlave2.ToString(),
                    //        NombreDocumento = l.NombreDocumento,
                    //        TotalDocumento = l.TotalDocumento,
                    //        TotalOperacion = l.TotalOperaciones.Value,
                    //        TotalGrupoLlave = l.TotalGrupoLLave,
                    //        MontoCobrado = l.MontoCobrado.Value,
                    //        DocumentoCobranza = l.DocumentoCobranza,
                    //        FormasPago = l.FormasPago,
                    //        Deuda = l.Deuda.Value,
                    //        MonedaCobranza = l.MonedaCobranza,
                    //        FechaPago = l.DFechaPago != null ? l.DFechaPago.Value.ToShortDateString() : "",
                    //        IdVenta = l.IdVenta,
                    //        IdCobranza = l.IdCobranza,
                    //        GrupoMoneda = l.GrupoMoneda,
                    //    }
                    //).ToList().GroupBy(l => new { l.IdVenta, l.IdCobranza }).Select(group => group.Last()).ToList();


                    //if (!Compras.Any())
                    //{
                    //    CuadreCajaModeloAlternativo objReporteCompras = new CuadreCajaModeloAlternativo();
                    //    objReporteCompras.GrupoLLave = "4.-DOCUMENTOS DE COMPRA REGISTRADOS";
                    //    objReporteCompras.Cliente = "**SIN OPERACIONES**";
                    //    Compras.Add(objReporteCompras);

                    //}

                    //#endregion

                    //var result = Ventas.Concat(VentasCredito).Concat(VentasDeposito).Concat(Compras).AsQueryable().OrderBy(pstrt_Orden).ToList();
                    //var vendedor = Globals.ClientSession.v_IdVendedor == "N001-VE000000008" ? "CAJA 02" : "CAJA 01";
                    //if (rolId != 16)
                    //    result = result.FindAll(p => p.Vendedor == vendedor).ToList();

                    //return result;

                    return null;
                    #endregion
                }
            }
            catch (Exception ex)
            {

                objOperationResult.Success = 0;
                objOperationResult.AdditionalInformation = "VentaBL.ReporteCuadreCajaModelo1()";
                objOperationResult.ErrorMessage = ex.Message;
                objOperationResult.ExceptionMessage = ex.InnerException != null ? ex.InnerException.Message : string.Empty;
                Utils.ExceptionToLog(Globals.ClientSession.i_SystemUserId, objOperationResult);
                return null;
            }
        }

        public decimal CalcularImporteDeAcuerdoMoneda(decimal TipoCambio, decimal Total, int MonedaOperacion, int MonedaReporte)
        {
            decimal TotalCalculado = 0;
            TotalCalculado = MonedaReporte == MonedaOperacion ? Total : MonedaOperacion == (int)Currency.Soles ? Total / TipoCambio : Total * TipoCambio;
            return TotalCalculado;

        }

        #endregion

        #region KeyValuesDTOs

        public List<GridKeyValueDTO> ObtenRubrosParaComboGridVenta(ref OperationResult pobjOperationResult,
            string pstrSortExpression)
        {
            try
            {
                using (var dbContext = new SAMBHSEntitiesModelWin())
                {
                    var consulta =
                        dbContext.linea.Where(p => p.i_Eliminado == 0 && !string.IsNullOrEmpty(p.v_NroCuentaVenta)).ToList()
                        .Select(l => new GridKeyValueDTO
                        {
                            Id = l.v_NroCuentaVenta,
                            Value1 = l.v_Nombre
                        }).ToList();

                    return consulta.Any() ? consulta : new List<GridKeyValueDTO>();
                }
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = ex.Message;
                return null;
            }
        }
        #endregion

        #region QuerysCompilados
        public static Func<SAMBHSEntitiesModelWin, string, IQueryable<CompiladoResult>>
                        DevuelveNombresVenta = CompiledQuery.Compile((SAMBHSEntitiesModelWin db, string ID) =>
                        from n in db.ventadetalle
                        join A in db.productodetalle on n.v_IdProductoDetalle equals A.v_IdProductoDetalle into A_join
                        from A in A_join.DefaultIfEmpty()

                        join B in db.producto on A.v_IdProducto equals B.v_IdProducto into B_join
                        from B in B_join.DefaultIfEmpty()

                        join C in db.asientocontable on n.v_NroCuenta equals C.v_NroCuenta into C_join
                        from C in C_join.DefaultIfEmpty()

                        //join D in db.almacen on n.i_IdAlmacen equals D.i_IdAlmacen

                        join J1 in db.datahierarchy on new { a = B.i_IdUnidadMedida.Value, b = 17 }
                                                           equals new { a = J1.i_ItemId, b = J1.i_GroupId } into J1_join
                        from J1 in J1_join.DefaultIfEmpty()

                        where n.v_IdVenta == ID && n.i_Eliminado == 0

                        select new CompiladoResult
                        {
                            CodigoInterno = B.v_CodInterno,
                            Empaque = B.d_Empaque,
                            UMEmpaque = J1.v_Value1,
                            i_EsServicio = B.i_EsServicio,
                            i_EsAfectoDetraccion = B.i_EsAfectoDetraccion,
                            i_EsNombreEditable = B.i_NombreEditable,
                            NombreCuenta = C != null ? C.v_NombreCuenta : string.Empty,
                            i_EsAfectoPercepcion = B.i_EsAfectoPercepcion,
                            d_TasaPercepcion = B.d_TasaPercepcion,
                            i_IdUnidadMedida = B.i_IdUnidadMedida
                        }
                        );
        #endregion

        #region Monitoreo De Ventas
        public List<MonitoreoVentasDto> ListarMonitoreoVentas(ref OperationResult objOperationResult, DateTime F_Ini, DateTime F_Fin, string FilterExpression)
        {
            try
            {
                using (var dbContext = new SAMBHSEntitiesModelWin())
                {
                    F_Ini = F_Ini.Date;

                    var Result = (from n in dbContext.venta

                                  join J1 in dbContext.establecimiento on n.i_IdEstablecimiento equals J1.i_IdEstablecimiento into J1_join
                                  from J1 in J1_join.DefaultIfEmpty()

                                  join J2 in dbContext.vendedor on n.v_IdVendedor equals J2.v_IdVendedor into J2_join
                                  from J2 in J2_join.DefaultIfEmpty()

                                  join J3 in dbContext.cobranzapendiente on new { strIdVenta = n.v_IdVenta, Eliminado = 0 }
                                                                            equals new { strIdVenta = J3.v_IdVenta, Eliminado = J3.i_Eliminado.Value } into J3_join
                                  from J3 in J3_join.DefaultIfEmpty()

                                  join J4 in dbContext.documento on n.i_IdTipoDocumento equals J4.i_CodigoDocumento into J4_join
                                  from J4 in J4_join.DefaultIfEmpty()

                                  where n.t_FechaRegistro >= F_Ini && n.t_FechaRegistro <= F_Fin && n.i_IdEstado == 1 && n.i_Eliminado == 0
                                  select new MonitoreoVentasDto
                                  {
                                      Almacen = J1.v_Nombre,
                                      Vendedor = J2.v_NombreCompleto,
                                      Condicion = J3.d_Saldo == n.d_Total ? "PENDIENTE" : "CANCELADO",
                                      Documento = J4.v_Siglas,
                                      Correlativo = n.v_CorrelativoDocumento,
                                      Serie = n.v_SerieDocumento,
                                      Fecha = n.t_InsertaFecha,
                                      Impresion = "",
                                      Moneda = n.i_IdMoneda == 1 ? "S" : "D",
                                      TipoCambio = n.d_TipoCambio ?? 0M,
                                      Total = n.d_Total,
                                      v_IdVenta = n.v_IdVenta,
                                      i_IdEstablecimiento = J1.i_IdEstablecimiento,
                                      v_IdVendedor = J2.v_IdVendedor
                                  }
                                  );

                    if (Result != null)
                    {
                        if (!string.IsNullOrEmpty(FilterExpression))
                        {
                            Result = Result.Where(FilterExpression);
                        }

                        objOperationResult.Success = 1;
                        return Result.ToList();
                    }
                    else
                    {
                        return null;
                    }
                }
            }
            catch (Exception ex)
            {
                objOperationResult.Success = 0;
                objOperationResult.AdditionalInformation = "VentaBL.ListarMonitoreoVentas()\nLinea:" + ex.StackTrace.Substring(ex.StackTrace.LastIndexOf(' '));
                objOperationResult.ErrorMessage = ex.Message;
                objOperationResult.ExceptionMessage = ex.InnerException != null ? ex.InnerException.Message : string.Empty;
                return null;
            }
        }
        #endregion

        #region Requerimientos Notaria Becerra

        public BindingList<nbs_ventakardexDto> ObtenerDetalleKardex(ref  OperationResult objOperationResult, string IdVenta)
        {
            try
            {
                using (SAMBHSEntitiesModelWin dbContext = new SAMBHSEntitiesModelWin())
                {


                    var detalleKardex = (from a in dbContext.nbs_ventakardex

                                         where a.i_Eliminado == 0 && a.v_IdVenta == IdVenta

                                         select a).ToList();


                    var dkDto = nbs_ventakardexAssembler.ToDTOs(detalleKardex);
                    var query = new BindingList<nbs_ventakardexDto>(dkDto);

                    objOperationResult.Success = 1;
                    return query;



                }
            }
            catch (Exception ex)
            {

                objOperationResult.Success = 0;
                return null;
            }



        }


        #endregion

        #region Consulta requerida por chayna

        public object ObtenerVentasConDetraccion(out int cantidad)
        {
            try
            {
                using (var dbContext = new SAMBHSEntitiesModelWin())
                {
                    var consulta = (from n in dbContext.venta

                                    join J1 in dbContext.ventadetalle on n.v_IdVenta equals J1.v_IdVenta into J1_join
                                    from J1 in J1_join.DefaultIfEmpty()

                                    join J2 in dbContext.productodetalle on J1.v_IdProductoDetalle equals J2.v_IdProductoDetalle
                                        into J2_join
                                    from J2 in J2_join.DefaultIfEmpty()

                                    join J3 in dbContext.producto on J2.v_IdProducto equals J3.v_IdProducto into J3_join
                                    from J3 in J3_join.DefaultIfEmpty()

                                    join J4 in dbContext.cliente on n.v_IdCliente equals J4.v_IdCliente into J4_join
                                    from J4 in J4_join.DefaultIfEmpty()

                                    where n.i_IdEstado == 1 && n.i_Eliminado == 0 && J3_join.Any(p => p.v_CodInterno.StartsWith("OTSE")) && n.d_Total > 700
                                    select new
                                    {
                                        Cliente = (J4.v_ApePaterno + " " + J4.v_ApeMaterno + " " + J4.v_PrimerNombre + " " + J4.v_RazonSocial).Trim(),
                                        Serie = n.v_SerieDocumento,
                                        Correlativo = n.v_CorrelativoDocumento,
                                        Fecha = n.t_FechaRegistro,
                                        MontoVenta = n.d_Total,
                                        RUC_DNI = J4.v_NroDocIdentificacion
                                    }
                                    ).Distinct().ToList();

                    cantidad = consulta.Count();
                    return consulta;
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        public object ObtenerMovimientosDeAnulados(out int cantidad)
        {
            cantidad = 0;
            try
            {
                using (var dbContext = new SAMBHSEntitiesModelWin())
                {
                    var query = (from n in dbContext.venta
                                 from J1 in dbContext.movimientodetalle.Where(p => p.i_IdTipoDocumento.Value == n.i_IdTipoDocumento
                                     && p.v_NumeroDocumento.Contains(n.v_CorrelativoDocumento) && p.i_Eliminado == 0)

                                 join J2 in dbContext.movimiento on J1.v_IdMovimiento equals J2.v_IdMovimiento into J2_join
                                 from J2 in J2_join.DefaultIfEmpty()

                                 where n.i_IdEstado == 0 && n.i_Eliminado == 0
                                 select new
                                 {
                                     tipoDocumentoVenta = n.i_IdTipoDocumento,
                                     nroVenta = n.v_SerieDocumento + "-" + n.v_CorrelativoDocumento,
                                     nroMovimiento = J2.v_Mes + "-" + J2.v_Correlativo,
                                     idMovimiento = J1.v_IdMovimiento
                                 })
                                 .Distinct()
                                 .OrderBy(o => o.nroMovimiento)
                                 .ToList();

                    cantidad = query.Count();
                    return query;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        public List<ArticulosPorRestaurar> ObtenerListaArticulosPorAnulados(List<string> listaIdMovimientos)
        {
            try
            {
                using (var dbContext = new SAMBHSEntitiesModelWin())
                {
                    var lista = new List<ArticulosPorRestaurar>();
                    foreach (var idMovimiento in listaIdMovimientos)
                    {
                        var articulos = (from n in dbContext.movimientodetalle
                                         join pd in dbContext.productodetalle on n.v_IdProductoDetalle equals pd.v_IdProductoDetalle
                                             into pd_join
                                         from pd in pd_join.DefaultIfEmpty()

                                         join p in dbContext.producto on pd.v_IdProducto equals p.v_IdProducto into p_join
                                         from p in p_join.DefaultIfEmpty()

                                         join m in dbContext.movimiento on n.v_IdMovimiento equals m.v_IdMovimiento into m_join
                                         from m in m_join.DefaultIfEmpty()

                                         where n.i_Eliminado == 0 && n.v_IdMovimiento.Equals(idMovimiento)
                                         select new ArticulosPorRestaurar
                                         {
                                             CodArticulo = p.v_CodInterno,
                                             IngresoPorDescartar = m.i_EsDevolucion == 1 ? n.d_Cantidad ?? 0 : 0M,
                                             SalidaPorDescartar = m.i_EsDevolucion == 0 ? n.d_Cantidad ?? 0 : 0M,
                                             NroMovimiento = m.v_Mes + "-" + m.v_Correlativo
                                         }
                            ).ToList();

                        lista.AddRange(articulos);
                    }

                    return lista.OrderBy(o => o.CodArticulo).ToList();
                }
            }
            catch
            {
                return null;
            }
        }

        public void EliminarNotasSalidaPorAnulados(ref OperationResult pobjOperationResult, List<string> listaMovimientos)
        {
            try
            {
                using (var ts = TransactionUtils.CreateTransactionScope())
                {
                    foreach (var idMovimiento in listaMovimientos)
                    {
                        new MovimientoBL().EliminarMovimiento(ref pobjOperationResult, idMovimiento, Globals.ClientSession.GetAsList());
                        if (pobjOperationResult.Success == 0) return;
                    }

                    ts.Complete();
                }
                pobjOperationResult.Success = 1;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.AdditionalInformation = "VentaBL.EliminarNotasSalidaPorAnulados()\nLinea:" +
                                                            ex.StackTrace.Substring(ex.StackTrace.LastIndexOf(' '));
                pobjOperationResult.ErrorMessage = ex.Message;
                pobjOperationResult.ExceptionMessage = ex.InnerException != null
                    ? ex.InnerException.Message
                    : string.Empty;
                Utils.ExceptionToLog(Globals.ClientSession.i_SystemUserId, pobjOperationResult);
            }
        }

        public class ArticulosPorRestaurar
        {
            public string CodArticulo { get; set; }
            public decimal SalidaPorDescartar { get; set; }
            public decimal IngresoPorDescartar { get; set; }
            public string NroMovimiento { get; set; }
        }

        #endregion

        #region Bandeja Comprobante Electronico
        public List<ventaDto> getBusquedaVentasElectronicas(ref OperationResult pobjOperationResult,
            string pstrSortExpression, string pstrFilterExpression, DateTime F_Ini, DateTime F_Fin)
        {
            try
            {

                using (var dbContext = new SAMBHSEntitiesModelWin())
                {
                    var query = (from n in dbContext.venta
                                 join A in dbContext.cliente on n.v_IdCliente equals A.v_IdCliente into A_join
                                 from A in A_join.DefaultIfEmpty()

                                 join J4 in dbContext.documento on n.i_IdTipoDocumento.Value equals J4.i_CodigoDocumento into J4_join
                                 from J4 in J4_join.DefaultIfEmpty()

                                 join J5 in dbContext.ventahomolagacion on n.v_IdVenta equals J5.v_IdVenta into J5_join
                                 from J5 in J5_join.DefaultIfEmpty()

                                 where
                                     n.i_Eliminado == 0 && n.t_FechaRegistro >= F_Ini && n.t_FechaRegistro <= F_Fin &&
                                     n.i_IdEstablecimiento == Globals.ClientSession.i_IdEstablecimiento.Value && J4.i_UsadoDocumentoContable == 1
                                 orderby n.t_InsertaFecha descending
                                 select new ventaDto
                                 {
                                     v_IdVenta = n.v_IdVenta,
                                     v_SerieDocumento = n.v_SerieDocumento,
                                     v_CorrelativoDocumento = n.v_CorrelativoDocumento,
                                     NroRegistro = n.v_Mes.Trim() + "-" + n.v_Correlativo,
                                     Documento = n.v_SerieDocumento + " - " + n.v_CorrelativoDocumento,
                                     i_IdTipoDocumento = n.i_IdTipoDocumento,
                                     TipoDocumento = J4.v_Siglas,
                                     t_FechaRegistro = n.t_FechaRegistro ?? null,
                                     v_IdCliente = n.v_IdCliente,
                                     CodigoCliente = A.v_CodCliente,
                                     CorreoCliente = A.v_Correo,
                                     NombreCliente =
                                         n.v_IdCliente != "N002-CL000000000"
                                             ? (A.v_ApePaterno + " " + A.v_ApeMaterno + " " + A.v_PrimerNombre + " " +
                                                A.v_RazonSocial).Trim()
                                             : n.v_NombreClienteTemporal,
                                     d_Total = n.d_Total,
                                     i_IdEstado = n.i_IdEstado,
                                     Moneda = n.i_IdMoneda == 1 ? "S" : "D",
                                     i_EstadoSunat = n.i_EstadoSunat,
                                     v_Ticket = J5.v_Ticket,
                                     i_Publish =  n.i_Publish
                                 }
                        );

                    if (!string.IsNullOrEmpty(pstrFilterExpression))
                    {
                        query = query.Where(pstrFilterExpression);
                    }
                    if (!string.IsNullOrEmpty(pstrSortExpression))
                    {
                        query = query.OrderBy(pstrSortExpression);
                    }

                    List<ventaDto> objData = query.ToList();
                    pobjOperationResult.Success = 1;
                    return objData;
                }
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        public ventahomolagacionDto ObtenerDatosHomologacion(ref OperationResult pobjOperationResult, string pstrIdVenta)
        {
            try
            {
                using (var dbContext = new SAMBHSEntitiesModelWin())
                {
                    var objHomologacion = (from n in dbContext.ventahomolagacion
                                           where n.v_IdVenta == pstrIdVenta
                                           select new ventahomolagacionDto
                                           {
                                               b_FileXml = n.b_FileXml,
                                               b_ResponseTicket = n.b_ResponseTicket,
                                               v_Ticket = n.v_Ticket
                                           }).FirstOrDefault();
                    pobjOperationResult.Success = 1;
                    return objHomologacion;
                }
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Utils.ExceptionFormatter(ex);
                return null;
            }
        }
        #endregion

        #region Almacén
        public static void GenerarSalidaAlmacen(ref OperationResult pobjOperationResult, string pstrIdVenta, string Correlativo, string Periodo, string Mes)
        {
            pobjOperationResult.Success = 1;
            try
            {
                using (var ts = TransactionUtils.CreateTransactionScope())
                {
                    using (var dbContext = new SAMBHSEntitiesModelWin())
                    {
                        var venta = dbContext.venta.FirstOrDefault(p => p.v_IdVenta.Equals(pstrIdVenta));

                        if (venta != null && venta.i_IdEstado != 0)
                        {
                            #region recopila los detalles de la venta

                            var ventaDetalles = (from p in dbContext.ventadetalle

                                                 join J1 in dbContext.productodetalle on p.v_IdProductoDetalle equals J1
                                                     .v_IdProductoDetalle
                                                 into J1_join
                                                 from J1 in J1_join.DefaultIfEmpty()

                                                 join J2 in dbContext.producto on J1.v_IdProducto equals J2.v_IdProducto into J2_join
                                                 from J2 in J2_join.DefaultIfEmpty()

                                                 where
                                                 p.i_Eliminado == 0 && p.v_IdProductoDetalle != null &&
                                                 !p.v_IdProductoDetalle.Trim().Equals("") && J2.i_EsServicio == 0
                                                 && p.v_IdVenta.Equals(pstrIdVenta)
                                                 select p).ToList();

                            #endregion

                            if (ventaDetalles.Any())
                            {
                                var listaMovimientos =
                                    new MovimientoBL().ObtenerListadoMovimientos(ref pobjOperationResult,
                                        venta.v_Periodo, venta.v_Mes, (int)TipoDeMovimiento.NotadeSalida);
                                int maxMovimiento = listaMovimientos.Any()
                                    ? int.Parse(listaMovimientos[listaMovimientos.Count - 1].Value1)
                                    : 0;
                                var ops = new int[] { 1, 2, 3, 5 };
                                var articulosExportacion = new string[]
                                {
                                    Globals.ClientSession.v_IdProductoDetalleFlete,
                                    Globals.ClientSession.v_IdProductoDetalleSeguro
                                };

                                foreach (var detalle in ventaDetalles
                                    .Where(f => !articulosExportacion.Contains(f.v_IdProductoDetalle))
                                        .GroupBy(p => p.i_IdAlmacen))
                                {
                                    var movimientoDto = new movimientoDto();
                                    maxMovimiento++;
                                    movimientoDto.d_TipoCambio = venta.d_TipoCambio;
                                    movimientoDto.i_IdAlmacenOrigen = detalle.Key;
                                    movimientoDto.i_IdMoneda = venta.i_IdMoneda;
                                    movimientoDto.i_IdTipoMotivo = ops.Contains(venta.i_IdTipoOperacion)
                                            ? venta.i_IdTipoDocumento.Value == 7
                                                ? 3
                                                : 1
                                            : venta.i_IdTipoOperacion == 4
                                                ? 22
                                                : 18;
                                    movimientoDto.i_IdDireccionCliente = venta.i_IdDireccionCliente ?? -1;
                                    movimientoDto.t_Fecha = venta.t_FechaRegistro;

                                    if (Globals.ClientSession.i_GenerarNotaSalidaDesdeVentaUltimoDiaMes == 1)
                                    {
                                        var FechaFinal = DateTime.Parse(DateTime.DaysInMonth(venta.t_FechaRegistro.Value.Year, venta.t_FechaRegistro.Value.Month) + "/" + venta.t_FechaRegistro.Value.Month.ToString() + "/" + venta.t_FechaRegistro.Value.Year.ToString());
                                        movimientoDto.t_Fecha = FechaFinal;
                                    }

                                    movimientoDto.v_Mes = !string.IsNullOrEmpty(Mes) ? Mes : venta.v_Mes.Trim();
                                    movimientoDto.v_Periodo = !string.IsNullOrEmpty(Periodo) ? Periodo : venta.v_Periodo.Trim();
                                    movimientoDto.i_IdTipoMovimiento = (int)TipoDeMovimiento.NotadeSalida;
                                    movimientoDto.v_Correlativo = !string.IsNullOrEmpty(Correlativo) ? Correlativo : maxMovimiento.ToString("00000000");
                                    movimientoDto.v_IdCliente = venta.v_IdCliente;
                                    movimientoDto.v_OrigenTipo = "V";
                                    movimientoDto.i_EsDevolucion = venta.i_IdTipoDocumento.Value == 7 ? 1 : 0;
                                    movimientoDto.v_OrigenRegCorrelativo = venta.v_Correlativo;
                                    movimientoDto.v_OrigenRegMes = venta.v_Mes;
                                    movimientoDto.v_OrigenRegPeriodo = venta.v_Periodo;
                                    movimientoDto.d_TotalPrecio = venta.d_Total;
                                    movimientoDto.i_IdEstablecimiento = venta.i_IdEstablecimiento ?? 1;
                                    movimientoDto.v_IdMovimientoOrigen = venta.v_IdVenta;

                                    var movimientosDetalleDto = detalle.ToList()
                                        .Select(d => new movimientodetalleDto
                                        {
                                            v_IdProductoDetalle = d.v_IdProductoDetalle,
                                            i_IdTipoDocumento = venta.i_IdTipoDocumento ?? -1,
                                            v_NumeroDocumento =
                                                string.Format("{0}-{1}", venta.v_SerieDocumento,
                                                    venta.v_CorrelativoDocumento),
                                            d_Cantidad = d.d_Cantidad ?? 0,
                                            i_IdUnidad = d.i_IdUnidadMedida ?? -1,
                                            d_CantidadEmpaque = d.d_CantidadEmpaque ?? 0,
                                            d_Precio = d.d_Precio ?? 0,
                                            d_Total = d.d_PrecioVenta,
                                            d_CantidadAdministrativa = d.d_Cantidad,
                                            d_CantidadEmpaqueAdministrativa = d.d_CantidadEmpaque,
                                            v_NroPedido = d.v_PedidoExportacion,
                                            i_IdCentroCosto = d.i_IdCentroCosto,
                                            t_FechaCaducidad =d.t_FechaCaducidad ,
                                            v_NroLote =d.v_NroLote ,
                                            v_NroSerie =d.v_NroSerie ,


                                        })
                                        .ToList();

                                    if (venta.i_IdMedioPagoVenta != -1)
                                    {
                                        var otrosTributosExportacion = new List<movimientodetalleDto>();
                                        foreach (var mov in detalle)
                                        {
                                            if (mov.d_FleteXProducto == 0 && mov.d_SeguroXProducto == 0) continue;

                                            var y = (from n in dbContext.productorecetasalida
                                                     join pd in dbContext.productodetalle on n.v_IdProductoTributo equals pd
                                                         .v_IdProductoDetalle into pdJoin
                                                     from pd in pdJoin.DefaultIfEmpty()
                                                     join p in dbContext.producto on pd.v_IdProducto equals p
                                                         .v_IdProducto into pJoin
                                                     from p in pJoin.DefaultIfEmpty()
                                                     join d in dbContext.datahierarchy on new
                                                     {
                                                         g = 166,
                                                         e = 0,
                                                         id = p.i_IdTipoTributo.Value
                                                     }
                                                     equals new
                                                     {
                                                         g = d.i_GroupId,
                                                         e = d.i_IsDeleted.Value,
                                                         id = d.i_ItemId
                                                     } into dJoin
                                                     from d in dJoin.DefaultIfEmpty()
                                                     where n.v_IdProductoExportacion.Equals(mov.v_IdProductoDetalle)
                                                     select new { itemId = d.i_ItemId, p, n }).AsEnumerable();

                                            var relacion = dbContext.relaciontributosexportacion
                                                .Where(
                                                    rr => rr.i_IdTipoPagoExportacion ==
                                                          venta.i_IdMedioPagoVenta.Value)
                                                .Select(r1 => r1.i_IdRecetaExportacion);

                                            var recetasAgregar = y.Where(yy => relacion.Contains(yy.itemId))
                                                .Select(xx => new movimientodetalleDto
                                                {
                                                    v_IdProductoDetalle = xx.n.v_IdProductoTributo,
                                                    i_IdTipoDocumento = venta.i_IdTipoDocumento ?? -1,
                                                    v_NumeroDocumento =
                                                        string.Format("{0}-{1}", venta.v_SerieDocumento,
                                                            venta.v_CorrelativoDocumento),
                                                    d_Cantidad = 1,
                                                    i_IdUnidad = 15,
                                                    d_CantidadEmpaque = 1,
                                                    d_Precio = xx.p.v_Descripcion.Contains("FLETE")
                                                        ? mov.d_FleteXProducto ?? 0
                                                        : mov.d_SeguroXProducto ?? 0,
                                                    d_Total = xx.p.v_Descripcion.Contains("FLETE")
                                                        ? mov.d_FleteXProducto ?? 0
                                                        : mov.d_SeguroXProducto ?? 0,
                                                    d_CantidadAdministrativa = 1,
                                                    d_CantidadEmpaqueAdministrativa = 1

                                                }).ToList();

                                            if (recetasAgregar != null)
                                                otrosTributosExportacion.AddRange(recetasAgregar);
                                        }

                                        movimientosDetalleDto.AddRange(otrosTributosExportacion);
                                    }

                                    movimientoDto.d_TotalCantidad = movimientosDetalleDto.Sum(p => p.d_Cantidad ?? 0);
                                    movimientoDto.d_TotalPrecio = movimientosDetalleDto.Sum(p => p.d_Total ?? 0);
                                    new MovimientoBL().InsertarMovimiento(ref pobjOperationResult, movimientoDto,
                                        Globals.ClientSession.GetAsList(), movimientosDetalleDto);
                                    if (pobjOperationResult.Success == 0) return;

                                }
                            }
                        }
                    }
                    ts.Complete();

                }
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.AdditionalInformation = "VentaBL.GenerarSalidaAlmacen()";
                pobjOperationResult.ErrorMessage = ex.Message;
                pobjOperationResult.ExceptionMessage = ex.InnerException != null
                    ? ex.InnerException.Message
                    : string.Empty;
                Utils.ExceptionToLog(Globals.ClientSession.i_SystemUserId, pobjOperationResult);
            }
        }

        private static void EliminarSalidaAlmacen(ref OperationResult pobjOperationResult, string pstrIdVenta)
        {
            pobjOperationResult.Success = 1;
            try
            {
                using (var ts = TransactionUtils.CreateTransactionScope())
                {
                    using (var dbContext = new SAMBHSEntitiesModelWin())
                    {
                        var movimientosRelacionado = dbContext.movimiento.Where(p => p.v_IdMovimientoOrigen.Equals(pstrIdVenta) && p.i_Eliminado == 0).ToList();

                        if (movimientosRelacionado.Any())
                        {
                            foreach (var movimientoRef in movimientosRelacionado)
                            {
                                new MovimientoBL().EliminarMovimiento(ref pobjOperationResult, movimientoRef.v_IdMovimiento, Globals.ClientSession.GetAsList());
                                if (pobjOperationResult.Success == 0) return;
                            }
                        }
                        ts.Complete();
                    }
                }
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.AdditionalInformation = "VentaBL.EliminarSalidaAlmacen()";
                pobjOperationResult.ErrorMessage = ex.Message;
                pobjOperationResult.ExceptionMessage = ex.InnerException != null ? ex.InnerException.Message : string.Empty;
                Utils.ExceptionToLog(Globals.ClientSession.i_SystemUserId, pobjOperationResult);
            }
        }




        private static void EliminarSalidaAlmacenyRegenerar(ref OperationResult pobjOperationResult, string pstrIdVenta)
        {
            pobjOperationResult.Success = 1;
            try
            {
                using (var ts = TransactionUtils.CreateTransactionScope())
                {
                    using (var dbContext = new SAMBHSEntitiesModelWin())
                    {
                        var movimientosRelacionado = dbContext.movimiento.Where(p => p.v_IdMovimientoOrigen.Equals(pstrIdVenta) && p.i_Eliminado == 0).ToList();

                        if (movimientosRelacionado.Any())
                        {
                            foreach (var movimientoRef in movimientosRelacionado)
                            {
                                new MovimientoBL().EliminarMovimiento(ref pobjOperationResult, movimientoRef.v_IdMovimiento, Globals.ClientSession.GetAsList());
                                if (pobjOperationResult.Success == 0) return;

                                GenerarSalidaAlmacen(ref pobjOperationResult, pstrIdVenta, movimientoRef.v_Correlativo.Trim(), movimientoRef.v_Periodo.Trim(), movimientoRef.v_Mes.Trim());
                                if (pobjOperationResult.Success == 0) return;

                            }
                        }
                        ts.Complete();
                    }
                }
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.AdditionalInformation = "VentaBL.EliminarSalidaAlmacen()";
                pobjOperationResult.ErrorMessage = ex.Message;
                pobjOperationResult.ExceptionMessage = ex.InnerException != null ? ex.InnerException.Message : string.Empty;
                Utils.ExceptionToLog(Globals.ClientSession.i_SystemUserId, pobjOperationResult);
            }
        }



        public static void RegenerarSalidasAlmacen(ref OperationResult pobjOperationResult, string pstrIdVenta)
        {
            pobjOperationResult.Success = 1;
            try
            {
                using (var ts = TransactionUtils.CreateTransactionScope())
                {
                    EliminarSalidaAlmacen(ref pobjOperationResult, pstrIdVenta);
                    if (pobjOperationResult.Success == 0) return;
                    GenerarSalidaAlmacen(ref pobjOperationResult, pstrIdVenta, "", "", "");
                    if (pobjOperationResult.Success == 0) return;
                    ts.Complete();
                }
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.AdditionalInformation = "VentaBL.RegenerarSalidasAlmacen()";
                pobjOperationResult.ErrorMessage = ex.Message;
                pobjOperationResult.ExceptionMessage = ex.InnerException != null ? ex.InnerException.Message : string.Empty;
                Utils.ExceptionToLog(Globals.ClientSession.i_SystemUserId, pobjOperationResult);
            }
        }
        #endregion

        #region Anticipo

        public List<ventaDto> GetVentasParaAnticipo(ref OperationResult result, DateTime init, DateTime end)
        {
            try
            {
                using (var context = new SAMBHSEntitiesModelWin())
                {
                    var ventas = from v in context.venta
                                 where v.i_EsAnticipo == 1 && v.i_Eliminado == 0
                                 && v.i_IdEstado == 1 && v.t_FechaRegistro >= init && v.t_FechaRegistro <= end
                                 select new ventaDto
                                 {
                                     v_IdVenta = v.v_IdVenta,
                                     v_SerieDocumento = v.v_SerieDocumento,
                                     v_CorrelativoDocumento = v.v_CorrelativoDocumento,
                                     i_IdTipoDocumento = v.i_IdTipoDocumento,
                                     t_FechaRegistro = v.t_FechaRegistro
                                 };

                    var list = ventas.ToList();
                    result.Success = 1;
                    return list;
                }
            }
            catch (Exception ex)
            {
                result.ExceptionMessage = ex.Message;
                result.AdditionalInformation = "DocumentoRetencionBL.ObtenerCabecera";
                return null;
            }
        }

        #endregion

        #region INGRESOS EGRESOS
        public List<Egresos_Ingresos> GetIngresosEgresos(ref OperationResult result, string serie, string correlativo)
        {
            try
            {
                using (var context = new SAMBHSEntitiesModelWin())
                {
                    var egreso_ingreso = from v in context.venta
                                         join c in context.cliente on v.v_IdCliente equals c.v_IdCliente
                                         join vd in context.ventadetalle on v.v_IdVenta equals vd.v_IdVenta
                                         where v.v_SerieDocumento == serie && v.v_CorrelativoDocumento == correlativo && v.i_Eliminado == 0
                                         select new Egresos_Ingresos
                                         {
                                             v_IdVenta = v.v_IdVenta,
                                             v_SerieDocumento = v.v_SerieDocumento,
                                             v_CorrelativoDocumento = v.v_CorrelativoDocumento,
                                             v_DireccionClienteTemporal = v.v_DireccionClienteTemporal,
                                             t_FechaRegistro = v.t_FechaRegistro,
                                             Precio = vd.d_PrecioVenta.Value,
                                             d_Total = v.d_Total.Value,
                                             Cliente = c.v_PrimerNombre + " " + c.v_SegundoNombre + " " + c.v_ApePaterno + " " + c.v_ApeMaterno,
                                             v_Concepto = v.v_Concepto,
                                             UsuarioCrea = v.i_InsertaIdUsuario,
                                             v_DescripcionProducto = vd.v_DescripcionProducto
                                         };

                    var list = egreso_ingreso.ToList();
                    result.Success = 1;
                    return list;
                }
            }
            catch (Exception ex)
            {
                result.Success = 0;
                return null;
            }
        }
        #endregion

        #region RECIBO SAN LORENZO
        public List<Recibo_San_Lorenzo> GetReciboSanLorenzo(ref OperationResult result, string serie, string correlativo)
        {
            try
            {
                using (var context = new SAMBHSEntitiesModelWin())
                {
                    var egreso_ingreso = from v in context.venta
                                         join c in context.cliente on v.v_IdCliente equals c.v_IdCliente
                                         join vd in context.ventadetalle on v.v_IdVenta equals vd.v_IdVenta
                                         where v.v_SerieDocumento == serie && v.v_CorrelativoDocumento == correlativo && v.i_Eliminado == 0
                                         select new Recibo_San_Lorenzo
                                         {
                                             v_IdVenta = v.v_IdVenta,
                                             v_SerieDocumento = v.v_SerieDocumento,
                                             v_CorrelativoDocumento = v.v_CorrelativoDocumento,
                                             v_DireccionClienteTemporal = v.v_DireccionClienteTemporal,
                                             t_FechaRegistro = v.t_InsertaFecha,
                                             d_IGV = v.d_IGV.Value,
                                             d_Total = v.d_Total.Value,
                                             Cliente = c.v_PrimerNombre + " " + c.v_SegundoNombre + " " + c.v_ApePaterno + " " + c.v_ApeMaterno,
                                             v_Concepto = v.v_Concepto,
                                             UsuarioCrea = v.i_InsertaIdUsuario,
                                             v_DescripcionProducto = vd.v_DescripcionProducto
                                         };

                    var list = egreso_ingreso.ToList();
                    result.Success = 1;
                    return list;
                }
            }
            catch (Exception ex)
            {
                result.Success = 0;
                return null;
            }
        }
        #endregion

        #region TICKET RECETA
        public List<Medicina_Tickets> TicketReceta(string comprobante)
        {

            try
            {
                ConexionSigesoft conectasam = new ConexionSigesoft();
                conectasam.opensigesoft();

                var query = "select s.v_ServiceId as 'Servicio', " +
                                " r.v_Comprobante as 'Comprobante',  " +
                                " per.v_FirstName + ' ' + per.v_FirstLastName + ' ' + per.v_SecondLastName as 'Paciente', " +
                                " per.v_DocNumber as 'DNI', " +
                                " per.v_OwnerName as 'Titular', " +
                                " prot.v_Name as 'Protocolo', " +
                                " orgn.v_Name as Empresa, " +
                                " per_.v_FirstName + ' ' + per_.v_FirstLastName + ' ' + per_.v_SecondLastName as 'Medico', " +
                                " r.d_InsertDate as 'FechaRegistro',  " +
                                " per__.v_FirstName + ' ' + per__.v_FirstLastName + ' ' + per__.v_SecondLastName as 'Usuario', " +
                                " prod.v_Descripcion as 'Medicina', " +
                                " CAST(r.d_Cantidad AS INT) as 'Cantidad', " +
                                " r.d_SaldoAseguradora + r.d_SaldoPaciente as 'Precio', " +
                                " r.d_SaldoPaciente as 'PagoPaciente', " +
                                " r.d_SaldoAseguradora as 'PagoSeguro' , " +
                                " s.d_InsertDate as 'FECHA_SERVICIO', " +
                                " lin.v_Nombre as 'Plan', " +
		                        " prot.r_PriceFactor as 'Factor',  " +
		                        " CONVERT (varchar,cast(prot.r_MedicineDiscount as int)) + '%'  as 'Descuento_PPS'," +
		                        " 'S/.   ' + CONVERT (varchar,cast(pl.d_Importe as money)) as 'Deducible'," +
                                " CONVERT (varchar,cast(pl.d_ImporteCo as int)) + '%' AS 'Coaseguro'  " +
                                " from receta as r " +
                                " join receipHeader as  rh on r.v_ReceipId = rh.v_ReceipId " + 
                                " join service as s on r.v_ServiceId = s.v_ServiceId " +
                                " join person as per on s.v_PersonId = per.v_PersonId " +
                                " join protocol as prot on s.v_ProtocolId = prot.v_ProtocolId " +
                                " join organization as orgn on prot.v_WorkingOrganizationId = orgn.v_OrganizationId " +
                                " join systemuser as su on r.v_MedicoTratante = su.i_SystemUserId " +
                                " join person as per_ on su.v_PersonId = per_.v_PersonId " +
                                " join systemuser as su_ on r.i_InsertUserId = su_.i_SystemUserId " +
                                " join person as per__ on su_.v_PersonId = per__.v_PersonId " +
                                " LEFT JOIN [20505310072].dbo.productodetalle as pd on r.v_IdProductoDetalle = pd.v_IdProductoDetalle " +
                                " LEFT JOIN [20505310072].dbo.producto as prod on pd.v_IdProducto = prod.v_IdProducto " +
                                " join dbo.[plan] as pl on s.i_PlanId = pl.i_PlanId " +
		                        " LEFT JOIN [20505310072].dbo.linea as lin on pl.v_IdUnidadProductiva = lin.v_IdLinea " +
                                " where r.v_Comprobante = '" + comprobante + "' and r.i_IsDeleted = 0 and rh.i_IsDeleted = 0 ";

                var comando = new SqlCommand(query, connection: conectasam.conectarsigesoft);
                var lector = comando.ExecuteReader();

                List<Medicina_Tickets> objListaMedicinas = new List<Medicina_Tickets>();

                while (lector.Read())
                {
                    Medicina_Tickets Lista = new Medicina_Tickets();
                    Lista.Servicio = lector.GetValue(0).ToString();
                    Lista.Comprobante = lector.GetValue(1).ToString();
                    Lista.Paciente = lector.GetValue(2).ToString();
                    Lista.DNI = lector.GetValue(3).ToString();
                    Lista.Titular = lector.GetValue(4).ToString();
                    Lista.Protocolo = lector.GetValue(5).ToString();
                    Lista.Empresa = lector.GetValue(6).ToString();
                    Lista.Medico = lector.GetValue(7).ToString();
                    Lista.FechaRegistro = DateTime.Parse(lector.GetValue(8).ToString());
                    Lista.Usuario = lector.GetValue(9).ToString();
                    Lista.Medicina = lector.GetValue(10).ToString();
                    Lista.Cantidad = int.Parse(lector.GetValue(11).ToString());
                    Lista.Precio = decimal.Parse(lector.GetValue(12).ToString());
                    Lista.PagoPaciente = decimal.Parse(lector.GetValue(13).ToString());
                    Lista.PagoSeguro = decimal.Parse(lector.GetValue(14).ToString());
                    Lista.FECHA_SERVICIO = DateTime.Parse(lector.GetValue(15).ToString());
                    Lista.Plan = lector.GetValue(16).ToString();
                    Lista.Factor = decimal.Parse(lector.GetValue(17).ToString());
                    Lista.Descuento_PPS = lector.GetValue(18).ToString();
                    Lista.Deducible = lector.GetValue(19).ToString();
                    Lista.Coaseguro = lector.GetValue(20).ToString();
                    objListaMedicinas.Add(Lista);
                }

                lector.Close();
                conectasam.closesigesoft();

                return objListaMedicinas;

            }
            catch (Exception)
            {

                throw;
            }


        }
        #endregion

        #region TICKET HOSPIT
        public List<Medicina_Tickets> TicketHospi(string comprobante)
        {

            try
            {
                ConexionSigesoft conectasam = new ConexionSigesoft();
                conectasam.opensigesoft();

                var query = 
                                " select s.v_ServiceId as 'Servicio',  " +
                                " t.v_Comprobante as 'Comprobante',   " +
                                " per.v_FirstName + ' ' + per.v_FirstLastName + ' ' + per.v_SecondLastName as 'Paciente',  " +
                                " per.v_DocNumber as 'DNI',  " +
                                " per.v_OwnerName as 'Titular',  " +
                                " prot.v_Name as 'Protocolo',  " +
                                " orgn.v_Name as Empresa,  " +
                                " per_.v_FirstName + ' ' + per_.v_FirstLastName + ' ' + per_.v_SecondLastName as 'Medico',  " +
                                " t.d_InsertDate as 'FechaRegistro',   " +
                                " per__.v_FirstName + ' ' + per__.v_FirstLastName + ' ' + per__.v_SecondLastName as 'Usuario',  " +
                                " prod.v_Descripcion as 'Medicina',  CAST(td.d_Cantidad AS INT) as 'Cantidad',  " +
                                " td.d_PrecioVenta as 'Precio',  " +
                                " CASE WHEN td.d_SaldoPaciente IS NULL THEN 0 ELSE td.d_SaldoPaciente END AS 'PagoPaciente',  " +
                                " CASE WHEN td.d_SaldoAseguradora IS NULL THEN 0 ELSE td.d_SaldoAseguradora END AS 'PagoSeguro' ,  " +
                                " s.d_InsertDate as 'FECHA_SERVICIO',  " +
                                " CASE WHEN lin.v_Nombre IS NULL THEN '- - -' ELSE lin.v_Nombre END AS 'Plan',  " +
                                " prot.r_PriceFactor as 'Factor',   " +
                                " CONVERT (varchar,cast(prot.r_MedicineDiscount as int)) + '%'  as 'Descuento_PPS', " +
                                " CASE WHEN pl.d_Importe IS NULL THEN 'NP' ELSE 'S/.   ' + CONVERT (varchar,cast(pl.d_Importe as money)) END as 'Deducible', " +
                                " CASE WHEN pl.d_ImporteCo IS NULL THEN 'NP' ELSE CONVERT (varchar,cast(pl.d_ImporteCo as int)) + '%' END AS 'Coaseguro' ," +
                                " td.v_TicketDetalleId as 'TicketDetalle', " +
                                " t.v_TicketId as 'Ticket' , " +
                                " sp.v_Value1 as 'Habitacion' " +
                                " from ticket as t " +
                                " join ticketdetalle as td on t.v_TicketId = td.v_TicketId " +
                                " join service as s on t.v_ServiceId = s.v_ServiceId " +
                                " join servicecomponent as sc on s.v_ServiceId = sc.v_ServiceId " +
                                " join person as per on s.v_PersonId = per.v_PersonId " +
                                " join protocol as prot on s.v_ProtocolId = prot.v_ProtocolId " +   
                                " join organization as orgn on prot.v_WorkingOrganizationId = orgn.v_OrganizationId " +
                                " join systemuser as su on sc.i_MedicoTratanteId = su.i_SystemUserId " +
                                " join person as per_ on su.v_PersonId = per_.v_PersonId " +
                                " join systemuser as su_ on t.i_InsertUserId = su_.i_SystemUserId  " +
                                " join person as per__ on su_.v_PersonId = per__.v_PersonId " +
                                " LEFT JOIN [20505310072].dbo.productodetalle as pd on td.v_IdProductoDetalle = pd.v_IdProductoDetalle " +
                                " LEFT JOIN [20505310072].dbo.producto as prod on pd.v_IdProducto = prod.v_IdProducto " +
                                " left join [SigesoftDesarrollo_2].dbo.[plan] as pl on s.i_PlanId = pl.i_PlanId " +
                                " LEFT JOIN [20505310072].dbo.linea as lin on pl.v_IdUnidadProductiva = lin.v_IdLinea " +
                                " JOIN hospitalizacionservice as hs on s.v_ServiceId = hs.v_ServiceId " +
                                " JOIN hospitalizacion as h on hs.v_HopitalizacionId = h.v_HopitalizacionId " +
                                " join hospitalizacionhabitacion as hh on h.v_HopitalizacionId = hh.v_HopitalizacionId " +
                                " join systemparameter as sp on sp.i_GroupId = 309 and hh.i_HabitacionId = sp.i_ParameterId " +
                                " where v_Comprobante = '" + comprobante + "' and sc.r_Price = 0 ";

                var comando = new SqlCommand(query, connection: conectasam.conectarsigesoft);
                var lector = comando.ExecuteReader();

                List<Medicina_Tickets> objListaMedicinas = new List<Medicina_Tickets>();

                while (lector.Read())
                {
                    Medicina_Tickets Lista = new Medicina_Tickets();
                    Lista.Servicio = lector.GetValue(0).ToString();
                    Lista.Comprobante = lector.GetValue(1).ToString();
                    Lista.Paciente = lector.GetValue(2).ToString();
                    Lista.DNI = lector.GetValue(3).ToString();
                    Lista.Titular = lector.GetValue(4).ToString();
                    Lista.Protocolo = lector.GetValue(5).ToString();
                    Lista.Empresa = lector.GetValue(6).ToString();
                    Lista.Medico = lector.GetValue(7).ToString();
                    Lista.FechaRegistro = DateTime.Parse(lector.GetValue(8).ToString());
                    Lista.Usuario = lector.GetValue(9).ToString();
                    Lista.Medicina = lector.GetValue(10).ToString();
                    Lista.Cantidad = int.Parse(lector.GetValue(11).ToString());
                    Lista.Precio = decimal.Parse(lector.GetValue(12).ToString());
                    Lista.PagoPaciente = decimal.Parse(lector.GetValue(13).ToString());
                    Lista.PagoSeguro = decimal.Parse(lector.GetValue(14).ToString());
                    Lista.FECHA_SERVICIO = DateTime.Parse(lector.GetValue(15).ToString());
                    Lista.Plan = lector.GetValue(16).ToString();
                    Lista.Factor = decimal.Parse(lector.GetValue(17).ToString());
                    Lista.Descuento_PPS = lector.GetValue(18).ToString();
                    Lista.Deducible = lector.GetValue(19).ToString();
                    Lista.Coaseguro = lector.GetValue(20).ToString();
                    Lista.TicketDetalle = lector.GetValue(21).ToString();
                    Lista.Ticket = lector.GetValue(22).ToString();
                    Lista.Habitacion = lector.GetValue(23).ToString();
                    objListaMedicinas.Add(Lista);
                }

                lector.Close();
                conectasam.closesigesoft();

                //var xxx = objListaMedicinas.FindAll(p => p.TicketDetalle);
                //var lista = objListaMedicinas.GroupBy(x => x.TicketDetalle).Where(g => g.Count() >= 1).ToDictionary(x => x.Key, y => y.Count());

                 var objData = objListaMedicinas.AsEnumerable().GroupBy(x => x.TicketDetalle).Select(group => group.First());

                List<Medicina_Tickets> obj = objData.ToList();

                return obj;

            }
            catch (Exception)
            {

                throw;
            }


        }
        #endregion
    }
}
