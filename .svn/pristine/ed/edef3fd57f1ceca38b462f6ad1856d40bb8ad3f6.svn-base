using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using SAMBHS.Common.BE;
using SAMBHS.CommonWIN.BL;
using SAMBHS.Common.Resource;
using SAMBHS.Venta.BL;
using Infragistics.Win.UltraWinGrid;
using System.Threading;
using Infragistics.Win;
using Infragistics.Win.UltraWinGrid.ExcelExport;
using LoadingClass;
using SAMBHS.Almacen.BL;
using SAMBHS.Letras.BL;
using SAMBHS.Windows.NubefactIntegration;
using SAMBHS.Windows.WinClient.UI.Mantenimientos;
using SAMBHS.Windows.WinClient.UI.Mantenimientos.UserControls;

namespace SAMBHS.Windows.WinClient.UI.Procesos
{
    public partial class frmBandejaRegistroVentaElectronica : Form
    {
        private Task _tarea;
        private readonly CancellationTokenSource _cts = new CancellationTokenSource();
        private readonly VentaBL _objVentaBl = new VentaBL();
        private string _pstrIdVenta;
        private string _vIdCliente = string.Empty;
        private readonly string _modo;
        private bool _seleccionarVentaRapida;

        #region Permisos Botones
        bool _btnAgregar;
        bool _btnEditar;
        bool _btnEliminar;
        bool _btnVentaRapida;
        #endregion

        public frmBandejaRegistroVentaElectronica(string modo)
        {
            InitializeComponent();
            _modo = modo;
        }

        private void frmBandejaRegistroVenta_Load(object sender, EventArgs e)
        {
            BackColor = new GlobalFormColors().FormColor;

            var fecha = DateTime.Parse(string.Format("{0}/{1}/{2}", DateTime.Today.Day, DateTime.Today.Month, Globals.ClientSession.i_Periodo));
            dtpFechaInicio.Value = dtpFechaFin.Value = fecha;
            dtpFechaInicio.MaxDate = dtpFechaFin.Value;
            
            if (Globals.ClientSession.EsEmisorElectronico)
            {
                var col = grdData.DisplayLayout.Bands[0].Columns.Add("imagen", "Sunat");
                col.Header.VisiblePosition = 8;
                col.DataType = typeof(Bitmap);
                col.Style = Infragistics.Win.UltraWinGrid.ColumnStyle.Image;
                col.CellAppearance.ImageHAlign = HAlign.Center;
                col.Width = 50;
                grdData.InitializeRow += grdData_InitializeRowFacturacion;
            }

            RecalcularStock();
        }

        private void RecalcularStock()
        {
            try
            {
                if (Globals.ActualizadoStocks) return;
                var op = new OperationResult();
                pbRecalculandoStock.Visible = true;
                var objStockBl = new StockSeparacionBl();
                objStockBl.Terminado += delegate { pbRecalculandoStock.Visible = false; };
                objStockBl.IniciarProceso(ref op, Globals.ClientSession.i_Periodo.ToString(), Globals.ClientSession.i_IdAlmacenPredeterminado ?? -1);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void btnBuscar_Click(object sender, EventArgs e)
        {

            if (uvDatos.Validate(true, false).IsValid)
            {
                BindGrid();
                grdData.Focus();
            }
        }

        private void btnEditar_Click(object sender, EventArgs e)
        {
            if (grdData.ActiveRow != null && !grdData.ActiveRow.IsGroupByRow && !grdData.ActiveRow.IsFilterRow && grdData.ActiveRow.Activation != Activation.Disabled)
            {
                if (Utils.Windows.HaveFormChild(this, typeof(frmRegistroVenta), true)) return;
                _pstrIdVenta = grdData.ActiveRow.Cells["v_IdVenta"].Value.ToString();

                var frm = new frmRegistroVenta("Edicion", _pstrIdVenta);

                #region Eventos
                frm.OnSiguiente += delegate
                {
                    grdData.PerformAction(UltraGridAction.BelowRow);
                    frm.IdRecibido = grdData.ActiveRow.Cells["v_IdVenta"].Value.ToString();
                };

                frm.OnAnterior += delegate
                {
                    grdData.PerformAction(UltraGridAction.AboveRow);
                    frm.IdRecibido = grdData.ActiveRow.Cells["v_IdVenta"].Value.ToString();
                };

                frm.FormClosed += delegate
                {
                    if (frm._modificada)
                        BindGrid();
                    MantenerSeleccion(_pstrIdVenta);
                };
                #endregion

                ((frmMaster)MdiParent).RegistrarForm(this, frm);
            }
        }

        private void BindGrid()
        {
            GetData("NroRegistro ASC");
        }

        private void GetData(string pstrSortExpression)
        {
            var objOperationResult = new OperationResult();
            var objData = new List<ventaDto>();
            var fIni = dtpFechaInicio.Value.Date;
            var fFin = DateTime.Parse(dtpFechaFin.Text + " 23:59");
            Task.Factory.StartNew(() =>
            {
                Invoke((MethodInvoker)delegate
                {
                    pBuscando.Visible = true;
                    grdData.Enabled = false;
                });
                objData = _objVentaBl.ListarBusquedaVentas(ref objOperationResult, pstrSortExpression, _vIdCliente, fIni, fFin, -1, "", "", -1, Globals.ClientSession.i_IdEstablecimiento ?? -1);
            }, _cts.Token).ContinueWith(t =>
            {
                if (objOperationResult.Success != 1)
                {
                    UltraMessageBox.Show("Error en operación:" + Environment.NewLine + objOperationResult.ExceptionMessage, "ERROR!", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    Invoke((MethodInvoker)delegate
                    {
                        pBuscando.Visible = false;
                        grdData.Enabled = true;
                    });
                    return;
                }
                grdData.DataSource = objData;
                if (objData == null) return;
                if (objData.Count > 0)
                {
                    lblContadorFilas.Text = string.Format("Se encontraron {0} registros.", objData.Count);
                }
                else
                {
                    lblContadorFilas.Text = string.Format("Se encontraron {0} registros.", objData.Count);
                }

                if (Globals.ClientSession.UsuarioEsContable == 0) CierraOperacionesContables();
                Invoke((MethodInvoker)delegate
                {
                    pBuscando.Visible = false;
                    grdData.Enabled = true;
                });
            }, _cts.Token, TaskContinuationOptions.LongRunning, TaskScheduler.FromCurrentSynchronizationContext());
        }

        private void MantenerSeleccion(string valorSeleccionado)
        {
            if (string.IsNullOrEmpty(valorSeleccionado)) return;
            var filas = grdData.DisplayLayout.Bands[0].GetRowEnumerator(GridRowType.DataRow).Cast<UltraGridRow>();
            var fila = filas.FirstOrDefault(f => f.Cells["v_IdVenta"].Value.ToString().Contains(valorSeleccionado));
            if (fila != null) fila.Activate();
        }

        private void grdData_MouseDown(object sender, MouseEventArgs e)
        {

        }

        private void grdData_InitializeRow(object sender, InitializeRowEventArgs e)
        {
            if (e.Row.Band.Index == 0 && e.Row.Cells["i_IdEstado"].Value.ToString() == "0")
            {
                e.Row.Appearance.BackColor = Color.Salmon;
                e.Row.Appearance.BackColor2 = Color.Salmon;
                e.Row.Appearance.ForeColor = Color.Black;
            }
        }

        private void grdData_InitializeRowFacturacion(object sender, InitializeRowEventArgs e)
        {
            if (!Globals.ClientSession.EsEmisorElectronico) grdData.InitializeRow -= grdData_InitializeRowFacturacion;
            if (!Globals.ClientSession.EsEmisorElectronico || e.Row.GetCellValue("i_EstadoSunat") == null) return;
            Bitmap ico;
            var estado = (EstadoSunat)Enum.ToObject(typeof(EstadoSunat), (short)e.Row.GetCellValue("i_EstadoSunat"));
            switch (estado)
            {
                case EstadoSunat.PENDIENTE:
                    ico = Resource.alerta;
                    break;
                case EstadoSunat.CDR_ACEPTADO:
                    ico = Resource.tick;
                    break;
                case EstadoSunat.CDR_ACEPTADO_CON_OBSERV:
                    ico = Resource.user_alert;
                    break;
                case EstadoSunat.CDR_RECHAZADO:
                    ico = Resource.door_out;
                    break;
                case EstadoSunat.DE_BAJA:
                    ico = Resource.user_cross;
                    break;
                case EstadoSunat.DE_BAJA_CDR_ACEPTADO:
                    ico = Resource.cross;
                    break;
                case EstadoSunat.DE_BAJA_CDR_RECHAZADO:
                    ico = Resource.cancel;
                    break;
                default:
                    ico = Resource.tick;
                    break;
            }
            e.Row.Cells["imagen"].Value = ico;
        }

        private void dtpFechaFin_ValueChanged(object sender, EventArgs e)
        {
            dtpFechaInicio.MaxDate = dtpFechaFin.Value;
        }

        private void grdData_DoubleClick(object sender, EventArgs e)
        {
            if (_modo == "GuiaRemisión")
            {
                if (grdData.Rows.Count == 0) return; //se cambio

                if (grdData.ActiveRow != null)
                {

                    if (grdData.Rows[grdData.ActiveRow.Index].Cells["v_IdVenta"].Value != null)
                    {
                        Close();
                    }
                }
            }
        }

        private void grdData_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Control && e.KeyCode == Keys.F)
            {
                grdData.DisplayLayout.Override.FilterUIType = grdData.DisplayLayout.Override.FilterUIType == FilterUIType.Default ? FilterUIType.FilterRow : FilterUIType.Default;
            }
        }

        private void ultraButton1_Click(object sender, EventArgs e)
        {
            if (uvDatos.Validate(true, false).IsValid)
            {
                BindGrid();
                grdData.Focus();
            }
        }

        private void grdData_AfterRowActivate(object sender, EventArgs e)
        {
            if (Application.OpenForms["frmRegistroVentaRapida"] != null && grdData.ActiveRow != null && _seleccionarVentaRapida)
            {
                var ventaRapidaForm = (frmRegistroVentaRapida)Application.OpenForms["frmRegistroVentaRapida"];
                var idVenta = grdData.ActiveRow.Cells["v_IdVenta"].Value.ToString();
                ventaRapidaForm.CargarCabecera(idVenta);
            }
        }

        public bool MarcarFilaAnterior()
        {
            _seleccionarVentaRapida = true;
            return grdData.PerformAction(UltraGridAction.AboveRow);
        }

        public bool MarcarFilaSiguiente()
        {
            _seleccionarVentaRapida = true;
            return grdData.PerformAction(UltraGridAction.BelowRow);
        }

        public void ActualizarBandeja()
        {
            _seleccionarVentaRapida = false;
            btnBuscar_Click(this, new EventArgs());
            _seleccionarVentaRapida = true;
            var ultimaFila = grdData.Rows.LastOrDefault();
            if (ultimaFila != null) ultimaFila.Activate();
        }

        private void chkFiltroPersonalizado_CheckedChanged(object sender, EventArgs e)
        {
            Utils.Windows.MostrarOcultarFiltrosGrilla(grdData);
        }

        private void btnExportarBandeja_Click(object sender, EventArgs e)
        {
            if (!grdData.Rows.Any() || (_tarea != null && !_tarea.IsCompleted)) return;

            const string dummyFileName = "Bandeja Ventas";

            using (var sf = new SaveFileDialog
            {
                DefaultExt = "xlsx",
                Filter = @"xlsx files (*.xlsx)|*.xlsx",
                FileName = dummyFileName
            })
            {
                if (sf.ShowDialog() != DialogResult.OK) return;
                var filename = sf.FileName;
                btnExportarBandeja.Appearance.Image = Resource.loadingfinal1;

                _tarea = Task.Factory.StartNew(() =>
                        {
                            using (var ultraGridExcelExporter1 = new UltraGridExcelExporter())
                                ultraGridExcelExporter1.Export(grdData, filename);
                        }, _cts.Token)
                    .ContinueWith(t => ActualizarLabel("Bandeja Exportada a Excel."),
                    TaskScheduler.FromCurrentSynchronizationContext());
            }
        }

        private void ActualizarLabel(string texto)
        {
            lblDocumentoExportado.Text = texto;
            btnExportarBandeja.Enabled = false;
            btnExportarBandeja.Appearance.Image = Resource.accept;
        }

        private void frmBandejaRegistroVenta_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (_tarea != null && !_tarea.IsCompleted)
                _cts.Cancel();
        }

        private void CierraOperacionesContables()
        {
            var filas = grdData.Rows.GetRowEnumerator(GridRowType.DataRow, null, null).Cast<UltraGridRow>().ToList();
            filas.ForEach(fila =>
            {
                if (fila.Cells["v_UsuarioCreacion"].Value != null)
                {
                    var opContable = Globals.UsuariosContables.Contains(fila.Cells["v_UsuarioCreacion"].Value.ToString());
                    fila.Activation = opContable ? Activation.Disabled : Activation.ActivateOnly;
                }
            });
        }

        private void btnConfig_Click(object sender, EventArgs e)
        {
            pConfig.ClientArea.Controls.Clear();
            pConfig.ClientArea.Controls.Add(new frmConfigFe());
            pConfig.ClientArea.Controls[0].Dock = DockStyle.Fill;
            pPopUp.Show();
        }

        private void grdData_ClickCellButton(object sender, CellEventArgs e)
        {
            if (e.Cell.Column.Key.Equals("_btnEnviar"))
            {
                var item = (ventaDto)e.Cell.Row.ListObject;
                var id = item.v_IdVenta;
                
                e.Cell.Activation = Activation.Disabled;
                
                var nfm = new NubeFacTManager
                {
                    Ruta = UserConfig.Default.NubefactRuta,
                    Token = UserConfig.Default.NubefactToken,
                    TipoAccionRealizar = NubeFacTManager.TipoAccion.EnviarComprobante,
                    FormatoImpresion = "A4"
                };

                nfm.ErrorEvent += delegate(Exception ex, int rowIndex)
                {
                    Invoke((MethodInvoker) delegate
                    {
                        grdData.Rows[rowIndex].Cells["_btnEnviar"].Activation = Activation.AllowEdit;
                    });
                    MessageBox.Show(Utils.ExceptionFormatter(ex));
                };

                nfm.TerminadoEvent += nfm_TerminadoEvent;
                nfm.Comenzar(id, e.Cell.Row.Index);
            }
        }

        void nfm_TerminadoEvent(NubefactIntegration.Modelos.Respuesta rpt, int rowIndex)
        {
            grdData.Rows[rowIndex].Cells["_btnEnviar"].Activation = Activation.AllowEdit;
            MessageBox.Show(rpt.SunatDescription);
        }
    }
}
