using SAMBHS.Common.Resource;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Dapper;
using Infragistics.Win.UltraWinEditors;
using SAMBHS.Common.BE;
using System.ComponentModel;

namespace SAMBHS.Windows.SigesoftIntegration.UI
{
    public static class FacturacionServiciosBl
    {
        public static string GetQuotedString(string str)
        {
            return str != null ? "'" + str.Trim() + "'" : "''";
        }

        private static string ConsultaServiciosPendientes(TipoFacturacion tipo, string f1, string f2, int pintEsoTypeId,
            string pstrGroupOccupationId, string pstrIdClienteAseguradora, string pstrCustomerLocationId = null)
        {
            try
            {
                switch (tipo)
                {
                    case TipoFacturacion.Ocupacional:

                        #region retorna query
                        return @"SELECT 
							Filter1.v_ServiceId1 AS ServiceId, 
							Filter1.v_CalendarId AS CalendarId, 
							Filter1.v_ProtocolId1 AS ProtocolId, 
							Filter1.v_PersonId1 AS PersonId, 
							Filter1.i_MasterServiceId AS MasterServiceId, 
							Filter1.v_Value11 AS TipoServicio, 
							Filter1.i_ServiceStatusId AS ServiceStatusId, 
							Filter1.v_Value12 AS Estado, 
							Filter1.i_AptitudeStatusId AS AptitudeStatusId, 
							 CAST(CAST( Filter1.d_ServiceDate AS datetime2) AS datetime2) AS C3, 
							 CAST(CAST( Filter1.d_GlobalExpirationDate AS datetime2) AS datetime2) AS C4, 
							 CAST(CAST( Filter1.d_ObsExpirationDate AS datetime2) AS datetime2) AS C5, 
							Filter1.i_FlagAgentId AS i_FlagAgentId, 
							 CAST( Filter1.d_DateTimeCalendar AS datetime2) AS C6, 
							o.v_Name AS Organizacion, 
							l.v_Name AS Establecimiento, 
							sp3.v_Value1 AS MasterServiceType, 
							p.i_MasterServiceTypeId AS MasterServiceTypeId, 
							p.i_EsoTypeId AS EsoId, 
							p.v_EmployerLocationId AS v_EmployerLocationId, 
							s0.v_FirstLastName + N' ' + s0.v_SecondLastName + N' ' + s0.v_FirstName AS C7, 
							s0.v_FirstName + N' ' + s0.v_FirstLastName + N' ' + s0.v_SecondLastName + N' ' + s0.v_DocNumber AS C8, 
							p.v_Name AS Protocolo, 
							s7.v_UserName AS UsuarioCrea, 
							s8.v_UserName AS UsuarioActualiza, 
							Filter1.d_InsertDate1 AS FechaCrea, 
							Filter1.d_UpdateDate1 AS FechaActualiza, 
							s1.v_Value1 AS Aptitud, 
							s2.v_Value1 AS TipoDocumento, 
							s0.v_DocNumber AS NroDocumento, 
							p.v_CustomerOrganizationId AS v_CustomerOrganizationId, 
							p.v_CustomerLocationId AS v_CustomerLocationId, 
							s3.v_Value1 AS Eso, 
							Filter1.i_InsertUserOccupationalMedicalId AS i_InsertUserOccupationalMedicalId, 
							Filter1.i_IsFac AS i_IsFac, 
							Filter1.i_ServiceId AS i_ServiceId, 
							s4.v_Name AS GrupoOcupacion, 
							p.v_GroupOccupationId AS v_GroupOccupationId
							FROM (SELECT s.v_ServiceId AS v_ServiceId1, s.v_ProtocolId AS v_ProtocolId1, s.v_PersonId AS v_PersonId1, s.i_MasterServiceId AS i_MasterServiceId, 
							s.i_ServiceStatusId AS i_ServiceStatusId, s.i_AptitudeStatusId AS i_AptitudeStatusId, 
							s.d_ServiceDate AS d_ServiceDate, s.d_GlobalExpirationDate AS d_GlobalExpirationDate, 
							s.d_ObsExpirationDate AS d_ObsExpirationDate, s.i_FlagAgentId AS i_FlagAgentId, s.d_UpdateDate AS d_UpdateDate1, 
							s.i_InsertUserId AS i_InsertUserId1, s.d_InsertDate AS d_InsertDate1, s.i_UpdateUserId AS i_UpdateUserId1, 
							s.i_InsertUserOccupationalMedicalId AS i_InsertUserOccupationalMedicalId, s.i_IsFac AS i_IsFac, 
							sp1.v_Value1 AS v_Value12, sp2.v_Value1 AS v_Value11, Extent5.v_CalendarId AS v_CalendarId, Extent5.d_DateTimeCalendar AS d_DateTimeCalendar, Extent5.i_ServiceId AS i_ServiceId
								FROM service AS s
								LEFT OUTER JOIN systemparameter AS sp1 ON (s.i_ServiceStatusId = sp1.i_ParameterId) AND (125 = sp1.i_GroupId)
								LEFT OUTER JOIN systemparameter AS sp2 ON (s.i_MasterServiceId = sp2.i_ParameterId) AND (119 = sp2.i_GroupId)
								INNER JOIN calendar AS Extent5 ON s.v_ServiceId = Extent5.v_ServiceId
								WHERE (0 = s.i_IsDeleted) 
								AND (3 = s.i_ServiceStatusId) 
								AND ((s.v_IdVentaCliente is null)) 
								AND ( CAST(CAST( s.d_ServiceDate AS datetime2) AS datetime2) >= convert(datetime2, '" + f1 + "', 121)) AND ( CAST(CAST( s.d_ServiceDate AS datetime2) AS datetime2) <= convert(datetime2, '" + f2 + " 23:59', 121)) AND (1 = Extent5.i_LineStatusId) ) AS Filter1 " +
                                            @"INNER JOIN protocol AS p ON Filter1.v_ProtocolId1 = p.v_ProtocolId
							INNER JOIN organization AS o ON p.v_EmployerOrganizationId = o.v_OrganizationId
							INNER JOIN location AS l ON p.v_EmployerLocationId = l.v_LocationId
							LEFT OUTER JOIN systemparameter AS sp3 ON (p.i_MasterServiceTypeId = sp3.i_ParameterId) AND (119 = sp3.i_GroupId)
							INNER JOIN person AS s0 ON Filter1.v_PersonId1 = s0.v_PersonId
							LEFT OUTER JOIN systemparameter AS s1 ON (Filter1.i_AptitudeStatusId = s1.i_ParameterId) AND (124 = s1.i_GroupId)
							LEFT OUTER JOIN datahierarchy AS s2 ON (s0.i_DocTypeId = s2.i_ItemId) AND (106 = s2.i_GroupId)
							LEFT OUTER JOIN systemparameter AS s3 ON (p.i_EsoTypeId = s3.i_ParameterId) AND (118 = s3.i_GroupId)
							LEFT OUTER JOIN groupoccupation AS s4 ON p.v_GroupOccupationId = s4.v_GroupOccupationId
							LEFT OUTER JOIN organization AS s5 ON p.v_CustomerOrganizationId = s5.v_OrganizationId
							LEFT OUTER JOIN location AS s6 ON ((p.v_CustomerOrganizationId = s6.v_OrganizationId) OR ((p.v_CustomerOrganizationId IS NULL) AND (s6.v_OrganizationId IS NULL))) AND (p.v_CustomerLocationId = s6.v_LocationId)
							LEFT OUTER JOIN systemuser AS s7 ON Filter1.i_InsertUserId1 = s7.i_SystemUserId
							LEFT OUTER JOIN systemuser AS s8 ON Filter1.i_UpdateUserId1 = s8.i_SystemUserId " +
                                                    "WHERE (" + pintEsoTypeId + " = -1 or " + pintEsoTypeId + " = p.i_EsoTypeId) " +
                                                    "AND (" + pstrGroupOccupationId + " is null or " + pstrGroupOccupationId + " = p.v_GroupOccupationId) " +
                                                    "AND (" + pstrIdClienteAseguradora + " = p.v_CustomerOrganizationId)  " +
                                                    "AND (" + pstrCustomerLocationId + " = p.v_CustomerLocationId)";
                        #endregion

                    case TipoFacturacion.Aseguradora:

                        #region retorna query
                        return @"SELECT 
							Filter1.v_ServiceId1 AS ServiceId, 
							Filter1.v_CalendarId AS CalendarId, 
							Filter1.v_ProtocolId1 AS ProtocolId, 
							Filter1.v_PersonId1 AS PersonId, 
							Filter1.i_MasterServiceId AS MasterServiceId, 
							Filter1.v_Value11 AS TipoServicio, 
							Filter1.i_ServiceStatusId AS ServiceStatusId, 
							Filter1.v_Value12 AS Estado, 
							Filter1.i_AptitudeStatusId AS AptitudeStatusId, 
							 CAST(CAST( Filter1.d_ServiceDate AS datetime2) AS datetime2) AS C3, 
							 CAST(CAST( Filter1.d_GlobalExpirationDate AS datetime2) AS datetime2) AS C4, 
							 CAST(CAST( Filter1.d_ObsExpirationDate AS datetime2) AS datetime2) AS C5, 
							Filter1.i_FlagAgentId AS i_FlagAgentId, 
							 CAST( Filter1.d_DateTimeCalendar AS datetime2) AS C6, 
							o.v_Name AS Organizacion, 
							l.v_Name AS Establecimiento, 
							sp3.v_Value1 AS MasterServiceType, 
							p.i_MasterServiceTypeId AS MasterServiceTypeId, 
							p.i_EsoTypeId AS EsoId, 
							p.v_EmployerLocationId AS v_EmployerLocationId, 
							s0.v_FirstLastName + N' ' + s0.v_SecondLastName + N' ' + s0.v_FirstName AS C7, 
							s0.v_FirstName + N' ' + s0.v_FirstLastName + N' ' + s0.v_SecondLastName + N' ' + s0.v_DocNumber AS C8, 
							p.v_Name AS Protocolo, 
							s7.v_UserName AS UsuarioCrea, 
							s8.v_UserName AS UsuarioActualiza, 
							Filter1.d_InsertDate1 AS FechaCrea, 
							Filter1.d_UpdateDate1 AS FechaActualiza, 
							s1.v_Value1 AS Aptitud, 
							s2.v_Value1 AS TipoDocumento, 
							s0.v_DocNumber AS NroDocumento, 
							p.v_CustomerOrganizationId AS v_CustomerOrganizationId, 
							p.v_CustomerLocationId AS v_CustomerLocationId, 
							s3.v_Value1 AS Eso, 
							Filter1.i_InsertUserOccupationalMedicalId AS i_InsertUserOccupationalMedicalId, 
							Filter1.i_IsFac AS i_IsFac, 
							Filter1.i_ServiceId AS i_ServiceId, 
							s4.v_Name AS GrupoOcupacion, 
							p.v_GroupOccupationId AS v_GroupOccupationId
							FROM (SELECT s.v_ServiceId AS v_ServiceId1, s.v_ProtocolId AS v_ProtocolId1, s.v_PersonId AS v_PersonId1, s.i_MasterServiceId AS i_MasterServiceId, 
							s.i_ServiceStatusId AS i_ServiceStatusId, s.i_AptitudeStatusId AS i_AptitudeStatusId, 
							s.d_ServiceDate AS d_ServiceDate, s.d_GlobalExpirationDate AS d_GlobalExpirationDate, 
							s.d_ObsExpirationDate AS d_ObsExpirationDate, s.i_FlagAgentId AS i_FlagAgentId, s.d_UpdateDate AS d_UpdateDate1, 
							s.i_InsertUserId AS i_InsertUserId1, s.d_InsertDate AS d_InsertDate1, s.i_UpdateUserId AS i_UpdateUserId1, 
							s.i_InsertUserOccupationalMedicalId AS i_InsertUserOccupationalMedicalId, s.i_IsFac AS i_IsFac, 
							sp1.v_Value1 AS v_Value12, sp2.v_Value1 AS v_Value11, Extent5.v_CalendarId AS v_CalendarId, Extent5.d_DateTimeCalendar AS d_DateTimeCalendar, Extent5.i_ServiceId AS i_ServiceId
								FROM service AS s
								LEFT OUTER JOIN systemparameter AS sp1 ON (s.i_ServiceStatusId = sp1.i_ParameterId) AND (125 = sp1.i_GroupId)
								LEFT OUTER JOIN systemparameter AS sp2 ON (s.i_MasterServiceId = sp2.i_ParameterId) AND (119 = sp2.i_GroupId)
								INNER JOIN calendar AS Extent5 ON s.v_ServiceId = Extent5.v_ServiceId
								WHERE (0 = s.i_IsDeleted) 
								AND (3 = s.i_ServiceStatusId) 
								AND ((s.v_IdVentaAseguradora is null)) 
								AND ( CAST(CAST( s.d_ServiceDate AS datetime2) AS datetime2) >= convert(datetime2, '" + f1 + "', 121)) AND ( CAST(CAST( s.d_ServiceDate AS datetime2) AS datetime2) <= convert(datetime2, '" + f2 + " 23:59', 121)) AND (1 = Extent5.i_LineStatusId) ) AS Filter1 " +
                                            @"INNER JOIN protocol AS p ON Filter1.v_ProtocolId1 = p.v_ProtocolId
							INNER JOIN organization AS o ON p.v_EmployerOrganizationId = o.v_OrganizationId
							INNER JOIN location AS l ON p.v_EmployerLocationId = l.v_LocationId
							LEFT OUTER JOIN systemparameter AS sp3 ON (p.i_MasterServiceTypeId = sp3.i_ParameterId) AND (119 = sp3.i_GroupId)
							INNER JOIN person AS s0 ON Filter1.v_PersonId1 = s0.v_PersonId
							LEFT OUTER JOIN systemparameter AS s1 ON (Filter1.i_AptitudeStatusId = s1.i_ParameterId) AND (124 = s1.i_GroupId)
							LEFT OUTER JOIN datahierarchy AS s2 ON (s0.i_DocTypeId = s2.i_ItemId) AND (106 = s2.i_GroupId)
							LEFT OUTER JOIN systemparameter AS s3 ON (p.i_EsoTypeId = s3.i_ParameterId) AND (118 = s3.i_GroupId)
							LEFT OUTER JOIN groupoccupation AS s4 ON p.v_GroupOccupationId = s4.v_GroupOccupationId
							LEFT OUTER JOIN organization AS s5 ON p.v_CustomerOrganizationId = s5.v_OrganizationId
							LEFT OUTER JOIN location AS s6 ON ((p.v_CustomerOrganizationId = s6.v_OrganizationId) OR ((p.v_CustomerOrganizationId IS NULL) AND (s6.v_OrganizationId IS NULL))) AND (p.v_CustomerLocationId = s6.v_LocationId)
							LEFT OUTER JOIN systemuser AS s7 ON Filter1.i_InsertUserId1 = s7.i_SystemUserId
							LEFT OUTER JOIN systemuser AS s8 ON Filter1.i_UpdateUserId1 = s8.i_SystemUserId " +
                                                    "WHERE (" + pintEsoTypeId + " = -1 or " + pintEsoTypeId + " = p.i_EsoTypeId) " +
                                                    "AND (" + pstrGroupOccupationId + " is null or " + pstrGroupOccupationId + " = p.v_GroupOccupationId) " +
                                                    "AND (" + pstrIdClienteAseguradora + " = p.v_AseguradoraOrganizationId)  ";
                        #endregion

                    case TipoFacturacion.Asistencial:

                        #region retorna query
                        return @"SELECT 
							Filter1.v_ServiceId1 AS ServiceId, 
							Filter1.v_CalendarId AS CalendarId, 
							Filter1.v_ProtocolId1 AS ProtocolId, 
							Filter1.v_PersonId1 AS PersonId, 
							Filter1.i_MasterServiceId AS MasterServiceId, 
							Filter1.v_Value11 AS TipoServicio, 
							Filter1.i_ServiceStatusId AS ServiceStatusId, 
							Filter1.v_Value12 AS Estado, 
							Filter1.i_AptitudeStatusId AS AptitudeStatusId, 
							 CAST(CAST( Filter1.d_ServiceDate AS datetime2) AS datetime2) AS C3, 
							 CAST(CAST( Filter1.d_GlobalExpirationDate AS datetime2) AS datetime2) AS C4, 
							 CAST(CAST( Filter1.d_ObsExpirationDate AS datetime2) AS datetime2) AS C5, 
							Filter1.i_FlagAgentId AS i_FlagAgentId, 
							 CAST( Filter1.d_DateTimeCalendar AS datetime2) AS C6, 
							o.v_Name AS Organizacion, 
							l.v_Name AS Establecimiento, 
							sp3.v_Value1 AS MasterServiceType, 
							p.i_MasterServiceTypeId AS MasterServiceTypeId, 
							p.i_EsoTypeId AS EsoId, 
							p.v_EmployerLocationId AS v_EmployerLocationId, 
							s0.v_FirstLastName + N' ' + s0.v_SecondLastName + N' ' + s0.v_FirstName AS C7, 
							s0.v_FirstName + N' ' + s0.v_FirstLastName + N' ' + s0.v_SecondLastName + N' ' + s0.v_DocNumber AS C8, 
							p.v_Name AS Protocolo, 
							s7.v_UserName AS UsuarioCrea, 
							s8.v_UserName AS UsuarioActualiza, 
							Filter1.d_InsertDate1 AS FechaCrea, 
							Filter1.d_UpdateDate1 AS FechaActualiza, 
							s1.v_Value1 AS Aptitud, 
							s2.v_Value1 AS TipoDocumento, 
							s0.v_DocNumber AS NroDocumento, 
							p.v_CustomerOrganizationId AS v_CustomerOrganizationId, 
							p.v_CustomerLocationId AS v_CustomerLocationId, 
							s3.v_Value1 AS Eso, 
							Filter1.i_InsertUserOccupationalMedicalId AS i_InsertUserOccupationalMedicalId, 
							Filter1.i_IsFac AS i_IsFac, 
							Filter1.i_ServiceId AS i_ServiceId, 
							s4.v_Name AS GrupoOcupacion, 
							p.v_GroupOccupationId AS v_GroupOccupationId
							FROM (SELECT s.v_ServiceId AS v_ServiceId1, s.v_ProtocolId AS v_ProtocolId1, s.v_PersonId AS v_PersonId1, s.i_MasterServiceId AS i_MasterServiceId, 
							s.i_ServiceStatusId AS i_ServiceStatusId, s.i_AptitudeStatusId AS i_AptitudeStatusId, 
							s.d_ServiceDate AS d_ServiceDate, s.d_GlobalExpirationDate AS d_GlobalExpirationDate, 
							s.d_ObsExpirationDate AS d_ObsExpirationDate, s.i_FlagAgentId AS i_FlagAgentId, s.d_UpdateDate AS d_UpdateDate1, 
							s.i_InsertUserId AS i_InsertUserId1, s.d_InsertDate AS d_InsertDate1, s.i_UpdateUserId AS i_UpdateUserId1, 
							s.i_InsertUserOccupationalMedicalId AS i_InsertUserOccupationalMedicalId, s.i_IsFac AS i_IsFac, 
							sp1.v_Value1 AS v_Value12, sp2.v_Value1 AS v_Value11, Extent5.v_CalendarId AS v_CalendarId, Extent5.d_DateTimeCalendar AS d_DateTimeCalendar, Extent5.i_ServiceId AS i_ServiceId
								FROM service AS s
								LEFT OUTER JOIN systemparameter AS sp1 ON (s.i_ServiceStatusId = sp1.i_ParameterId) AND (125 = sp1.i_GroupId)
								LEFT OUTER JOIN systemparameter AS sp2 ON (s.i_MasterServiceId = sp2.i_ParameterId) AND (119 = sp2.i_GroupId)
								INNER JOIN calendar AS Extent5 ON s.v_ServiceId = Extent5.v_ServiceId
								WHERE (0 = s.i_IsDeleted) 
								AND (3 = s.i_ServiceStatusId) 
								AND (s.v_IdVentaCliente is null) " +
                                                "AND ( CAST(CAST( s.d_ServiceDate AS datetime2) AS datetime2) >= convert(datetime2, '" + f1 + "', 121)) AND ( CAST(CAST( s.d_ServiceDate AS datetime2) AS datetime2) <= convert(datetime2, '" + f2 + " 23:59', 121)) AND (1 = Extent5.i_LineStatusId) ) AS Filter1 INNER JOIN protocol AS p ON Filter1.v_ProtocolId1 = p.v_ProtocolId " +
                                            @"INNER JOIN organization AS o ON p.v_EmployerOrganizationId = o.v_OrganizationId
							INNER JOIN location AS l ON p.v_EmployerLocationId = l.v_LocationId
							LEFT OUTER JOIN systemparameter AS sp3 ON (p.i_MasterServiceTypeId = sp3.i_ParameterId) AND (119 = sp3.i_GroupId)
							INNER JOIN person AS s0 ON Filter1.v_PersonId1 = s0.v_PersonId
							LEFT OUTER JOIN systemparameter AS s1 ON (Filter1.i_AptitudeStatusId = s1.i_ParameterId) AND (124 = s1.i_GroupId)
							LEFT OUTER JOIN datahierarchy AS s2 ON (s0.i_DocTypeId = s2.i_ItemId) AND (106 = s2.i_GroupId)
							LEFT OUTER JOIN systemparameter AS s3 ON (p.i_EsoTypeId = s3.i_ParameterId) AND (118 = s3.i_GroupId)
							LEFT OUTER JOIN groupoccupation AS s4 ON p.v_GroupOccupationId = s4.v_GroupOccupationId
							LEFT OUTER JOIN organization AS s5 ON p.v_CustomerOrganizationId = s5.v_OrganizationId
							LEFT OUTER JOIN location AS s6 ON ((p.v_CustomerOrganizationId = s6.v_OrganizationId) OR ((p.v_CustomerOrganizationId IS NULL) AND (s6.v_OrganizationId IS NULL))) AND (p.v_CustomerLocationId = s6.v_LocationId)
							LEFT OUTER JOIN systemuser AS s7 ON Filter1.i_InsertUserId1 = s7.i_SystemUserId
							LEFT OUTER JOIN systemuser AS s8 ON Filter1.i_UpdateUserId1 = s8.i_SystemUserId " +
                                            "WHERE s0.v_DocNumber = " + pstrIdClienteAseguradora;
                        #endregion

                    default:
                        break;
                }

                return null;
            }
            catch (Exception)
            {
                return null;
            }
        }

        public static List<ConsultaServicioDto> ObtenerServiciosPendientes(TipoFacturacion tipo, DateTime fechaIni, DateTime fechaFin,
            string pstrCustomerOrganizationId, string pstrCustomerLocationId, int pintEsoTypeId = -1, string pstrGroupOccupationId = null)
        {
            try
            {
                using (var cnx = ConnectionHelper.GetNewSigesoftConnection)
                {
                    if (cnx.State != System.Data.ConnectionState.Open) cnx.Open();
                    pstrCustomerLocationId = GetQuotedString(pstrCustomerLocationId);
                    pstrCustomerOrganizationId = GetQuotedString(pstrCustomerOrganizationId);
                    var f1 = string.Format("{0}-{1}-{2}", fechaIni.Year, fechaIni.Month, fechaIni.Day);
                    var f2 = string.Format("{0}-{1}-{2}", fechaFin.Year, fechaFin.Month, fechaFin.Day);
                    pstrGroupOccupationId = string.IsNullOrEmpty(pstrGroupOccupationId) || pstrGroupOccupationId.Equals("-1") ? "null" : GetQuotedString(pstrGroupOccupationId);

                    #region Consulta
                    var consulta = ConsultaServiciosPendientes(tipo, f1, f2, pintEsoTypeId, pstrGroupOccupationId, pstrCustomerOrganizationId, pstrCustomerLocationId);
                    #endregion

                    var resultado = cnx.Query<ConsultaServicioDto>(consulta).ToList();
                    return resultado;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public static List<LocationDto> GetLocationsByOrganizationId(string pstrOrganizationId)
        {
            try
            {
                using (var cnx = ConnectionHelper.GetNewSigesoftConnection)
                {
                    if (cnx.State != System.Data.ConnectionState.Open) cnx.Open();

                    var query = "select v_LocationId as 'LocationId', v_Name as 'Nombre' from location where v_OrganizationId = '" + pstrOrganizationId + "'";
                    return cnx.Query<LocationDto>(query).ToList();
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public static string ObtenerOrganizationIdByRuc(string pstrRUC)
        {
            try
            {
                using (var cnx = ConnectionHelper.GetNewSigesoftConnection)
                {
                    if (cnx.State != System.Data.ConnectionState.Open) cnx.Open();

                    var q = "select v_OrganizationId from organization where i_IsDeleted = 0 and v_IdentificationNumber = '" + pstrRUC + "'";
                    var id = cnx.Query<string>(q).FirstOrDefault();
                    return id;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public static void LlenarComboEso(UltraComboEditor cbo)
        {
            try
            {
                using (var cnx = ConnectionHelper.GetNewSigesoftConnection)
                {
                    if (cnx.State != System.Data.ConnectionState.Open) cnx.Open();

                    var query = @"select i_ParameterId as 'EsoId', v_Value1 as 'Nombre' from systemparameter
								  where i_GroupId = 118 and i_IsDeleted = 0";

                    var data = cnx.Query<EsoDto>(query).ToList();
                    data.Insert(0, new EsoDto { EsoId = -1, Nombre = "--Todos--" });

                    cbo.DataSource = data;
                    cbo.DisplayMember = "Nombre";
                    cbo.ValueMember = "EsoId";
                    cbo.SelectedIndex = 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public static void LlenarComboGeso(UltraComboEditor cbo, string pstrEmpresaId, string pstrLocationId)
        {
            try
            {
                using (var cnx = ConnectionHelper.GetNewSigesoftConnection)
                {
                    if (cnx.State != System.Data.ConnectionState.Open) cnx.Open();

                    var query = "select v_GroupOccupationId as GroupOccupationId, g.v_Name as Nombre from groupoccupation g " +
                                "join location l on g.v_LocationId =l.v_LocationId " +
                                "join organization o on l.v_OrganizationId = o.v_OrganizationId " +
                                "where o.v_OrganizationId = '" + pstrEmpresaId + "' " +
                                "and l.v_LocationId = '" + pstrLocationId + "' " +
                                "and g.i_IsDeleted = 0";

                    var data = cnx.Query<GrupoOcupacionalDto>(query).ToList();
                    data.Insert(0, new GrupoOcupacionalDto { GroupOccupationId = "-1", Nombre = "--Todos--" });

                    cbo.DataSource = data;
                    cbo.DisplayMember = "Nombre";
                    cbo.ValueMember = "GroupOccupationId";
                    cbo.SelectedIndex = 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        private static string ObtenerArrayConcatenado(string[] strings)
        {
            try
            {
                return string.Join(", ", strings.Select(p => GetQuotedString(p)));
            }
            catch (Exception ex)
            {
                return "''";
            }
        }

        private static productoDto ObtenerServicioSigesoft()
        {
            try
            {
                using (var cnx = ConnectionHelper.GetNewContasolConnection)
                {
                    if (cnx.State != System.Data.ConnectionState.Open) cnx.Open();
                    var query = @"select p.v_CodInterno, i_IdUnidadMedida, pd.v_IdProductoDetalle, l.v_NroCuentaVenta as NroCuenta from producto p
								join productodetalle pd on p.v_IdProducto = pd.v_IdProducto
								join linea l on p.v_IdLinea = l.v_IdLinea
								where pd.v_IdProductoDetalle = (select v_IdProductoDetalleFlete from configuracionempresa)";

                    var r = cnx.Query<productoDto>(query).FirstOrDefault();
                    return r;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        private static void ProcesarMedicina(ComponentServiceDto componente)
        {
            try
            {
                using (var cnx = ConnectionHelper.GetNewContasolConnection)
                {
                    if (cnx.State != System.Data.ConnectionState.Open) cnx.Open();
                    if (!string.IsNullOrEmpty(componente.IdMedicina))
                    {
                        var producto = cnx.Query<productoDto>(@"select p.v_CodInterno, p.v_Descripcion, p.d_PrecioVenta from producto p
													join productodetalle pd on p.v_idproducto = pd.v_IdProducto
													where pd.v_IdProductoDetalle = @id", new { id = componente.IdMedicina }).FirstOrDefault();
                        if (producto == null) throw new Exception("Medicina Contasol no encontrada");

                        componente.Precio = producto.d_PrecioVenta ?? 0;
                        componente.Descripcion = producto.v_Descripcion;
                        componente.Codigo = producto.v_CodInterno;
                        return;
                    }

                    throw new Exception("Medicina Sigesoft no encontrada");
                }
            }
            catch (Exception)
            {

                throw;
            }
        }

        public static BindingList<ventadetalleDto> ObtenerDetalleVenta(string[] idServicios, TipoFacturacion tipoCalculo)
        {
            try
            {
                using (var cnx = ConnectionHelper.GetNewSigesoftConnection)
                {
                    if (cnx.State != System.Data.ConnectionState.Open) cnx.Open();
                    var prodServicio = ObtenerServicioSigesoft();

                    if (prodServicio == null) throw new Exception("No se especificó el servicio en la conf. de empresa");

                    var queryservicios = "select c.v_Name as 'Descripcion', s.r_Price as 'Precio', pl.i_EsCoaseguro as 'EsCoaseguro',  " +
                                "pl.i_EsDeducible as 'EsDeducible', " +
                                "pl.d_Importe as 'ImporteDescontado', pl.v_IdUnidadProductiva as 'IdUnidadProductiva' " +
                                "from servicecomponent s " +
                                "left join component c on s.v_ComponentId = c.v_ComponentId  " +
                                "left join service ss on s.v_ServiceId = ss.v_ServiceId " +
                                "left join protocol p on ss.v_ProtocolId = p.v_ProtocolId " +
                                "left join \"plan\" pl on p.v_ProtocolId = pl.v_ProtocoloId and s.v_IdUnidadProductiva = pl.v_IdUnidadProductiva " +
                                "where s.v_ServiceId in (" + ObtenerArrayConcatenado(idServicios) + ")  " +
                                "and s.i_IsDeleted = 0 " +
                                "and s.r_Price > 0 " +
                                "order by c.v_Name";

                    var querymedicinas = @"select pl.i_EsCoaseguro as 'EsCoaseguro',  r.v_IdProductoDetalle as 'IdMedicina',
								pl.i_EsDeducible as 'EsDeducible', pl.d_Importe as 'ImporteDescontado', 
								pl.v_IdUnidadProductiva as 'IdUnidadProductiva', r.d_Cantidad as 'Cantidad'
								from receta r
								left join diagnosticrepository d on r.v_DiagnosticRepositoryId = d.v_DiagnosticRepositoryId
								left join [service] s on d.v_ServiceId = s.v_ServiceId
								left join protocol p on s.v_ProtocolId = p.v_ProtocolId
								left join [plan] pl on p.v_ProtocolId = pl.v_ProtocoloId and r.v_IdUnidadProductiva = pl.v_IdUnidadProductiva
								where s.v_ServiceId in (" + ObtenerArrayConcatenado(idServicios) + ")  " +
                                "and r.i_Lleva = 1";

                    var dataServicios = cnx.Query<ComponentServiceDto>(queryservicios).ToList();
                    var dataMedicinas = cnx.Query<ComponentServiceDto>(querymedicinas).ToList();
                    dataServicios = dataServicios.Where(p => p.PrecioRedondeado > 0).ToList();
                    dataMedicinas.ForEach(p => ProcesarMedicina(p));
                    var data = dataServicios.Concat(dataMedicinas).ToList();
                    data.ForEach(p => p.TipoCalculo = tipoCalculo);
                    var dataAgrupada = data.GroupBy(g => new { id = g.IdMedicina, cod = g.Codigo, nombre = g.Descripcion, precio = g.PrecioRedondeado });
                    var result = dataAgrupada.Select(n =>
                    {
                        var cant = n.Sum(p => p.Cantidad);
                        var pu = n.Key.precio;
                        var valorV = Math.Round(cant * pu, 2, MidpointRounding.AwayFromZero);
                        var igv = Math.Round(valorV * 0.18m, 2, MidpointRounding.AwayFromZero);
                        var pv = valorV + igv;
                        return new ventadetalleDto
                        {
                            i_Anticipio = 0,
                            i_IdAlmacen = 1,
                            i_IdCentroCosto = "0",
                            i_IdUnidadMedida = prodServicio.i_IdUnidadMedida ?? 5,
                            ProductoNombre = n.Key.nombre,
                            v_DescripcionProducto = n.Key.nombre,
                            v_IdProductoDetalle = string.IsNullOrEmpty(n.Key.id) ? prodServicio.v_IdProductoDetalle : n.Key.id,
                            v_NroCuenta = prodServicio.NroCuenta,
                            d_PrecioVenta = pv,
                            d_Igv = igv,
                            d_Cantidad = cant,
                            d_CantidadEmpaque = cant,
                            d_Precio = pu,
                            d_Valor = valorV,
                            d_ValorVenta = valorV,
                            d_PrecioImpresion = pu,
                            v_CodigoInterno = string.IsNullOrEmpty(n.Key.cod) ? prodServicio.v_CodInterno : n.Key.cod,
                            Empaque = 1,
                            UMEmpaque = "UND",
                            i_EsServicio = 1,
                            i_IdUnidadMedidaProducto = prodServicio.i_IdUnidadMedida ?? 5
                        };
                    }).ToList();

                    return new BindingList<ventadetalleDto>(result);
                }
            }
            catch (Exception)
            {

                throw;
            }
        }

        public static bool ProcesarServicio(TipoFacturacion tipoFacturacion, TipoAccionFacturacion tipoAccion, string pstrServiceId, string pstrVentaId = null)
        {
            try
            {

                using (var cnx = ConnectionHelper.GetNewSigesoftConnection)
                {
                    if (cnx.State != System.Data.ConnectionState.Open) cnx.Open();
                    if (tipoAccion == TipoAccionFacturacion.Facturar && string.IsNullOrEmpty(pstrVentaId)) throw new Exception("Id de la venta requerida para esta accion");
                    var columna = tipoFacturacion == TipoFacturacion.Aseguradora ? "v_IdVentaAseguradora" : "v_IdVentaCliente";
                    var valor = tipoAccion == TipoAccionFacturacion.Anular ? "null" : GetQuotedString(pstrVentaId);
                    var qry = "update service set " + columna + " = " + valor + " where v_ServiceId = " + GetQuotedString(pstrServiceId) + ";";
                    cnx.Execute(qry);
                    return true;
                }
            }
            catch (Exception)
            {
                throw;
            }
        }
    }

    public enum TipoAccionFacturacion
    {
        Facturar,
        Anular
    }

    public enum TipoFacturacion
    {
        Ocupacional = 0,
        Asistencial = 1,
        Aseguradora = 2
    }
}
