using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Entity;
using System.IO;
using System.Net;
using Newtonsoft.Json;
using System.Text;
using System.Linq;
using SAMBHS.Common.DataModel;
using SAMBHS.Common.Resource;
using SAMBHS.Windows.NubefactIntegration.Modelos;


namespace SAMBHS.Windows.NubefactIntegration
{
    /// <summary>
    /// Consume los servicios del API de Nubefact.
    /// EQC 24-6-2018
    /// </summary>
    public class NubeFacTManager
    {
        private readonly BackgroundWorker _bw;

        #region Propiedades
        /// <summary>
        /// Indica la ruta proporcionada por NubeFacT
        /// </summary>
        public string Ruta { get; set; }
        /// <summary>
        /// Indica el Token proporcionado por NubeFacT
        /// </summary>
        public string Token { get; set; }
        /// <summary>
        /// Especifica la acción a tomar con el documento seleccionado.
        /// </summary>
        public TipoAccion TipoAccionRealizar { get; set; }
        /// <summary>
        /// Especifica el formato del documento a generar.
        /// </summary>
        public string FormatoImpresion { get; set; }
        /// <summary>
        /// Especifica si se desea enviar a la SUNAT al momento de enviarlo a Nubefact.
        /// Si el valor es falso, debe enviarlo a SUNAT desde el portal de Nubefact.
        /// </summary>
        public bool EnviarAutomaticamente { get; set; }
        /// <summary>
        /// Estado con el que resulta la venta al terminar el proceso
        /// </summary>
        private EstadoSunat EstadoSunatResult { get; set; }
        #endregion

        #region Variables privadas
        private bool _erroresOcurridos;
        private int _rowIndex;
        private string _motivoBaja;
        #endregion

        #region Eventos
        public delegate void Terminado(IRespuesta rpt, int rowIndex, EstadoSunat estadoSunat);
        public delegate void Error(Exception ex, int rowIndex, TipoAccion action);
        public delegate void Estado(string msg, int rowIndex);

        public event Terminado TerminadoEvent;
        public event Error ErrorEvent;
        public event Estado EstadoEvent;
        #endregion

        public NubeFacTManager()
        {
            _bw = new BackgroundWorker();
            _bw.RunWorkerCompleted += _bw_RunWorkerCompleted;
            _bw.DoWork += _bw_DoWork;
            EstadoSunatResult = EstadoSunat.PENDIENTE;
            EnviarAutomaticamente = false;
        }

        /// <summary>
        /// Inicia el proceso de envio y recepcion de los cpe con nubefact y sunat.
        /// </summary>
        /// <param name="pstrIdVenta">Id de la venta a procesar</param>
        /// <param name="rowIndex">Inidce de la fila en la que se mostraran los estados</param>
        /// <param name="motivoBaja">Motivo de la baja en caso se requiera anular un cpe</param>
        public void Comenzar(string pstrIdVenta, int rowIndex = -1, string motivoBaja = null)
        {
            try
            {
                _rowIndex = rowIndex;
                _motivoBaja = motivoBaja;
                _bw.RunWorkerAsync(pstrIdVenta);
            }
            catch (Exception e)
            {
                _erroresOcurridos = true;
                if (ErrorEvent != null) ErrorEvent(e, _rowIndex, TipoAccionRealizar);
            }
        }

        private void _bw_DoWork(object sender, DoWorkEventArgs e)
        {
            try
            {
                var parm = (string)e.Argument;
                var rpt = RealizarSolicitud(parm);
                if (rpt != null)
                {
                    ConsumirRespuesta(rpt, parm, TipoAccionRealizar);
                    e.Result = rpt;
                }
            }
            catch (Exception exception)
            {
                _erroresOcurridos = true;
                if (ErrorEvent != null) ErrorEvent(exception, _rowIndex, TipoAccionRealizar);
            }
        }

        private void _bw_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            if (TerminadoEvent != null && !_erroresOcurridos && e.Result != null)
                TerminadoEvent((IRespuesta)e.Result, _rowIndex, EstadoSunatResult);
        }

        /// <summary>
        /// Arma el archivo json segun el tipo de solicitud y la envia al api de nubefact.
        /// Retorna la respuesta del api
        /// En caso ocurra una excepcion no retorna nada y dispara el evento de error.
        /// </summary>
        /// <param name="pstrIdVenta"></param>
        /// <returns></returns>
        private IRespuesta RealizarSolicitud(string pstrIdVenta)
        {
            try
            {
                var json = string.Empty;
                if (EstadoEvent != null) EstadoEvent("Preparando...", _rowIndex);

                #region Crea el request en formato json para enviarlo al api
                switch (TipoAccionRealizar)
                {
                    case TipoAccion.EnviarComprobante:
                        var invoice = ObtenerEnvioInvoiceRequest(pstrIdVenta);
                        if (invoice != null)
                            json = invoice.ToJson();
                        break;

                    case TipoAccion.ConsultarComprobante:
                        var reqConsultaCpe = ObtenConsultaEstadoRequest(pstrIdVenta);
                        if (reqConsultaCpe != null)
                            json = reqConsultaCpe.ToJson();
                        break;

                    case TipoAccion.DarBajaComprobante:
                        if (!string.IsNullOrWhiteSpace(_motivoBaja))
                        {
                            var reqBaja = ObtenerBajaRequest(pstrIdVenta);
                            if (reqBaja != null)
                                json = reqBaja.ToJson();
                        }
                        else throw new Exception("Por favor especifique el motivo de la baja.");

                        break;

                    case TipoAccion.ConsultarBajaComprobante:
                        goto case TipoAccion.ConsultarComprobante;
                }
                #endregion

                if (!string.IsNullOrEmpty(json))
                {
                    #region Realiza la consulta al api de nubefact y recibe la respuesta
                    if (EstadoEvent != null) EstadoEvent("Enviando...", _rowIndex);

                    var bytes = Encoding.Default.GetBytes(json);
                    var jsonEnUtf8 = Encoding.UTF8.GetString(bytes);
                    var jsonDeRespuesta = SendJson(Ruta, jsonEnUtf8, Token);
                    if (!string.IsNullOrWhiteSpace(jsonDeRespuesta))
                    {
                        if (!jsonDeRespuesta.Contains("errors"))
                            return RespuestaEnvio.FromJson(jsonDeRespuesta);

                        EstadoSunatResult = EstadoSunat.ERROR_RECEPCION_ENVIO;
                        return RespuestaError.FromJson(jsonDeRespuesta);
                    }
                    #endregion
                }

                throw new Exception("No se pudo constituir el archivo Json");
            }
            catch (Exception e)
            {
                _erroresOcurridos = true;
                if (ErrorEvent != null) ErrorEvent(e, _rowIndex, TipoAccionRealizar);
                return null;
            }
        }

        private string SendJson(string ruta, string json, string token)
        {
            try
            {
                using (var client = new WebClient())
                {
                    client.Headers[HttpRequestHeader.ContentType] = "application/json; charset=utf-8";
                    client.Headers[HttpRequestHeader.Authorization] = "Token token=" + token;
                    string respuesta = client.UploadString(ruta, "POST", json);
                    return respuesta;
                }
            }
            catch (WebException ex)
            {
                if (ex.Response != null)
                {
                    EstadoSunatResult = EstadoSunat.ERROR_RECEPCION_ENVIO;
                    var respuesta = new StreamReader(ex.Response.GetResponseStream()).ReadToEnd();
                    return respuesta;
                }
                else
                {
                    if (EstadoEvent != null) EstadoEvent(ex.Message, _rowIndex);
                    throw ex;
                }
            }
        }

        public enum TipoAccion
        {
            EnviarComprobante,
            ConsultarComprobante,
            DarBajaComprobante,
            ConsultarBajaComprobante
        }

        #region Genera los requests para el API de Nubefact
        private InvoiceComprobante ObtenerEnvioInvoiceRequest(string pstrIdVenta)
        {
            try
            {
                using (var dbContext = new SAMBHSEntitiesModelWin())
                {
                    var v = dbContext.venta.FirstOrDefault(p => p.v_IdVenta.Equals(pstrIdVenta));
                    if (v == null) return null;
                    var c = dbContext.cliente.FirstOrDefault(p => p.v_IdCliente.Equals(v.v_IdCliente));
                    if (c == null) return null;
                    var det = dbContext.ventadetalle.Where(p => p.v_IdVenta.Equals(pstrIdVenta) && p.i_Eliminado == 0).ToList();
                    if (!det.Any()) return null;

                    var esNcr = (v.i_IdTipoDocumento ?? 0) == 7 || (v.i_IdTipoDocumento ?? 0) == 8;
                    var cp = dbContext.datahierarchy.FirstOrDefault(p => p.i_GroupId == 23 && p.i_ItemId == (v.i_IdCondicionPago ?? 1));
                    var condicionP = cp != null ? cp.v_Value1 : "CONTADO";
                    var tipoCpe = DevuelveTipoCpe(v.i_IdTipoDocumento ?? 0);
                    if (tipoCpe.Equals("-1")) throw new Exception("Tipo Documento de venta no soportado");
                    var header = new InvoiceComprobante
                                {
                                    ClienteDireccion = c.v_DirecPrincipal,
                                    ClienteEmail = c.v_Correo ?? "",
                                    ClienteNumeroDeDocumento = c.v_NroDocIdentificacion,
                                    ClienteTipoDeDocumento = c.v_IdCliente.Equals("N002-CL000000000") ? "-" : (c.i_IdTipoIdentificacion ?? 1).ToString(),
                                    CodigoUnico = v.v_Periodo + v.v_Mes + v.v_Correlativo,
                                    FechaDeEmision = GetDateFormatted(v.t_FechaRegistro ?? DateTime.Today),
                                    FechaDeVencimiento = GetDateFormatted(v.t_FechaVencimiento ?? DateTime.Today),
                                    PlacaVehiculo = v.v_PlacaVehiculo,
                                    Moneda = v.i_IdMoneda ?? 1,
                                    Operacion = "generar_comprobante",
                                    TipoDeComprobante = tipoCpe,
                                    Serie = v.v_SerieDocumento.Trim(),
                                    Numero = long.Parse(v.v_CorrelativoDocumento),
                                    SunatTransaction = 1,
                                    ClienteDenominacion = (c.v_RazonSocial + " " + c.v_ApePaterno + " " + c.v_ApeMaterno + " " + c.v_PrimerNombre).Trim(),
                                    TipoDeCambio = (v.d_TipoCambio ?? 3).ToString("F"),
                                    PorcentajeDeIgv = "18.00",
                                    TotalDescuento = (v.d_Descuento ?? 0).ToString("F"),
                                    DescuentoGlobal = (v.d_Descuento ?? 0).ToString("F"),
                                    TotalAnticipo = (v.d_Anticipio ?? 0).ToString("F"),
                                    TotalGravada = det.Where(p => p.i_IdTipoOperacion.ToString().StartsWith("1")).Sum(s => s.d_ValorVenta ?? 0).ToString("F"),
                                    TotalExonerada = det.Where(p => p.i_IdTipoOperacion.ToString().StartsWith("2")).Sum(s => s.d_ValorVenta ?? 0).ToString("F"),
                                    TotalInafecta = det.Where(p => p.i_IdTipoOperacion.ToString().StartsWith("3")).Sum(s => s.d_ValorVenta ?? 0).ToString("F"),
                                    TotalGratuita = "0.00",
                                    TotalIgv = (v.d_IGV ?? 0).ToString("F"),
                                    Total = (v.d_Total ?? 0).ToString("F"),
                                    TotalOtrosCargos = ((v.d_total_otrostributos ?? 0) + (v.d_total_isc ?? 0)).ToString("F"),
                                    PercepcionTipo = "",
                                    Observaciones = v.v_Concepto.ToUpper(),
                                    Detraccion = (v.i_AfectaDetraccion ?? 0) == 1 ? "verdadero" : "falso",
                                    DocumentoQueSeModificaTipo = esNcr ? DevuelveTipoCpe(v.i_IdTipoDocumentoRef ?? 0) : "",
                                    DocumentoQueSeModificaSerie = esNcr ? v.v_SerieDocumentoRef.Trim().ToUpper() : "",
                                    DocumentoQueSeModificaNumero = esNcr ? long.Parse(v.v_CorrelativoDocumentoRef).ToString().Trim() : "",
                                    TipoDeNotaDeCredito = v.i_IdTipoNota.HasValue ? v.i_IdTipoNota > 0 ? v.i_IdTipoNota.ToString() : "" : "",
                                    TipoDeNotaDeDebito = v.i_IdTipoNota.HasValue ? v.i_IdTipoNota > 0 ? v.i_IdTipoNota.ToString() : "" : "",
                                    EnviarAutomaticamenteALaSunat = EnviarAutomaticamente ? "verdadero" : "falso",
                                    EnviarAutomaticamenteAlCliente = string.IsNullOrWhiteSpace(c.v_Correo) ? "falso" : "verdadero",
                                    CondicionesDePago = condicionP,
                                    MedioDePago = "",
                                    OrdenCompraServicio = v.v_OrdenCompra,
                                    FormatoDePdf = FormatoImpresion,
                                    ClienteEmail1 = "",
                                    ClienteEmail2 = "",
                                    PercepcionBaseImponible = "",
                                    TablaPersonalizadaCodigo = "",
                                    TotalIncluidoPercepcion = "",
                                    TotalPercepcion = ""
                                };

                    var details = det.Select(d =>
                    {
                        var prod = dbContext.productodetalle.FirstOrDefault(p => p.v_IdProductoDetalle.Equals(d.v_IdProductoDetalle));
                        if (prod == null) return null;
                        var prodInfo = new { prod.producto.v_CodInterno, EServicio = (prod.producto.i_EsServicio ?? 0) == 1 };
                        return new Item
                        {
                            Total = (d.d_PrecioVenta ?? 0).ToString("F"),
                            AnticipoDocumentoNumero = v.v_IdDocAnticipo ?? "",
                            AnticipoDocumentoSerie = "",
                            AnticipoRegularizacion = "false",
                            Cantidad = (d.d_Cantidad ?? 0).ToString("F"),
                            Codigo = prodInfo.v_CodInterno,
                            Descripcion = d.v_DescripcionProducto,
                            Descuento = (d.d_Descuento ?? 0).ToString("F"),
                            Igv = (d.d_Igv ?? 0).ToString("F"),
                            PrecioUnitario = (d.d_Precio ?? 0).ToString("F"),
                            Subtotal = (d.d_ValorVenta ?? 0).ToString("F"),
                            UnidadDeMedida = prodInfo.EServicio ? "ZZ" : "NIU",
                            TipoDeIgv = (d.i_IdTipoOperacion ?? 1).ToString(),
                            ValorUnitario = (d.d_Valor ?? 0).ToString("F"),
                        };
                    }).ToArray();

                    header.Items = details;

                    return header;
                }
            }
            catch (Exception e)
            {
                _erroresOcurridos = true;
                if (ErrorEvent != null) ErrorEvent(e, _rowIndex, TipoAccionRealizar);
                return null;
            }
        }

        private GeneraAnulacion ObtenerBajaRequest(string pstrIdVenta)
        {
            try
            {
                using (var dbContext = new SAMBHSEntitiesModelWin())
                {
                    var v = dbContext.venta.FirstOrDefault(p => p.v_IdVenta.Equals(pstrIdVenta));
                    if (v == null) return null;

                    var req = new GeneraAnulacion
                    {
                        Operacion = "generar_anulacion",
                        Motivo = _motivoBaja.Trim().ToUpper(),
                        Serie = v.v_SerieDocumento.Trim(),
                        Numero = long.Parse(v.v_CorrelativoDocumento).ToString(),
                        TipoDeComprobante = DevuelveTipoCpe(v.i_IdTipoDocumento ?? 1),
                        CodigoUnico = ""
                    };

                    return req;
                }
            }
            catch (Exception e)
            {
                _erroresOcurridos = true;
                if (ErrorEvent != null) ErrorEvent(e, _rowIndex, TipoAccionRealizar);
                return null;
            }
        }

        private ConsultaEstado ObtenConsultaEstadoRequest(string pstrIdVenta)
        {
            try
            {
                if (TipoAccionRealizar != TipoAccion.ConsultarComprobante &&
                    TipoAccionRealizar != TipoAccion.ConsultarBajaComprobante)
                    return null;

                using (var dbContext = new SAMBHSEntitiesModelWin())
                {
                    var v = dbContext.venta.FirstOrDefault(p => p.v_IdVenta.Equals(pstrIdVenta));
                    if (v == null) return null;

                    var req = new ConsultaEstado
                    {
                        Operacion = TipoAccionRealizar == TipoAccion.ConsultarComprobante ? "consultar_comprobante" : "consultar_anulacion",
                        Serie = v.v_SerieDocumento.Trim(),
                        Numero = long.Parse(v.v_CorrelativoDocumento).ToString(),
                        TipoDeComprobante = DevuelveTipoCpe(v.i_IdTipoDocumento ?? 1),
                    };

                    return req;
                }
            }
            catch (Exception e)
            {
                _erroresOcurridos = true;
                if (ErrorEvent != null) ErrorEvent(e, _rowIndex, TipoAccionRealizar);
                return null;
            }
        }

        #endregion

        private static string DevuelveTipoCpe(int i)
        {
            switch (i)
            {
                case 1: return "1";
                case 3: return "2";
                case 7: return "3";
                case 8: return "4";
                default: return "-1";
            }
        }

        /// <summary>
        /// Procesa la respuesta del api de nubefact y guarda los cambios en la bd
        /// </summary>
        /// <param name="rpt"></param>
        /// <param name="pstrIdVenta"></param>
        /// <param name="tipoAccion"></param>
        private void ConsumirRespuesta(IRespuesta rpt, string pstrIdVenta, TipoAccion tipoAccion)
        {
            try
            {
                if (EstadoEvent != null) EstadoEvent("Recibiendo...", _rowIndex);

                using (var dbContext = new SAMBHSEntitiesModelWin())
                {
                    var vta = dbContext.venta.FirstOrDefault(p => p.v_IdVenta.Equals(pstrIdVenta));
                    if (vta == null) return;
                    if (rpt is RespuestaEnvio)
                    {
                        var r = (RespuestaEnvio)rpt;

                        if (tipoAccion == TipoAccion.EnviarComprobante)
                        {
                            #region Manejo de respuesta de envio de cpe
                            EstadoSunatResult = r.AceptadaPorSunat ? EstadoSunat.CDR_ACEPTADO : EstadoSunat.ENVIADO_POR_CONSULTAR_ESTADO;

                            if (!string.IsNullOrEmpty(r.CodigoHash))
                                EstadoSunatResult = EstadoSunat.ERROR_RECEPCION_ENVIO;

                            if (!string.IsNullOrEmpty(r.SunatResponsecode))
                            {
                                int codSunat;
                                if (int.TryParse(r.SunatResponsecode, out codSunat))
                                {
                                    #region Excepciones
                                    if (codSunat >= 100 && codSunat <= 1999)
                                        EstadoSunatResult = EstadoSunat.ERROR_RECEPCION_ENVIO;
                                    #endregion

                                    #region Rechazos
                                    if (codSunat >= 2000 && codSunat <= 3999)
                                        EstadoSunatResult = EstadoSunat.CDR_RECHAZADO;
                                    #endregion

                                    #region Observados
                                    if (codSunat > 4000)
                                        EstadoSunatResult = EstadoSunat.CDR_ACEPTADO_CON_OBSERV;
                                    #endregion
                                }
                            }

                            vta.i_EstadoSunat = (short)EstadoSunatResult;
                            vta.v_SunatResponseCode = r.SunatResponsecode;
                            vta.v_CadenaCodigoQr = r.CadenaParaCodigoQr;
                            vta.v_CodigoBarras = r.CodigoDeBarras;
                            vta.v_Hash = r.CodigoHash;
                            vta.v_EnlaceXml = r.EnlaceDelXml;
                            vta.v_EnlacePdf = r.EnlaceDelPdf;
                            vta.v_EnlaceCdr = r.EnlaceDelCdr;
                            vta.v_KeySunat = r.Key;
                            dbContext.venta.ApplyCurrentValues(vta);
                            #endregion
                        }

                        if (tipoAccion == TipoAccion.DarBajaComprobante)
                        {
                            #region Manejo de respuesta de dada de baja

                            if (!string.IsNullOrEmpty(r.EnlaceDelXml))
                                EstadoSunatResult = EstadoSunat.ERROR_RECEPCION_BAJA;
                            else

                                EstadoSunatResult = r.AceptadaPorSunat ? EstadoSunat.DE_BAJA_CDR_ACEPTADO : EstadoSunat.DE_BAJA;

                            vta.i_EstadoSunat = (short)EstadoSunatResult;
                            dbContext.venta.ApplyCurrentValues(vta);
                            //TODO:GUARDADO DE LOS DATOS DE BAJA EN COLUMNAS DE LA TABLA VENTA

                            #endregion
                        }

                        if (tipoAccion == TipoAccion.ConsultarComprobante || tipoAccion == TipoAccion.ConsultarBajaComprobante)
                        {
                            #region Manejo de consultas de estado
                            if (r.AceptadaPorSunat)
                            {
                                EstadoSunatResult = tipoAccion == TipoAccion.ConsultarComprobante
                                    ? EstadoSunat.CDR_ACEPTADO
                                    : EstadoSunat.DE_BAJA_CDR_ACEPTADO;

                                vta.i_EstadoSunat = (short)EstadoSunatResult;
                                dbContext.venta.ApplyCurrentValues(vta);
                                //TODO:GUARDADO DE LOS DATOS DE BAJA EN COLUMNAS DE LA TABLA VENTA
                            }
                            #endregion
                        }
                    }
                    else if (rpt is RespuestaError)
                    {
                        var r = (RespuestaError)rpt;
                        if (r.Codigo == 23)
                        {
                            if (EstadoEvent != null) EstadoEvent("Actualizando datos...", _rowIndex);
                            EstadoSunatResult = EstadoSunat.ENVIADO_ANTERIORMENTE;
                            vta.i_EstadoSunat = (short)EstadoSunatResult;
                            dbContext.venta.ApplyCurrentValues(vta);
                        }
                        else
                            throw new Exception(r.Errors);
                    }

                    dbContext.SaveChanges();
                }
            }
            catch (Exception exception)
            {
                _erroresOcurridos = true;
                if (ErrorEvent != null) ErrorEvent(exception, _rowIndex, TipoAccionRealizar);
            }
        }

        private static string GetDateFormatted(DateTime d)
        {
            return d.Day + "-" + d.Month + "-" + d.Year;
        }
    }
}